/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/authorization': {
    /**
     * Get Authorizations
     * @description Queries for a list of authorizations using a list of parameters.
     * The size of the result set can be retrieved by using the
     * [Get Authorization Count](https://docs.camunda.org/manual/7.20/reference/rest/authorization/get-query-count/) method.
     */
    get: operations['queryAuthorizations']
    /**
     * Authorization Resource Options
     * @description The OPTIONS request allows you to check for the set of available operations that the currently
     * authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation
     * or not may depend on various factors, including the users authorizations to interact with this
     * resource and the internal configuration of the process engine.
     */
    options: operations['availableOperationsAuthorization']
  }
  '/authorization/check': {
    /**
     * Perform an Authorization Check
     * @description Performs an authorization check for the currently authenticated user.
     */
    get: operations['isUserAuthorized']
  }
  '/authorization/count': {
    /**
     * Get Authorization Count
     * @description Queries for authorizations using a list of parameters and retrieves the count.
     */
    get: operations['getAuthorizationCount']
  }
  '/authorization/create': {
    /**
     * Create a New Authorization
     * @description Creates a new authorization.
     */
    post: operations['createAuthorization']
  }
  '/authorization/{id}': {
    /**
     * Get Authorization
     * @description Retrieves an authorization by id.
     */
    get: operations['getAuthorization']
    /**
     * Update an Authorization
     * @description Updates an authorization by id.
     */
    put: operations['updateAuthorization']
    /**
     * Delete Authorization
     * @description Deletes an authorization by id.
     */
    delete: operations['deleteAuthorization']
    /**
     * Authorization Resource Options
     * @description The OPTIONS request allows you to check for the set of available operations that the currently
     * authenticated user can perform on a given instance of the `/authorization` resource.
     * Whether the user can perform an operation or not may depend on various factors, including the users
     * authorizations to interact with this resource and the internal configuration of the process engine.
     */
    options: operations['availableOperationsAuthorizationInstance']
  }
  '/batch': {
    /**
     * Get List
     * @description Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.
     * The size of the result set can be retrieved by using the
     * [Get Batch Count](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-query-count/) method.
     */
    get: operations['getBatches']
  }
  '/batch/count': {
    /**
     * Get List Count
     * @description Requests the number of batches that fulfill the query criteria.
     * Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-query/) method.
     */
    get: operations['getBatchesCount']
  }
  '/batch/statistics': {
    /**
     * Get Statistics
     * @description Queries for batch statistics that fulfill given parameters.
     * Parameters may be the properties of batches, such as the id or type.
     * The size of the result set can be retrieved by using the
     * [Get Batch Statistics Count](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-statistics-query-count/) method.
     */
    get: operations['getBatchStatistics']
  }
  '/batch/statistics/count': {
    /**
     * Get Statistics Count
     * @description Requests the number of batch statistics that fulfill the query criteria.
     * Takes the same filtering parameters as the
     * [Get Batch Statistics](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-statistics-query/) method.
     */
    get: operations['getBatchStatisticsCount']
  }
  '/batch/{id}': {
    /**
     * Get
     * @description Retrieves a batch by id, according to the Batch interface in the engine.
     */
    get: operations['getBatch']
    /**
     * Delete
     * @description Deletes a batch by id, including all related jobs and job definitions.
     * Optionally also deletes the batch history.
     */
    delete: operations['deleteBatch']
  }
  '/batch/{id}/suspended': {
    /**
     * Activate/Suspend
     * @description Activates or suspends a batch by id.
     */
    put: operations['updateBatchSuspensionState']
  }
  '/condition': {
    /**
     * Evaluate
     * @description Triggers evaluation of conditions for conditional start event(s).
     * Internally this maps to the engines condition evaluation builder method ConditionEvaluationBuilder#evaluateStartConditions().
     * For more information see the [Conditional Start Events](https://docs.camunda.org/manual/7.20/reference/bpmn20/events/conditional-events/#conditional-start-event)
     * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
     */
    post: operations['evaluateCondition']
  }
  '/decision-definition': {
    /**
     * Get List
     * @description Queries for decision definitions that fulfill given parameters.
     * Parameters may be the properties of decision definitions, such as the name, key or version.
     * The size of the result set can be retrieved by using
     * the [Get Decision Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/decision-definition/get-query-count/) method.
     */
    get: operations['getDecisionDefinitions']
  }
  '/decision-definition/count': {
    /**
     * Get List Count
     * @description Requests the number of decision definitions that fulfill the query criteria.
     * Takes the same filtering parameters as the
     * [Get Decision Definition](https://docs.camunda.org/manual/7.20/reference/rest/decision-definition/get-query/) method.
     */
    get: operations['getDecisionDefinitionsCount']
  }
  '/decision-definition/key/{key}': {
    /**
     * Get Decision Definition By Key
     * @description Retrieves the latest version of the decision definition which belongs to no tenant.
     */
    get: operations['getDecisionDefinitionByKey']
  }
  '/decision-definition/key/{key}/diagram': {
    /**
     * Get Diagram By Key
     * @description Returns the diagram for the latest version of the decision definition which belongs to no tenant
     */
    get: operations['getDecisionDefinitionDiagramByKey']
  }
  '/decision-definition/key/{key}/evaluate': {
    /**
     * Evaluate By Key
     * @description Evaluates the latest version of the decision definition which belongs to no tenant.
     * The input values of the decision have to be supplied in the request body.
     */
    post: operations['evaluateDecisionByKey']
  }
  '/decision-definition/key/{key}/history-time-to-live': {
    /**
     * Update History Time to Live By Key
     * @description Updates the latest version of the decision definition which belongs to no tenant.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     */
    put: operations['updateHistoryTimeToLiveByDecisionDefinitionKey']
  }
  '/decision-definition/key/{key}/tenant-id/{tenant-id}': {
    /**
     * Get Decision Definition By Key And Tenant Id
     * @description Retrieves the latest version of the decision definition for tenant
     */
    get: operations['getDecisionDefinitionByKeyAndTenantId']
  }
  '/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram': {
    /**
     * Get Diagram By Key And Tenant
     * @description Returns the XML of the latest version of the decision definition for tenant.
     */
    get: operations['getDecisionDefinitionDiagramByKeyAndTenant']
  }
  '/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate': {
    /**
     * Evaluate By Key And Tenant
     * @description Evaluates the latest version of the decision definition for tenant.
     * The input values of the decision have to be supplied in the request body.
     */
    post: operations['evaluateDecisionByKeyAndTenant']
  }
  '/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live': {
    /**
     * Update History Time to Live By Key And Tenant
     * @description Updates the latest version of the decision definition for tenant.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
     * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
     * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
     */
    put: operations['updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant']
  }
  '/decision-definition/key/{key}/tenant-id/{tenant-id}/xml': {
    /**
     * Get XML By Key and Tenant
     * @description Retrieves the XML of the latest version of the decision definition for tenant
     */
    get: operations['getDecisionDefinitionDmnXmlByKeyAndTenant']
  }
  '/decision-definition/key/{key}/xml': {
    /**
     * Get XML By Key
     * @description Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
     */
    get: operations['getDecisionDefinitionDmnXmlByKey']
  }
  '/decision-definition/{id}': {
    /**
     * Get Decision Definition By Id
     * @description Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
     */
    get: operations['getDecisionDefinitionById']
  }
  '/decision-definition/{id}/diagram': {
    /**
     * Get Diagram
     * @description Retrieves the diagram of a decision definition.
     */
    get: operations['getDecisionDefinitionDiagram']
  }
  '/decision-definition/{id}/evaluate': {
    /**
     * Evaluate By Id
     * @description Evaluates a given decision and returns the result.
     * The input values of the decision have to be supplied in the request body.
     */
    post: operations['evaluateDecisionById']
  }
  '/decision-definition/{id}/history-time-to-live': {
    /**
     * Update History Time to Live
     * @description Updates history time to live for decision definition.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     */
    put: operations['updateHistoryTimeToLiveByDecisionDefinitionId']
  }
  '/decision-definition/{id}/xml': {
    /**
     * Get XML By Id
     * @description Retrieves the DMN XML of a decision definition.
     */
    get: operations['getDecisionDefinitionDmnXmlById']
  }
  '/decision-requirements-definition': {
    /**
     * Get Decision Requirements Definitions
     * @description Queries for decision requirements definitions that fulfill given parameters.
     * Parameters may be the properties of decision requirements definitions, such as the name,
     * key or version.  The size of the result set can be retrieved by using the
     * [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/decision-requirements-definition/get-query-count/)
     * method.
     */
    get: operations['getDecisionRequirementsDefinitions']
  }
  '/decision-requirements-definition/count': {
    /**
     * Get Decision Requirements Definition Count
     * @description Requests the number of decision requirements definitions that fulfill the query
     * criteria.
     * Takes the same filtering parameters as the
     * [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.20/reference/rest/decision-requirements-definition/get-query/)
     * method.
     */
    get: operations['getDecisionRequirementsDefinitionsCount']
  }
  '/decision-requirements-definition/key/{key}': {
    /**
     * Get Decision Requirements Definition by Key
     * @description Retrieves a decision requirements definition according to the
     * `DecisionRequirementsDefinition` interface in the engine.
     * Returns the latest version of the decision requirements definition
     * which belongs to no tenant.
     */
    get: operations['getDecisionRequirementsDefinitionByKey']
  }
  '/decision-requirements-definition/key/{key}/diagram': {
    /**
     * Get Decision Requirements Diagram by Key
     * @description Retrieves the diagram of a decision requirements definition.
     * Returns the diagram for the latest version of the decision requirements
     * definition which belongs to no tenant.
     */
    get: operations['getDecisionRequirementsDefinitionDiagramByKey']
  }
  '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}': {
    /**
     * Get Decision Requirements Definition by Key and Tenant ID
     * @description Retrieves a decision requirements definition according to the
     * `DecisionRequirementsDefinition` interface in the engine.
     * Returns the latest version of the decision requirements definition
     * for a tenant.
     */
    get: operations['getDecisionRequirementsDefinitionByKeyAndTenantId']
  }
  '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram': {
    /**
     * Get Decision Requirements Diagram by Key and Tenant ID
     * @description Retrieves the diagram of a decision requirements definition.
     * Returns the diagram of the latest version of the decision requirements
     * definition for a tenant.
     */
    get: operations['getDecisionRequirementsDefinitionDiagramByKeyAndTenantId']
  }
  '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml': {
    /**
     * Get DMN XML by Key and Tenant ID
     * @description Retrieves the DMN XML of a decision requirements definition.
     * Returns the XML of the latest version of the decision requirements
     * definition for a tenant.
     */
    get: operations['getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId']
  }
  '/decision-requirements-definition/key/{key}/xml': {
    /**
     * Get DMN XML by Key
     * @description Retrieves the DMN XML of a decision requirements definition.
     * Returns the XML for the latest version of the decision requirements
     * definition which belongs to no tenant.
     */
    get: operations['getDecisionRequirementsDefinitionDmnXmlByKey']
  }
  '/decision-requirements-definition/{id}': {
    /**
     * Get Decision Requirements Definition by ID
     * @description Retrieves a decision requirements definition according to the
     * `DecisionRequirementsDefinition` interface in the engine.
     */
    get: operations['getDecisionRequirementsDefinitionById']
  }
  '/decision-requirements-definition/{id}/diagram': {
    /**
     * Get Decision Requirements Diagram by ID
     * @description Retrieves the diagram of a decision requirements definition.
     */
    get: operations['getDecisionRequirementsDefinitionDiagramById']
  }
  '/decision-requirements-definition/{id}/xml': {
    /**
     * Get DMN XML by ID
     * @description Retrieves the DMN XML of a decision requirements definition.
     */
    get: operations['getDecisionRequirementsDefinitionDmnXmlById']
  }
  '/deployment': {
    /**
     * Get List
     * @description Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments,
     * such as the id or name or a range of the deployment time. The size of the result set can be retrieved by
     * using the [Get Deployment count](https://docs.camunda.org/manual/7.20/reference/rest/deployment/get-query-count/) method.
     */
    get: operations['getDeployments']
  }
  '/deployment/count': {
    /**
     * Get List Count
     * @description Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
     * [Get Deployments](https://docs.camunda.org/manual/7.20/reference/rest/deployment/get-query/) method.
     */
    get: operations['getDeploymentsCount']
  }
  '/deployment/create': {
    /**
     * Create
     * @description Creates a deployment.
     *
     * **Security Consideration**
     *
     * Deployments can contain custom code in form of scripts or EL expressions to customize process behavior.
     * This may be abused for remote execution of arbitrary code.
     */
    post: operations['createDeployment']
  }
  '/deployment/registered': {
    /**
     * Get Registered Deployments
     * @description Queries the registered deployment IDs for the current application.
     */
    get: operations['getRegisteredDeployments']
  }
  '/deployment/{id}': {
    /**
     * Get
     * @description Retrieves a deployment by id, according to the `Deployment` interface of the engine.
     */
    get: operations['getDeployment']
    /**
     * Delete
     * @description Deletes a deployment by id.
     */
    delete: operations['deleteDeployment']
  }
  '/deployment/{id}/redeploy': {
    /**
     * Redeploy
     * @description Re-deploys an existing deployment.
     *
     * The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or
     * `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the
     * given deployment are re-deployed.
     *
     * **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize
     * process behavior. This may be abused for remote execution of arbitrary code. See the section on
     * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/) in
     * the user guide for details.
     */
    post: operations['redeploy']
  }
  '/deployment/{id}/resources': {
    /**
     * Get Resources
     * @description Retrieves all deployment resources of a given deployment.
     */
    get: operations['getDeploymentResources']
  }
  '/deployment/{id}/resources/{resourceId}': {
    /**
     * Get Resource
     * @description Retrieves a deployment resource by resource id for the given deployment.
     */
    get: operations['getDeploymentResource']
  }
  '/deployment/{id}/resources/{resourceId}/data': {
    /**
     * Get Resource (Binary)
     * @description Retrieves the binary content of a deployment resource for the given deployment by id.
     */
    get: operations['getDeploymentResourceData']
  }
  '/engine': {
    /**
     * Get List
     * @description Retrieves the names of all process engines available on your platform.
     * **Note**: You cannot prepend `/engine/{name}` to this method.
     */
    get: operations['getProcessEngineNames']
  }
  '/event-subscription': {
    /**
     * Get List
     * @description Queries for event subscriptions that fulfill given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Event Subscriptions count](https://docs.camunda.org/manual/7.20/reference/rest/event-subscription/get-query-count/) method.
     */
    get: operations['getEventSubscriptions']
  }
  '/event-subscription/count': {
    /**
     * Get List Count
     * @description Queries for the number of event subscriptions that fulfill given parameters.
     * Takes the same parameters as the
     * [Get Event Subscriptions](https://docs.camunda.org/manual/7.20/reference/rest/event-subscription/get-query/) method.
     */
    get: operations['getEventSubscriptionsCount']
  }
  '/execution': {
    /**
     * Get Executions
     * @description Queries for the executions that fulfill given parameters.
     * Parameters may be static as well as dynamic runtime properties of
     * executions.
     * The size of the result set can be retrieved by using the [Get
     * Execution Count](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query-count/)
     * method.
     */
    get: operations['getExecutions']
    /**
     * Get Executions (POST)
     * @description Queries for executions that fulfill given parameters through a JSON object.
     * This method is slightly more powerful than the [Get
     * Executions](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query/) method
     * because it allows
     * to filter by multiple instance and execution variables of types
     * `String`, `Number` or `Boolean`.
     */
    post: operations['queryExecutions']
  }
  '/execution/count': {
    /**
     * Get Execution Count
     * @description Queries for the number of executions that fulfill given parameters.
     * Takes the same parameters as the [Get
     * Executions](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query/) method.
     */
    get: operations['getExecutionsCount']
    /**
     * Get Execution Count (POST)
     * @description Queries for the number of executions that fulfill given parameters. This method
     * takes the same message body as the [Get Executions
     * POST](https://docs.camunda.org/manual/7.20/reference/rest/execution/post-query/) method and
     * therefore it is slightly more powerful than the [Get Execution
     * Count](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query-count/) method.
     */
    post: operations['queryExecutionsCount']
  }
  '/execution/{id}': {
    /**
     * Get Execution
     * @description Retrieves an execution by id, according to the `Execution` interface in the
     * engine.
     */
    get: operations['getExecution']
  }
  '/execution/{id}/create-incident': {
    /**
     * Create Incident
     * @description Creates a custom incident with given properties.
     */
    post: operations['createIncident']
  }
  '/execution/{id}/localVariables': {
    /**
     * Get Local Execution Variables
     * @description Retrieves all variables of a given execution by id.
     */
    get: operations['getLocalExecutionVariables']
    /**
     * Update/Delete Local Execution Variables
     * @description Updates or deletes the variables in the context of an execution by id. The updates
     * do not propagate upwards in the execution hierarchy.
     * Updates precede deletions. So, if a variable is updated AND deleted,
     * the deletion overrides the update.
     */
    post: operations['modifyLocalExecutionVariables']
  }
  '/execution/{id}/localVariables/{varName}': {
    /**
     * Get Local Execution Variable
     * @description Retrieves a variable from the context of a given execution by id. Does not traverse
     * the parent execution hierarchy.
     */
    get: operations['getLocalExecutionVariable']
    /**
     * Put Local Execution Variable
     * @description Sets a variable in the context of a given execution by id. Update does not
     * propagate upwards in the execution hierarchy.
     */
    put: operations['putLocalExecutionVariable']
    /**
     * Delete Local Execution Variable
     * @description Deletes a variable in the context of a given execution by id. Deletion does not
     * propagate upwards in the execution hierarchy.
     */
    delete: operations['deleteLocalExecutionVariable']
  }
  '/execution/{id}/localVariables/{varName}/data': {
    /**
     * Get Local Execution Variable (Binary)
     * @description Retrieves a binary variable from the context of a given execution by id. Does not
     * traverse the parent execution hierarchy. Applicable for byte array and
     * file variables.
     */
    get: operations['getLocalExecutionVariableBinary']
    /**
     * Post Local Execution Variable (Binary)
     * @description Sets the serialized value for a binary variable or the binary value for a file
     * variable in the context of a given execution by id.
     */
    post: operations['setLocalExecutionVariableBinary']
  }
  '/execution/{id}/messageSubscriptions/{messageName}': {
    /**
     * Get Message Event Subscription
     * @description Retrieves a message event subscription for a given execution by id and a message
     * name.
     */
    get: operations['getMessageEventSubscription']
  }
  '/execution/{id}/messageSubscriptions/{messageName}/trigger': {
    /**
     * Trigger Message Event Subscription
     * @description Delivers a message to a specific execution by id, to trigger an existing message
     * event subscription. Inject process variables as the message's
     * payload.
     */
    post: operations['triggerEvent']
  }
  '/execution/{id}/signal': {
    /**
     * Trigger Execution
     * @description Signals an execution by id. Can for example be used to explicitly skip user tasks
     * or signal asynchronous continuations.
     */
    post: operations['signalExecution']
  }
  '/external-task': {
    /**
     * Get List
     * @description Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic
     * runtime properties of executions. The size of the result set can be retrieved by using the
     * [Get External Task Count](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query-count/) method.
     */
    get: operations['getExternalTasks']
    /**
     * Get List (POST)
     * @description Queries for external tasks that fulfill given parameters in the form of a JSON object.
     *
     * This method is slightly more powerful than the
     * [Get External Tasks](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query/) method because it allows to
     * specify a hierarchical result sorting.
     */
    post: operations['queryExternalTasks']
  }
  '/external-task/count': {
    /**
     * Get List Count
     * @description Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the
     * [Get External Tasks](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query/) method.
     */
    get: operations['getExternalTasksCount']
    /**
     * Get List Count (POST)
     * @description Queries for the number of external tasks that fulfill given parameters. This method takes the same message
     * body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.20/reference/rest/external-task/post-query/) method.
     */
    post: operations['queryExternalTasksCount']
  }
  '/external-task/fetchAndLock': {
    /**
     * Fetch and Lock
     * @description Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted
     * to specific task topics and for each task topic an individual lock time can be provided.
     */
    post: operations['fetchAndLock']
  }
  '/external-task/retries': {
    /**
     * Set Retries Sync
     * @description Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,
     * an incident is created.
     */
    put: operations['setExternalTaskRetries']
  }
  '/external-task/retries-async': {
    /**
     * Set Retries Async
     * @description Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0,
     * an incident is created.
     */
    post: operations['setExternalTaskRetriesAsyncOperation']
  }
  '/external-task/topic-names': {
    /**
     * Get External Task Topic Names
     * @description Queries for distinct topic names of external tasks that fulfill given parameters.
     * Query can be restricted to only tasks with retries left, tasks that are locked, or tasks
     * that are unlocked. The parameters withLockedTasks and withUnlockedTasks are
     * exclusive. Setting them both to true will return an empty list.
     * Providing no parameters will return a list of all distinct topic names with external tasks.
     */
    get: operations['getTopicNames']
  }
  '/external-task/{id}': {
    /**
     * Get
     * @description Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
     */
    get: operations['getExternalTask']
  }
  '/external-task/{id}/bpmnError': {
    /**
     * Handle BPMN Error
     * @description Reports a business error in the context of a running external task by id. The error code must be specified
     * to identify the BPMN error handler.
     */
    post: operations['handleExternalTaskBpmnError']
  }
  '/external-task/{id}/complete': {
    /**
     * Complete
     * @description Completes an external task by id and updates process variables.
     */
    post: operations['completeExternalTaskResource']
  }
  '/external-task/{id}/errorDetails': {
    /**
     * Get Error Details
     * @description Retrieves the error details in the context of a running external task by id.
     */
    get: operations['getExternalTaskErrorDetails']
  }
  '/external-task/{id}/extendLock': {
    /**
     * Extend Lock
     * @description Extends the timeout of the lock by a given amount of time.
     */
    post: operations['extendLock']
  }
  '/external-task/{id}/failure': {
    /**
     * Handle Failure
     * @description Reports a failure to execute an external task by id. A number of retries and a timeout until the task can
     * be retried can be specified. If retries are set to 0, an incident for this task is created.
     */
    post: operations['handleFailure']
  }
  '/external-task/{id}/lock': {
    /** @description Lock an external task by a given id for a specified worker and amount of time. */
    post: operations['lock']
  }
  '/external-task/{id}/priority': {
    /**
     * Set Priority
     * @description Sets the priority of an existing external task by id. The default value of a priority is 0.
     */
    put: operations['setExternalTaskResourcePriority']
  }
  '/external-task/{id}/retries': {
    /**
     * Set Retries
     * @description Sets the number of retries left to execute an external task by id. If retries are set to 0, an
     * incident is created.
     */
    put: operations['setExternalTaskResourceRetries']
  }
  '/external-task/{id}/unlock': {
    /**
     * Unlock
     * @description Unlocks an external task by id. Clears the task's lock expiration time and worker id.
     */
    post: operations['unlock']
  }
  '/filter': {
    /**
     * Get Filters
     * @description Queries for a list of filters using a list of parameters. The size of the result
     * set can be retrieved
     * by using the [Get Filter Count](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-query-count/) method.
     */
    get: operations['getFilterList']
    /**
     * Filter Resource Options
     * @description The OPTIONS request allows you to check for the set of available operations
     * that the currently authenticated user can perform on the `/filter` resource.
     * Whether the user can perform an operation or not may depend on various
     * factors, including the users authorizations to interact with this
     * resource and the internal configuration of the process engine.
     */
    options: operations['filterResourceOptions']
  }
  '/filter/count': {
    /**
     * Get Filter Count
     * @description Retrieves the number of filters that fulfill a provided query. Corresponds to the
     * size of the result set when using the
     * [Get Filters](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-query/) method.
     */
    get: operations['getFilterCount']
  }
  '/filter/create': {
    /**
     * Create Filter
     * @description Creates a new filter.
     */
    post: operations['createFilter']
  }
  '/filter/{id}': {
    /**
     * Get Single Filter
     * @description Retrieves a single filter by id, according to the `Filter` interface in the engine.
     */
    get: operations['getSingleFilter']
    /**
     * Update Filter
     * @description Updates an existing filter.
     */
    put: operations['updateFilter']
    /**
     * Delete Filter
     * @description Deletes a filter by id.
     */
    delete: operations['deleteFilter']
    /**
     * Filter Resource Options
     * @description The OPTIONS request allows you to check for the set of available operations
     * that the currently authenticated user can perform on the `/filter` resource.
     * Whether the user can perform an operation or not may depend on various
     * factors, including the users authorizations to interact with this
     * resource and the internal configuration of the process engine.
     */
    options: operations['filterResourceOptionsSingle']
  }
  '/filter/{id}/count': {
    /**
     * Execute Filter Count
     * @description Executes the saved query of the filter by id and returns the count.
     */
    get: operations['executeFilterCount']
    /**
     * Execute Filter Count (POST)
     * @description Executes the saved query of the filter by id and returns the count. This method is
     * slightly more powerful then the [Get Execute Filter Count](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-count/)
     * method because it allows to extend the saved query of the filter.
     */
    post: operations['postExecuteFilterCount']
  }
  '/filter/{id}/list': {
    /**
     * Execute Filter List
     * @description Executes the saved query of the filter by id and returns the result list.
     */
    get: operations['executeFilterList']
    /**
     * Execute Filter List (POST)
     * @description Executes the saved query of the filter by id and returns the result list. This
     * method is slightly more powerful then the
     * [Get Execute FilterList](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-list/) method
     * because it allows to extend the saved query of the filter.
     */
    post: operations['postExecuteFilterList']
  }
  '/filter/{id}/singleResult': {
    /**
     * Execute Filter Single Result
     * @description Executes the saved query of the filter by id and returns the single result.
     */
    get: operations['executeFilterSingleResult']
    /**
     * Execute Filter Single Result (POST)
     * @description Executes the saved query of the filter by id and returns the single result. This method is slightly more
     * powerful then the [Get Execute Filter Single Result](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-single-result/)
     * method because it allows to extend the saved query of the filter.
     */
    post: operations['postExecuteFilterSingleResult']
  }
  '/group': {
    /**
     * Get List
     * @description Queries for a list of groups using a list of parameters. The size of the result set can be retrieved
     * by using the [Get Group Count](https://docs.camunda.org/manual/7.20/reference/rest/group/get-query-count) method.
     */
    get: operations['getQueryGroups']
    /**
     * Get List (POST)
     * @description Queries for a list of groups using a list of parameters.
     * The size of the result set can be retrieved by using the
     * [Get Group Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/group/post-query-count/) method.
     */
    post: operations['postQueryGroups']
    /**
     * Group Resource Options
     * @description The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for
     * individual group instances. The OPTIONS request allows checking for the set of available operations that
     * the currently authenticated user can perform on the `/group` resource. If the user can perform an operation
     * or not may depend on various things, including the users authorizations to interact with this resource and
     * the internal configuration of the process engine.
     */
    options: operations['availableGroupOperations']
  }
  '/group/count': {
    /**
     * Get List Count
     * @description Queries for groups using a list of parameters and retrieves the count.
     */
    get: operations['getGroupCount']
    /**
     * Get List Count (POST)
     * @description Queries for groups using a list of parameters and retrieves the count.
     */
    post: operations['queryGroupCount']
  }
  '/group/create': {
    /**
     * Create Group
     * @description Creates a new group.
     */
    post: operations['createGroup']
  }
  '/group/{id}': {
    /**
     * Get Group
     * @description Retrieves a group by id.
     */
    get: operations['getGroup']
    /**
     * Update Group
     * @description Updates a given group by id.
     */
    put: operations['updateGroup']
    /**
     * Delete Group
     * @description Deletes a group by id.
     */
    delete: operations['deleteGroup']
    /**
     * Group Resource Instance Options
     * @description The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances.
     * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the
     * `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations
     * to interact with this resource and the internal configuration of the process engine.
     */
    options: operations['availableGroupInstanceOperations']
  }
  '/group/{id}/members': {
    /**
     * Group Membership Resource Options
     * @description The OPTIONS request allows checking for the set of available operations that the currently authenticated
     * user can perform on the resource. If the user can perform an operation or not may depend on various
     * things, including the users authorizations to interact with this resource and the internal configuration
     * of the process engine.
     */
    options: operations['availableGroupMembersOperations']
  }
  '/group/{id}/members/{userId}': {
    /**
     * Create Group Member
     * @description Adds a member to a group.
     */
    put: operations['createGroupMember']
    /**
     * Delete a Group Member
     * @description Removes a member from a group.
     */
    delete: operations['deleteGroupMember']
  }
  '/history/activity-instance': {
    /**
     * Get List
     * @description Queries for historic activity instances that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     */
    get: operations['getHistoricActivityInstances']
    /**
     * Get List (POST)
     * @description Queries for historic activity instances that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
     */
    post: operations['queryHistoricActivityInstances']
  }
  '/history/activity-instance/count': {
    /**
     * Get List Count
     * @description Queries for the number of historic activity instances that fulfill the given parameters.
     * Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
     */
    get: operations['getHistoricActivityInstancesCount']
    /**
     * Get List Count (POST)
     * @description Queries for the number of historic activity instances that fulfill the given parameters.
     */
    post: operations['queryHistoricActivityInstancesCount']
  }
  '/history/activity-instance/{id}': {
    /**
     * Get
     * @description Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
     */
    get: operations['getHistoricActivityInstance']
  }
  '/history/batch': {
    /**
     * Get Historic Batches
     * @description Queries for historic batches that fulfill given parameters. Parameters may be
     * the properties of batches, such as the id or type. The
     * size of the result set can be retrieved by using the
     * [Get Historic Batch Count](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-query-count/)
     * method.
     */
    get: operations['getHistoricBatches']
  }
  '/history/batch/cleanable-batch-report': {
    /**
     * Get Cleanable Batch Report
     * @description Retrieves a report about a historic batch operations relevant to history cleanup
     * (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)
     * ) so that you can tune the history time to live.
     * These reports include the count of the finished batches, cleanable
     * batches and type of the batch.
     * The size of the result set can be retrieved by using the
     * [Get Cleanable Batch Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-cleanable-batch-report-count/)
     * method.
     *
     * **Please note:**
     * The history time to live for batch operations does not support [Multi-Tenancy](https://docs.camunda.org/manual/7.20/user-guide/process-engine/multi-tenancy.md).
     * The report will return an information for all batch operations (for all tenants) if you have permissions
     * to see the history.
     */
    get: operations['getCleanableHistoricBatchesReport']
  }
  '/history/batch/cleanable-batch-report/count': {
    /**
     * Get Cleanable Batch Report Count
     * @description Queries for the number of report results about a historic batch operations relevant
     * to history cleanup (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)
     * ).
     * Takes the same parameters as the
     * [Get Cleanable Batch Report](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-cleanable-batch-report/)
     * method.
     */
    get: operations['getCleanableHistoricBatchesReportCount']
  }
  '/history/batch/count': {
    /**
     * Get Historic Batch Count
     * @description Requests the number of historic batches that fulfill the query criteria.
     * Takes the same filtering parameters as the
     * [Get Historic Batches](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-query/)
     * method.
     */
    get: operations['getHistoricBatchesCount']
  }
  '/history/batch/set-removal-time': {
    /**
     * Set Removal Time Async (POST)
     * @description Sets the removal time to multiple historic batches asynchronously (batch).
     *
     * At least __historicBatchIds__ or __historicBatchQuery__ has to be
     * provided. If both are provided,
     * all instances matching query criterion and instances from the list
     * will be updated with a removal time.
     */
    post: operations['setRemovalTimeAsyncHistoricBatch']
  }
  '/history/batch/{id}': {
    /**
     * Get Historic Batch
     * @description Retrieves a historic batch by id, according to the `HistoricBatch` interface in the
     * engine.
     */
    get: operations['getHistoricBatch']
    /**
     * Delete Historic Batch
     * @description Deletes a historic batch by id, including related historic job logs.
     */
    delete: operations['deleteHistoricBatch']
  }
  '/history/cleanup': {
    /**
     * Clean up history (POST)
     * @description Schedules asynchronous history cleanup (See
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     *
     * **Note:** This endpoint will return at most a single history cleanup job.
     * Since version `7.9.0` it is possible to configure multiple
     * [parallel history cleanup jobs](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#parallel-execution). Use
     * [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.20/reference/rest/history/history-cleanup/get-history-cleanup-jobs)
     * to find all the available history cleanup jobs.
     */
    post: operations['cleanupAsync']
  }
  '/history/cleanup/configuration': {
    /**
     * Get History Cleanup Configuration
     * @description Retrieves history cleanup batch window configuration (See
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     */
    get: operations['getHistoryCleanupConfiguration']
  }
  '/history/cleanup/job': {
    /**
     * Find clean up history job (GET)
     * @deprecated
     * @description **Deprecated!** Use `GET /history/cleanup/jobs` instead.
     *
     * Finds history cleanup job (See
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     */
    get: operations['findCleanupJob']
  }
  '/history/cleanup/jobs': {
    /**
     * Find clean up history jobs (GET)
     * @description Finds history cleanup jobs (See
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     */
    get: operations['findCleanupJobs']
  }
  '/history/decision-definition/cleanable-decision-instance-report': {
    /**
     * Get Cleanable Decision Instance Report
     * @description Retrieves a report about a decision definition and finished decision instances
     * relevant to history cleanup (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)),
     * so that you can tune the history time to live.
     * These reports include the count of the finished historic decision
     * instances, cleanable decision instances and basic decision definition
     * data - id, key, name and version.
     * The size of the result set can be retrieved by using the
     * [Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.
     */
    get: operations['getCleanableHistoricDecisionInstanceReport']
  }
  '/history/decision-definition/cleanable-decision-instance-report/count': {
    /**
     * Get Cleanable Decision Instance Report Count
     * @description Queries for the number of report results about a decision definition and finished
     * decision instances relevant to history cleanup (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     * Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/)
     * method.
     */
    get: operations['getCleanableHistoricDecisionInstanceReportCount']
  }
  '/history/decision-instance': {
    /**
     * Get Historic Decision Instances
     * @description Queries for historic decision instances that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-instance/get-decision-instance-query-count/)
     * method.
     */
    get: operations['getHistoricDecisionInstances']
  }
  '/history/decision-instance/count': {
    /**
     * Get Historic Decision Instance Count
     * @description Queries for the number of historic decision instances that fulfill the given parameters.
     * Takes the same parameters as the
     * [Get Historic Decision Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-instance/get-decision-instance-query/)
     * method.
     */
    get: operations['getHistoricDecisionInstancesCount']
  }
  '/history/decision-instance/delete': {
    /**
     * Delete Async (POST)
     * @description Delete multiple historic decision instances asynchronously (batch).
     * At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`
     * has to be provided. If both are provided then all instances matching query
     * criterion and instances from the list will be deleted.
     */
    post: operations['deleteAsync']
  }
  '/history/decision-instance/set-removal-time': {
    /**
     * Set Removal Time Async (POST)
     * @description Sets the removal time to multiple historic decision instances asynchronously
     * (batch).
     *
     * At least `historicDecisionInstanceIds` or
     * `historicDecisionInstanceQuery` has to be provided. If both are
     * provided, all instances matching query criterion and instances from the list
     * will be updated with a removal time.
     */
    post: operations['setRemovalTimeAsyncHistoricDecisionInstance']
  }
  '/history/decision-instance/{id}': {
    /**
     * Get Historic Decision Instance
     * @description Retrieves a historic decision instance by id, according to the
     * `HistoricDecisionInstance` interface in the engine.
     */
    get: operations['getHistoricDecisionInstance']
  }
  '/history/decision-requirements-definition/{id}/statistics': {
    /**
     * Get DRD Statistics
     * @description Retrieves evaluation statistics of a given decision requirements definition.
     */
    get: operations['getDecisionStatistics']
  }
  '/history/detail': {
    /**
     * Get Historic Details
     * @description Queries for historic details that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Historic Detail Count](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query-count/) method.
     */
    get: operations['getHistoricDetails']
    /**
     * Get Historic Details (POST)
     * @description Queries for historic details that fulfill the given parameters. This method is slightly more
     * powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query/)
     * method because it allows sorting by multiple parameters. The size of the result set can be retrieved by
     * using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query-count/)
     * method.
     */
    post: operations['queryHistoricDetails']
  }
  '/history/detail/count': {
    /**
     * Get Historic Detail Count
     * @description Queries for the number of historic details that fulfill the given parameters.
     * Takes the same parameters as the [Get Historic
     * Details](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query/)
     * method.
     */
    get: operations['getHistoricDetailsCount']
  }
  '/history/detail/{id}': {
    /**
     * Get Historic Detail
     * @description Retrieves a historic detail by id.
     */
    get: operations['historicDetail']
  }
  '/history/detail/{id}/data': {
    /**
     * Get Historic Detail (Binary)
     * @description Retrieves the content of a historic variable update by id. Applicable for byte
     * array and file variables.
     */
    get: operations['historicDetailBinary']
  }
  '/history/external-task-log': {
    /**
     * Get External Task Logs
     * @description Queries for historic external task logs that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get External Task Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query-count/)
     * method.
     */
    get: operations['getHistoricExternalTaskLogs']
    /**
     * Get External Task Logs (POST)
     * @description Queries for historic external task logs that fulfill the given parameters.
     * This method is slightly more powerful than the
     * [Get External Task Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query/)
     * method because it allows filtering by historic external task logs
     * values of the different types `String`, `Number` or `Boolean`.
     */
    post: operations['queryHistoricExternalTaskLogs']
  }
  '/history/external-task-log/count': {
    /**
     * Get External Task Log Count
     * @description Queries for the number of historic external task logs that fulfill the given
     * parameters.
     * Takes the same parameters as the
     * [Get External Task Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query/)
     * method.
     */
    get: operations['getHistoricExternalTaskLogsCount']
    /**
     * Get External Task Log Count (POST)
     * @description Queries for the number of historic external task logs that fulfill the given
     * parameters.
     * This method takes the same message body as the
     * [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/post-external-task-log-query/)
     * method and therefore it is slightly more powerful than the
     * [Get External Task Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query-count/)
     * method.
     */
    post: operations['queryHistoricExternalTaskLogsCount']
  }
  '/history/external-task-log/{id}': {
    /**
     * Get External Task Log
     * @description Retrieves a historic external task log by id.
     */
    get: operations['getHistoricExternalTaskLog']
  }
  '/history/external-task-log/{id}/error-details': {
    /**
     * Get External Task Log Error Details
     * @description Retrieves the corresponding error details of the passed historic external task log
     * by id.
     */
    get: operations['getErrorDetailsHistoricExternalTaskLog']
  }
  '/history/identity-link-log': {
    /**
     * Get Identity Link Logs
     * @description Queries for historic identity link logs that fulfill given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/identity-links/get-identity-link-query-count/)
     * method.
     */
    get: operations['getHistoricIdentityLinks']
  }
  '/history/identity-link-log/count': {
    /**
     * Get Identity Link Log Count
     * @description Queries for the number of historic identity link logs that fulfill the given
     * parameters. Takes the same parameters as the
     * [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/identity-links/get-identity-link-query/)
     * method.
     */
    get: operations['getHistoricIdentityLinksCount']
  }
  '/history/incident': {
    /**
     * Get Incidents
     * @description Queries for historic incidents that fulfill given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Incident Count](https://docs.camunda.org/manual/7.20/reference/rest/history/incident/get-incident-query-count/)
     * method.
     */
    get: operations['getHistoricIncidents']
  }
  '/history/incident/count': {
    /**
     * Get Incident Count
     * @description Queries for the number of historic incidents that fulfill the given parameters.
     * Takes the same parameters as the
     * [Get Incidents](https://docs.camunda.org/manual/7.20/reference/rest/history/incident/get-incident-query/)
     * method.
     */
    get: operations['getHistoricIncidentsCount']
  }
  '/history/job-log': {
    /**
     * Get Job Logs
     * @description Queries for historic job logs that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Job Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query-count/)
     * method.
     */
    get: operations['getHistoricJobLogs']
    /**
     * Get Job Logs (POST)
     * @description Queries for historic job logs that fulfill the given parameters.
     * This method is slightly more powerful than the
     * [Get Job Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query/)
     * method because it allows filtering by historic job logs values of the
     * different types `String`, `Number` or `Boolean`.
     */
    post: operations['queryHistoricJobLogs']
  }
  '/history/job-log/count': {
    /**
     * Get Job Log Count
     * @description Queries for the number of historic job logs that fulfill the given parameters.
     * Takes the same parameters as the
     * [Get Job Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query/)
     * method.
     */
    get: operations['getHistoricJobLogsCount']
    /**
     * Get Job Log Count (POST)
     * @description Queries for the number of historic job logs that fulfill the given parameters.
     * This method takes the same message body as the
     * [Get Job Logs (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/post-job-log-query/)
     * method and therefore it is slightly more powerful than the
     * [Get Job Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query-count/)
     * method.
     */
    post: operations['queryHistoricJobLogsCount']
  }
  '/history/job-log/{id}': {
    /**
     * Get Job Log
     * @description Retrieves a historic job log by id.
     */
    get: operations['getHistoricJobLog']
  }
  '/history/job-log/{id}/stacktrace': {
    /**
     * Get Job Log Exception Stacktrace
     * @description Retrieves the corresponding exception stacktrace to the passed historic job log by
     * id.
     */
    get: operations['getStacktraceHistoricJobLog']
  }
  '/history/process-definition/cleanable-process-instance-report': {
    /**
     * Get Cleanable Process Instance Report
     * @description Retrieves a report about a process definition and finished process instances
     * relevant to history cleanup (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup))
     * so that you can tune the history time to live.
     * These reports include the count of the finished historic process
     * instances, cleanable process instances and basic process definition
     * data - id, key, name and version.
     * The size of the result set can be retrieved by using the
     * [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/)
     * method.
     */
    get: operations['getCleanableHistoricProcessInstanceReport']
  }
  '/history/process-definition/cleanable-process-instance-report/count': {
    /**
     * Get Cleanable Process Instance Report Count
     * @description Queries for the number of report results about a process definition and finished
     * process instances relevant to history cleanup (see
     * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
     * Takes the same parameters as the
     * [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.20/reference/rest/history/process-definition/get-cleanable-process-instance-report/)
     * method.
     */
    get: operations['getCleanableHistoricProcessInstanceReportCount']
  }
  '/history/process-definition/{id}/statistics': {
    /**
     * Get Historic Activity Statistics
     * @description Retrieves historic statistics of a given process definition, grouped by activities.
     * These statistics include the number of running activity instances and,
     * optionally, the number of canceled activity instances, finished
     * activity instances and activity instances which completed a scope
     * (i.e., in BPMN 2.0 manner: a scope is completed by an activity
     * instance when the activity instance consumed a token but did not emit
     * a new token).
     * **Note:** This only includes historic data.
     */
    get: operations['getHistoricActivityStatistics']
  }
  '/history/process-instance': {
    /**
     * Get List
     * @description Queries for historic process instances that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Process Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query-count/) method.
     */
    get: operations['getHistoricProcessInstances']
    /**
     * Get List (POST)
     * @description Queries for historic process instances that fulfill the given parameters.
     * This method is slightly more powerful than the
     * [Get Process Instance](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/)
     * because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
     */
    post: operations['queryHistoricProcessInstances']
  }
  '/history/process-instance/count': {
    /**
     * Get List Count
     * @description Queries for the number of historic process instances that fulfill the given parameters.
     * Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/) method.
     */
    get: operations['getHistoricProcessInstancesCount']
    /**
     * Get List Count (POST)
     * @description Queries for the number of historic process instances that fulfill the given parameters.
     * This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/) method and
     * therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/post-process-instance-query-count/) method.
     */
    post: operations['queryHistoricProcessInstancesCount']
  }
  '/history/process-instance/delete': {
    /**
     * Delete Async (POST)
     * @description Delete multiple historic process instances asynchronously (batch).
     * At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
     * If both are provided then all instances matching query criterion and instances from the list will be deleted.
     */
    post: operations['deleteHistoricProcessInstancesAsync']
  }
  '/history/process-instance/report': {
    /**
     * Get Duration Report
     * @description Retrieves a report about the duration of completed process instances, grouped by a period.
     * These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.
     *
     * **Note:** This only includes historic data.
     */
    get: operations['getHistoricProcessInstanceDurationReport']
  }
  '/history/process-instance/set-removal-time': {
    /**
     * Set Removal Time Async (POST)
     * @description Sets the removal time to multiple historic process instances asynchronously (batch).
     *
     * At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
     * If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
     */
    post: operations['setRemovalTimeAsync']
  }
  '/history/process-instance/{id}': {
    /**
     * Get
     * @description Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
     */
    get: operations['getHistoricProcessInstance']
    /**
     * Delete
     * @description Deletes a process instance from the history by id.
     */
    delete: operations['deleteHistoricProcessInstance']
  }
  '/history/process-instance/{id}/variable-instances': {
    /**
     * Delete Variable Instances
     * @description Deletes all variables of a process instance from the history by id.
     */
    delete: operations['deleteHistoricVariableInstancesOfHistoricProcessInstance']
  }
  '/history/task': {
    /**
     * Get Tasks (Historic)
     * @description Queries for historic tasks that fulfill the given parameters. The size of the result
     * set can be retrieved by using the
     * [Get Task Count](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query-count/)
     * method.
     */
    get: operations['getHistoricTaskInstances']
    /**
     * Get Tasks (Historic) (POST)
     * @description Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful
     * than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/) method because
     * it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
     * The size of the result set can be retrieved by using the
     * [Get Task Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/post-task-query-count/)
     * method.
     */
    post: operations['queryHistoricTaskInstances']
  }
  '/history/task/count': {
    /**
     * Get Task Count
     * @description Queries for the number of historic tasks that fulfill the given parameters.
     * Takes the same parameters as the
     * [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/)
     * method.
     */
    get: operations['getHistoricTaskInstancesCount']
    /**
     * Get Task Count (POST)
     * @description Queries for the number of historic tasks that fulfill the given parameters. Takes the
     * same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/)
     * method. Corresponds to the size of the result set of the
     * [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/post-task-query/)
     * method and takes the same parameters.
     */
    post: operations['queryHistoricTaskInstancesCount']
  }
  '/history/task/report': {
    /**
     * Get Task Report (Historic)
     * @description Retrieves a report of completed tasks. When the report type is set to `count`, the
     * report contains a list of completed task counts where an entry contains the task name, the
     * definition key of the task, the process definition id, the process definition key, the process
     * definition name and the count of how many tasks were completed for the specified key in a given
     * period. When the report type is set to `duration`, the report contains a minimum, maximum and
     * average duration value of all completed task instances in a given period.
     */
    get: operations['getHistoricTaskInstanceReport']
  }
  '/history/user-operation': {
    /**
     * Get User Operation Log (Historic)
     * @description Queries for user operation log entries that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get User Operation Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/user-operation-log/get-user-operation-log-query-count/)
     * method.
     *
     * Note that the properties of operation log entries are interpreted as
     * restrictions on the entities they apply to. That means, if a single
     * process instance is updated, the field `processInstanceId` is
     * populated. If a single operation updates all process instances of the
     * same process definition, the field `processInstanceId` is `null` (a
     * `null` restriction is viewed as a wildcard, i.e., matches a process
     * instance with any id) and the field `processDefinitionId` is
     * populated. This way, which entities were changed by a user operation
     * can easily be reconstructed.
     */
    get: operations['queryUserOperationEntries']
  }
  '/history/user-operation/count': {
    /**
     * Get User Operation Log Count
     * @description Queries for the number of user operation log entries that fulfill the given parameters.
     * Takes the same parameters as the
     * [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/user-operation-log/get-user-operation-log-query/)
     * method.
     */
    get: operations['queryUserOperationCount']
  }
  '/history/user-operation/{operationId}/clear-annotation': {
    /**
     * Clear Annotation of an User Operation Log (Historic)
     * @description Clear the annotation which was previously set for auditing reasons.
     */
    put: operations['clearAnnotationUserOperationLog']
  }
  '/history/user-operation/{operationId}/set-annotation': {
    /**
     * Set Annotation to an User Operation Log (Historic)
     * @description Set an annotation for auditing reasons.
     */
    put: operations['setAnnotationUserOperationLog']
  }
  '/history/variable-instance': {
    /**
     * Get Variable Instances
     * @description Queries for historic variable instances that fulfill the given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Variable Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query-count/)
     * method.
     */
    get: operations['getHistoricVariableInstances']
    /**
     * Get Variable Instances (POST)
     * @description Queries for historic variable instances that fulfill the given parameters.
     * This method is slightly more powerful than the
     * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query/)
     * method because it allows filtering by variable values of the different
     * types `String`, `Number` or `Boolean`.
     */
    post: operations['queryHistoricVariableInstances']
  }
  '/history/variable-instance/count': {
    /**
     * Get Variable Instance Count
     * @description Queries for the number of historic variable instances that fulfill the given
     * parameters.
     * Takes the same parameters as the
     * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query/)
     * method.
     */
    get: operations['getHistoricVariableInstancesCount']
    /**
     * Get Variable Instance Count (POST)
     * @description Queries for historic variable instances that fulfill the given parameters.
     * This method takes the same message body as the
     * [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/post-variable-instance-query/)
     * method and therefore it is more powerful regarding variable values
     * than the
     * [Get Variable Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query-count/)
     * method.
     */
    post: operations['queryHistoricVariableInstancesCount']
  }
  '/history/variable-instance/{id}': {
    /**
     * Get Variable Instance
     * @description Retrieves a historic variable by id.
     */
    get: operations['getHistoricVariableInstance']
    /**
     * Delete Variable Instance
     * @description Deletes a historic variable instance by id.
     */
    delete: operations['deleteHistoricVariableInstance']
  }
  '/history/variable-instance/{id}/data': {
    /**
     * Get Variable Instance (Binary)
     * @description Retrieves the content of a historic variable by id. Applicable for variables that
     * are serialized as binary data.
     */
    get: operations['getHistoricVariableInstanceBinary']
  }
  '/identity/groups': {
    /**
     * Get a User's Groups
     * @description Gets the groups of a user by id and includes all users that share a group with the
     * given user.
     */
    get: operations['getGroupInfo']
  }
  '/identity/password-policy': {
    /**
     * Get Password Policy
     * @description A password policy consists of a list of rules that new passwords must follow to be
     * policy compliant. This end point returns a JSON representation of the
     * list of policy rules. More information on password policies in Camunda can be found in the password policy
     * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/password-policy/) and in
     * the [security instructions](https://docs.camunda.org/manual/7.20/user-guide/security/).
     */
    get: operations['getPasswordPolicy']
    /**
     * Validate Password
     * @description A password policy consists of a list of rules that new passwords must follow to be
     * policy compliant. A password can be checked for compliancy via this
     * end point. More information on password policies in Camunda can be found in the password policy
     * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/password-policy/) and in
     * the [security instructions](https://docs.camunda.org/manual/7.20/user-guide/security/).
     */
    post: operations['checkPassword']
  }
  '/identity/verify': {
    /**
     * Verify User
     * @description Verifies that user credentials are valid.
     */
    post: operations['verifyUser']
  }
  '/incident': {
    /**
     * Get List
     * @description Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using
     * the [Get Incident Count](https://docs.camunda.org/manual/7.20/reference/rest/incident/get-query-count/) method.
     */
    get: operations['getIncidents']
  }
  '/incident/count': {
    /**
     * Get List Count
     * @description Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the
     * [Get Incidents](https://docs.camunda.org/manual/7.20/reference/rest/incident/get-query/) method.
     */
    get: operations['getIncidentsCount']
  }
  '/incident/{id}': {
    /**
     * Get Incident
     * @description Retrieves an incident by ID.
     */
    get: operations['getIncident']
    /**
     * Resolve Incident
     * @description Resolves an incident with given id.
     */
    delete: operations['resolveIncident']
  }
  '/incident/{id}/annotation': {
    /**
     * Set Incident Annotation
     * @description Sets the annotation of an incident with given id.
     */
    put: operations['setIncidentAnnotation']
    /**
     * Clear Incident Annotation
     * @description Clears the annotation of an incident with given id.
     */
    delete: operations['clearIncidentAnnotation']
  }
  '/job': {
    /**
     * Get Jobs
     * @description Queries for jobs that fulfill given parameters.
     * The size of the result set can be retrieved by using the [Get Job
     * Count](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query-count/) method.
     */
    get: operations['getJobs']
    /**
     * Get Jobs (POST)
     * @description Queries for jobs that fulfill given parameters. This method is slightly more
     * powerful than the [Get Jobs](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query/)
     * method because it allows filtering by multiple jobs of types `String`,
     * `Number` or `Boolean`.
     */
    post: operations['queryJobs']
  }
  '/job-definition': {
    /**
     * Get Job Definitions
     * @description Queries for job definitions that fulfill given parameters.
     * The size of the result set can be retrieved by using the
     * [Get Job Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query-count/)
     * method.
     */
    get: operations['getJobDefinitions']
    /**
     * Get Job Definitions (POST)
     * @description Queries for job definitions that fulfill given parameters. This method is slightly
     * more powerful than the
     * [Get Job Definitions](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query/)
     * method because it allows filtering by multiple job definitions of
     * types `String`, `Number` or `Boolean`.
     */
    post: operations['queryJobDefinitions']
  }
  '/job-definition/count': {
    /**
     * Get Job Definition Count
     * @description Queries for the number of job definitions that fulfill given parameters.
     * Takes the same parameters as the
     * [Get Job Definitions](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query/)
     * method.
     */
    get: operations['getJobDefinitionsCount']
    /**
     * Get Job Definition Count (POST)
     * @description Queries for the number of job definitions that fulfill given parameters. This
     * method takes the same message body as the
     * [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/post-query/)
     * method and therefore it is slightly more powerful than the
     * [Get Job Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query-count/)
     * method.
     */
    post: operations['queryJobDefinitionsCount']
  }
  '/job-definition/suspended': {
    /**
     * Activate/Suspend Job Definitions
     * @description Activates or suspends job definitions with the given process definition id or process definition key.
     */
    put: operations['updateSuspensionStateJobDefinitions']
  }
  '/job-definition/{id}': {
    /**
     * Get Job Definition
     * @description Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
     */
    get: operations['getJobDefinition']
  }
  '/job-definition/{id}/jobPriority': {
    /**
     * Set Job Definition Priority by Id
     * @description Sets an overriding execution priority for jobs with the given definition id.
     * Optionally, the priorities of all the definitions' existing jobs are
     * updated accordingly. The priority can be reset by setting it to
     * `null`, meaning that a new job's priority will not be determined based
     * on its definition's priority any longer. See the
     * [user guide on job prioritization](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api)
     * for details.
     */
    put: operations['setJobPriorityJobDefinition']
  }
  '/job-definition/{id}/retries': {
    /**
     * Set Job Retries By Job Definition Id
     * @description Sets the number of retries of all **failed** jobs associated with the given job
     * definition id.
     */
    put: operations['setJobRetriesJobDefinition']
  }
  '/job-definition/{id}/suspended': {
    /**
     * Activate/Suspend Job Definition By Id
     * @description Activates or suspends a given job definition by id.
     */
    put: operations['updateSuspensionStateJobDefinition']
  }
  '/job/count': {
    /**
     * Get Job Count
     * @description Queries for the number of jobs that fulfill given parameters.
     * Takes the same parameters as the [Get
     * Jobs](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query/) method.
     */
    get: operations['getJobsCount']
    /**
     * Get Job Count (POST)
     * @description Queries for jobs that fulfill given parameters. This method takes the same message
     * body as the [Get Jobs POST](https://docs.camunda.org/manual/7.20/reference/rest/job/post-
     * query/) method and therefore it is slightly more powerful than the
     * [Get Job Count](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query-count/)
     * method.
     */
    post: operations['queryJobsCount']
  }
  '/job/retries': {
    /**
     * Set Job Retries Async (POST)
     * @description Create a batch to set retries of jobs asynchronously.
     */
    post: operations['setJobRetriesAsyncOperation']
  }
  '/job/suspended': {
    /**
     * Activate/Suspend Jobs
     * @description Activates or suspends jobs matching the given criterion.
     * This can only be on of:
     * * `jobDefinitionId`
     * * `processDefinitionId`
     * * `processInstanceId`
     * * `processDefinitionKey`
     */
    put: operations['updateSuspensionStateBy']
  }
  '/job/{id}': {
    /**
     * Get Job
     * @description Retrieves a job by id, according to the `Job` interface in the engine.
     */
    get: operations['getJob']
    /**
     * Delete Job
     * @description Deletes a job by id.
     */
    delete: operations['deleteJob']
  }
  '/job/{id}/duedate': {
    /**
     * Set Job Due Date
     * @description Updates the due date of a job by id.
     */
    put: operations['setJobDuedate']
  }
  '/job/{id}/duedate/recalculate': {
    /**
     * Recalculate Job Due Date
     * @description Recalculates the due date of a job by id.
     */
    post: operations['recalculateDuedate']
  }
  '/job/{id}/execute': {
    /**
     * Execute Job
     * @description Executes a job by id. **Note:** The execution of the job happens synchronously in
     * the same thread.
     */
    post: operations['executeJob']
  }
  '/job/{id}/priority': {
    /**
     * Set Job Priority
     * @description Sets the execution priority of a job by id.
     */
    put: operations['setJobPriority']
  }
  '/job/{id}/retries': {
    /**
     * Set Job Retries
     * @description Sets the retries of the job to the given number of retries by id.
     */
    put: operations['setJobRetries']
  }
  '/job/{id}/stacktrace': {
    /**
     * Get Exception Stacktrace
     * @description Retrieves the exception stacktrace corresponding to the passed job id.
     */
    get: operations['getStacktrace']
  }
  '/job/{id}/suspended': {
    /**
     * Activate/Suspend Job By Id
     * @description Activates or suspends a given job by id.
     */
    put: operations['updateJobSuspensionState']
  }
  '/message': {
    /**
     * Correlate
     * @description Correlates a message to the process engine to either trigger a message start event or an intermediate message
     * catching event. Internally this maps to the engine's message correlation builder methods
     * `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
     * For more information about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.20/bpmn20/events/message-events/)
     * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
     */
    post: operations['deliverMessage']
  }
  '/metrics': {
    /**
     * Get Metrics in Interval
     * @description Retrieves a list of metrics, aggregated for a given interval.
     */
    get: operations['interval']
  }
  '/metrics/task-worker': {
    /**
     * Delete Task Worker Metrics
     * @description Deletes all task worker metrics prior to the given date or all if no date is provided.
     */
    delete: operations['deleteTaskMetrics']
  }
  '/metrics/{metrics-name}/sum': {
    /**
     * Get Sum
     * @description Retrieves the `sum` (count) for a given metric.
     */
    get: operations['getMetrics']
  }
  '/migration/execute': {
    /**
     * Execute Migration Plan
     * @description Executes a migration plan synchronously for multiple process instances. To execute
     * a migration plan asynchronously, use the
     * [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.20/reference/rest/migration/execute-migration-async/)
     * method.
     *
     * For more information about the difference between synchronous and asynchronous
     * execution of a migration plan, please refer to the related section of
     * [the user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     */
    post: operations['executeMigrationPlan']
  }
  '/migration/executeAsync': {
    /**
     * Execute Migration Plan Async (Batch)
     * @description Executes a migration plan asynchronously (batch) for multiple process instances.
     * To execute a migration plan synchronously, use the
     * [Execute MigrationPlan](https://docs.camunda.org/manual/7.20/reference/rest/migration/execute-migration/)
     * method.
     *
     * For more information about the difference between synchronous and asynchronous
     * execution of a migration plan, please refer to the related section of
     * [the user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
     */
    post: operations['executeMigrationPlanAsync']
  }
  '/migration/generate': {
    /**
     * Generate Migration Plan
     * @description Generates a migration plan for two process definitions. The generated migration
     * plan contains migration instructions which map equal activities
     * between the
     * two process definitions.
     */
    post: operations['generateMigrationPlan']
  }
  '/migration/validate': {
    /**
     * Validate Migration Plan
     * @description Validates a migration plan statically without executing it. This
     * corresponds to the
     * [creation time validation](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#creation-time-validation)
     * described in the user guide.
     */
    post: operations['validateMigrationPlan']
  }
  '/modification/execute': {
    /**
     * Execute Modification
     * @description Executes a modification synchronously for multiple process instances.
     * To modify a single process instance, use the
     * [Modify Process Instance Execution State](https://docs.camunda.org/manual/7.20/reference/rest/process-instance/post-modification/) method.
     * To execute a modification asynchronously, use the
     * [Execute Modification Async (Batch)](https://docs.camunda.org/manual/7.20/reference/rest/modification/post-modification-async/) method.
     *
     * For more information about the difference between synchronous and
     * asynchronous execution of a modification, please refer to the related
     * section of the
     * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).
     */
    post: operations['executeModification']
  }
  '/modification/executeAsync': {
    /**
     * Execute Modification Async (Batch)
     * @description Executes a modification asynchronously for multiple process instances. To execute a
     * modification synchronously, use the
     * [Execute Modification](https://docs.camunda.org/manual/7.20/reference/rest/modification/post-modification-sync/) method.
     *
     * For more information about the difference between synchronous and
     * asynchronous execution of a modification, please refer to the related
     * section of the
     * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).
     */
    post: operations['executeModificationAsync']
  }
  '/process-definition': {
    /**
     * Get List
     * @description Queries for process definitions that fulfill given parameters. Parameters may be the properties of
     * process definitions, such as the name, key or version. The size of the result set can be retrieved
     * by using the [Get Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/get-query-count/) method.
     */
    get: operations['getProcessDefinitions']
  }
  '/process-definition/count': {
    /**
     * Get List Count
     * @description Requests the number of process definitions that fulfill the query criteria.
     * Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/get-query/) method.
     */
    get: operations['getProcessDefinitionsCount']
  }
  '/process-definition/key/{key}': {
    /**
     * Get
     * @description Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.
     */
    get: operations['getProcessDefinitionByKey']
    /**
     * Delete By Key
     * @description Deletes process definitions by a given key which belong to no tenant id.
     */
    delete: operations['deleteProcessDefinitionsByKey']
  }
  '/process-definition/key/{key}/deployed-start-form': {
    /**
     * Get Deployed Start Form
     * @description Retrieves the deployed form that can be referenced from a start event.
     * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
     */
    get: operations['getDeployedStartFormByKey']
  }
  '/process-definition/key/{key}/diagram': {
    /**
     * Get Diagram
     * @description Retrieves the diagram for the latest version of the process definition which belongs to no tenant.
     *
     * If the process definition's deployment contains an image resource with the same file name
     * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
     * Example: `someProcess.bpmn` and `someProcess.png`.
     * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     */
    get: operations['getProcessDefinitionDiagramByKey']
  }
  '/process-definition/key/{key}/form-variables': {
    /**
     * Get Start Form Variables
     * @description Retrieves the start form variables for the latest process definition which belongs to no tenant
     * (only if they are defined via the
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
     * The start form variables take form data specified on the start event into account.
     * If form fields are defined, the variable types and default values
     * of the form fields are taken into account.
     */
    get: operations['getStartFormVariablesByKey']
  }
  '/process-definition/key/{key}/history-time-to-live': {
    /**
     * Update History Time to Live
     * @description Updates history time to live for the latest version of the process definition which belongs to no tenant.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
     * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
     * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
     */
    put: operations['updateHistoryTimeToLiveByProcessDefinitionKey']
  }
  '/process-definition/key/{key}/rendered-form': {
    /**
     * Get Rendered Start Form
     * @description Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant.
     * This method can be used to get the HTML rendering of a
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    get: operations['getRenderedStartFormByKey']
  }
  '/process-definition/key/{key}/start': {
    /**
     * Start Instance
     * @description Instantiates a given process definition, starts the latest version of the process definition
     * which belongs to no tenant.
     * Process variables and business key may be supplied in the request body.
     */
    post: operations['startProcessInstanceByKey']
  }
  '/process-definition/key/{key}/startForm': {
    /**
     * Get Start Form Key
     * @description Retrieves the key of the start form for the latest version of the process definition
     * which belongs to no tenant.
     * The form key corresponds to the `FormData#formKey` property in the engine.
     */
    get: operations['getStartFormByKey']
  }
  '/process-definition/key/{key}/statistics': {
    /**
     * Get Activity Instance Statistics
     * @description Retrieves runtime statistics of the latest version of the given process definition
     * which belongs to no tenant, grouped by activities.
     * These statistics include the number of running activity instances, optionally the number of failed jobs
     * and also optionally the number of incidents either grouped by incident types or
     * for a specific incident type.
     * **Note**: This does not include historic data.
     */
    get: operations['getActivityStatisticsByProcessDefinitionKey']
  }
  '/process-definition/key/{key}/submit-form': {
    /**
     * Submit Start Form
     * @description Starts the latest version of the process definition which belongs to no tenant
     * using a set of process variables and the business key.
     * If the start event has Form Field Metadata defined, the process engine will perform backend validation
     * for any form fields which have validators defined.
     * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    post: operations['submitFormByKey']
  }
  '/process-definition/key/{key}/suspended': {
    /**
     * Activate/Suspend by Id
     * @description Activates or suspends a given process definition by latest version of process definition key
     * which belongs to no tenant.
     */
    put: operations['updateProcessDefinitionSuspensionStateByKey']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}': {
    /**
     * Get
     * @description Retrieves the latest version of the process definition for tenant according to
     * the `ProcessDefinition` interface in the engine.
     */
    get: operations['getLatestProcessDefinitionByTenantId']
    /**
     * Delete By Key
     * @description Deletes process definitions by a given key and which belong to a tenant id.
     */
    delete: operations['deleteProcessDefinitionsByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form': {
    /**
     * Get Deployed Start Form
     * @description Retrieves the deployed form that can be referenced from a start event.
     * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
     */
    get: operations['getDeployedStartFormByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/diagram': {
    /**
     * Get Diagram
     * @description Retrieves the diagram for the latest version of the process definition for tenant.
     *
     * If the process definition's deployment contains an image resource with the same file name
     * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
     * Example: `someProcess.bpmn` and `someProcess.png`.
     * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     */
    get: operations['getProcessDefinitionDiagramByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables': {
    /**
     * Get Start Form Variables
     * @description Retrieves the start form variables for the latest process definition for a tenant
     * (only if they are defined via the
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
     * The start form variables take form data specified on the start event into account.
     * If form fields are defined, the variable types and default values
     * of the form fields are taken into account.
     */
    get: operations['getStartFormVariablesByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live': {
    /**
     * Update History Time to Live
     * @description Updates history time to live for the latest version of the process definition for a tenant.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     */
    put: operations['updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form': {
    /**
     * Get Rendered Start Form
     * @description Retrieves  the rendered form for the latest version of the process definition for a tenant.
     * This method can be used to get the HTML rendering of a
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    get: operations['getRenderedStartFormByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/start': {
    /**
     * Start Instance
     * @description Instantiates a given process definition, starts the latest version of the process definition for tenant.
     * Process variables and business key may be supplied in the request body.
     */
    post: operations['startProcessInstanceByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/startForm': {
    /**
     * Get Start Form Key
     * @description Retrieves the key of the start form for the latest version of the process definition for a tenant.
     * The form key corresponds to the `FormData#formKey` property in the engine.
     */
    get: operations['getStartFormByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/statistics': {
    /**
     * Get Activity Instance Statistics
     * @description Retrieves runtime statistics of the latest version of the given process definition for a tenant,
     * grouped by activities.
     * These statistics include the number of running activity instances, optionally the number of failed jobs
     * and also optionally the number of incidents either grouped by incident types or
     * for a specific incident type.
     * **Note**: This does not include historic data.
     */
    get: operations['getActivityStatisticsByProcessDefinitionKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form': {
    /**
     * Submit Start Form
     * @description Starts the latest version of the process definition for a tenant
     * using a set of process variables and the business key.
     * If the start event has Form Field Metadata defined, the process engine will perform backend validation
     * for any form fields which have validators defined.
     * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    post: operations['submitFormByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/suspended': {
    /**
     * Activate/Suspend by Id
     * @description Activates or suspends a given process definition by the latest version of
     * the process definition for tenant.
     */
    put: operations['updateProcessDefinitionSuspensionStateByKeyAndTenantId']
  }
  '/process-definition/key/{key}/tenant-id/{tenant-id}/xml': {
    /**
     * Get XML
     * @description Retrieves latest version the BPMN 2.0 XML of a process definition.
     * Returns the XML for the latest version of the process definition for tenant.
     */
    get: operations['getProcessDefinitionBpmn20XmlByKeyAndTenantId']
  }
  '/process-definition/key/{key}/xml': {
    /**
     * Get XML
     * @description Retrieves latest version the BPMN 2.0 XML of a process definition.
     */
    get: operations['getProcessDefinitionBpmn20XmlByKey']
  }
  '/process-definition/statistics': {
    /**
     * Get Process Instance Statistics
     * @description Retrieves runtime statistics of the process engine, grouped by process definitions.
     * These statistics include the number of running process instances, optionally the number of failed jobs
     * and also optionally the number of incidents either grouped by incident types or
     * for a specific incident type.
     * **Note**: This does not include historic data.
     */
    get: operations['getProcessDefinitionStatistics']
  }
  '/process-definition/suspended': {
    /**
     * Activate/Suspend By Key
     * @description Activates or suspends process definitions with the given process definition key.
     */
    put: operations['updateProcessDefinitionSuspensionState']
  }
  '/process-definition/{id}': {
    /**
     * Get
     * @description Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
     */
    get: operations['getProcessDefinition']
    /**
     * Delete
     * @description Deletes a running process instance by id.
     */
    delete: operations['deleteProcessDefinition']
  }
  '/process-definition/{id}/deployed-start-form': {
    /**
     * Get Deployed Start Form
     * @description Retrieves the deployed form that can be referenced from a start event.
     * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
     */
    get: operations['getDeployedStartForm']
  }
  '/process-definition/{id}/diagram': {
    /**
     * Get Diagram
     * @description Retrieves the diagram of a process definition.
     *
     * If the process definition's deployment contains an image resource with the same file name
     * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
     * Example: `someProcess.bpmn` and `someProcess.png`.
     * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
     */
    get: operations['getProcessDefinitionDiagram']
  }
  '/process-definition/{id}/form-variables': {
    /**
     * Get Start Form Variables
     * @description Retrieves the start form variables for a process definition
     * (only if they are defined via the
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
     * The start form variables take form data specified on the start event into account.
     * If form fields are defined, the variable types and default values
     * of the form fields are taken into account.
     */
    get: operations['getStartFormVariables']
  }
  '/process-definition/{id}/history-time-to-live': {
    /**
     * Update History Time to Live
     * @description Updates history time to live for process definition.
     * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
     * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
     * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
     * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
     */
    put: operations['updateHistoryTimeToLiveByProcessDefinitionId']
  }
  '/process-definition/{id}/rendered-form': {
    /**
     * Get Rendered Start Form
     * @description Retrieves the rendered form for a process definition.
     * This method can be used to get the HTML rendering of a
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    get: operations['getRenderedStartForm']
  }
  '/process-definition/{id}/restart': {
    /**
     * Restart Process Instance
     * @description Restarts process instances that were canceled or terminated synchronously.
     * Can also restart completed process instances.
     * It will create a new instance using the original instance information.
     * To execute the restart asynchronously, use the
     * [Restart Process Instance Async](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/post-restart-process-instance-async/) method.
     *
     * For more information about the difference between synchronous and asynchronous execution,
     * please refer to the related section of the
     * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-restart/#execution).
     */
    post: operations['restartProcessInstance']
  }
  '/process-definition/{id}/restart-async': {
    /**
     * Restart Process Instance Async
     * @description Restarts process instances that were canceled or terminated asynchronously.
     * Can also restart completed process instances.
     * It will create a new instance using the original instance information.
     * To execute the restart asynchronously, use the
     * [Restart Process Instance](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/post-restart-process-instance-sync/) method.
     *
     * For more information about the difference between synchronous and asynchronous execution,
     * please refer to the related section of the
     * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-restart/#execution).
     */
    post: operations['restartProcessInstanceAsyncOperation']
  }
  '/process-definition/{id}/start': {
    /**
     * Start Instance
     * @description Instantiates a given process definition.
     * Process variables and business key may be supplied in the request body.
     */
    post: operations['startProcessInstance']
  }
  '/process-definition/{id}/startForm': {
    /**
     * Get Start Form Key
     * @description Retrieves the key of the start form for a process definition.
     * The form key corresponds to the `FormData#formKey` property in the engine.
     */
    get: operations['getStartForm']
  }
  '/process-definition/{id}/static-called-process-definitions': {
    /**
     * Get Static Called Process Definitions
     * @description For the given process, returns a list of called process definitions corresponding
     * to
     * the `CalledProcessDefinition` interface in the engine. The list
     * contains all process definitions
     * that are referenced statically by call activities in the given
     * process. This endpoint does not
     * resolve process definitions that are referenced with expressions. Each
     * called process definition
     * contains a list of call activity ids, which specifies the call
     * activities that are calling that
     * process. This endpoint does not resolve references to case
     * definitions.
     */
    get: operations['getStaticCalledProcessDefinitions']
  }
  '/process-definition/{id}/statistics': {
    /**
     * Get Activity Instance Statistics
     * @description Retrieves runtime statistics of a given process definition, grouped by activities.
     * These statistics include the number of running activity instances, optionally the number of failed jobs
     * and also optionally the number of incidents either grouped by incident types or for a specific incident type.
     * **Note**: This does not include historic data.
     */
    get: operations['getActivityStatistics']
  }
  '/process-definition/{id}/submit-form': {
    /**
     * Submit Start Form
     * @description Starts a process instance using a set of process variables and the business key.
     * If the start event has Form Field Metadata defined, the process engine will perform backend validation
     * for any form fields which have validators defined.
     * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    post: operations['submitForm']
  }
  '/process-definition/{id}/suspended': {
    /**
     * Activate/Suspend By Id
     * @description Activates or suspends a given process definition by id.
     */
    put: operations['updateProcessDefinitionSuspensionStateById']
  }
  '/process-definition/{id}/xml': {
    /**
     * Get XML
     * @description Retrieves the BPMN 2.0 XML of a process definition.
     */
    get: operations['getProcessDefinitionBpmn20Xml']
  }
  '/process-instance': {
    /**
     * Get List
     * @description Queries for process instances that fulfill given parameters.
     * Parameters may be static as well as dynamic runtime properties of process instances.
     * The size of the result set can be retrieved by using the Get Instance Count method.
     */
    get: operations['getProcessInstances']
    /**
     * Get List (POST)
     * @description Queries for process instances that fulfill given parameters through a JSON object.
     * This method is slightly more powerful than the Get Instances method because
     * it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
     */
    post: operations['queryProcessInstances']
  }
  '/process-instance/count': {
    /**
     * Get List Count
     * @description Queries for the number of process instances that fulfill given parameters.
     */
    get: operations['getProcessInstancesCount']
    /**
     * Get List Count (POST)
     * @description Queries for the number of process instances that fulfill the given parameters.
     * This method takes the same message body as the Get Instances (POST) method and
     * therefore it is slightly more powerful than the Get Instance Count method.
     */
    post: operations['queryProcessInstancesCount']
  }
  '/process-instance/delete': {
    /**
     * Delete Async (POST)
     * @description Deletes multiple process instances asynchronously (batch).
     */
    post: operations['deleteProcessInstancesAsyncOperation']
  }
  '/process-instance/delete-historic-query-based': {
    /**
     * Delete Async Historic Query Based (POST)
     * @description Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
     */
    post: operations['deleteAsyncHistoricQueryBased']
  }
  '/process-instance/job-retries': {
    /**
     * Set Job Retries Async (POST)
     * @description Create a batch to set retries of jobs associated with given processes asynchronously.
     */
    post: operations['setRetriesByProcess']
  }
  '/process-instance/job-retries-historic-query-based': {
    /**
     * Set Job Retries Async Historic Query Based (POST)
     * @description Create a batch to set retries of jobs asynchronously based on a historic process instance query.
     */
    post: operations['setRetriesByProcessHistoricQueryBased']
  }
  '/process-instance/message-async': {
    /**
     * Correlate Message Async (POST)
     * @description Correlates a message asynchronously to executions that are waiting for this message.
     * Messages will not be correlated to process definition-level start message events to start process instances.
     */
    post: operations['correlateMessageAsyncOperation']
  }
  '/process-instance/suspended': {
    /**
     * Activate/Suspend In Group
     * @description Activates or suspends process instances by providing certain criteria:
     *
     * # Activate/Suspend Process Instance By Process Definition Id
     * * `suspend`
     * * `processDefinitionId`
     *
     * # Activate/Suspend Process Instance By Process Definition Key
     *
     * * `suspend`
     * * `processDefinitionKey`
     * * `processDefinitionTenantId`
     * * `processDefinitionWithoutTenantId`
     *
     * # Activate/Suspend Process Instance In Group
     * * `suspend`
     * * `processInstanceIds`
     * * `processInstanceQuery`
     * * `historicProcessInstanceQuery`
     */
    put: operations['updateSuspensionState']
  }
  '/process-instance/suspended-async': {
    /**
     * Activate/Suspend In Batch
     * @description Activates or suspends process instances asynchronously with a list of process instance ids,
     * a process instance query, and/or a historical process instance query.
     */
    post: operations['updateSuspensionStateAsyncOperation']
  }
  '/process-instance/variables-async': {
    /**
     * Set Variables Async (POST)
     * @description Update or create runtime process variables in the root scope of process instances.
     */
    post: operations['setVariablesAsyncOperation']
  }
  '/process-instance/{id}': {
    /**
     * Get Process Instance
     * @description Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
     */
    get: operations['getProcessInstance']
    /**
     * Delete
     * @description Deletes a running process instance by id.
     */
    delete: operations['deleteProcessInstance']
  }
  '/process-instance/{id}/activity-instances': {
    /**
     * Get Activity Instance
     * @description Retrieves an Activity Instance (Tree) for a given process instance by id.
     */
    get: operations['getActivityInstanceTree']
  }
  '/process-instance/{id}/comment': {
    /**
     * Get Process Instance Comments
     * @description Gets the comments for a process instance by id.
     */
    get: operations['getProcessInstanceComments']
  }
  '/process-instance/{id}/modification': {
    /**
     * Modify Process Instance Execution State
     * @description Submits a list of modification instructions to change a process instance's execution state.
     * A modification instruction is one of the following:
     *
     * * Starting execution before an activity
     * * Starting execution after an activity on its single outgoing sequence flow
     * * Starting execution on a specific sequence flow
     * * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity
     *
     * Instructions are executed immediately and in the order they are provided in this request's body.
     * Variables can be provided with every starting instruction.
     *
     * The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
     */
    post: operations['modifyProcessInstance']
  }
  '/process-instance/{id}/modification-async': {
    /**
     * Modify Process Instance Execution State Async
     * @description Submits a list of modification instructions to change a process instance's execution state async.
     * A modification instruction is one of the following:
     *
     * * Starting execution before an activity
     * * Starting execution after an activity on its single outgoing sequence flow
     * * Starting execution on a specific sequence flow
     * * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity
     *
     * Instructions are executed asynchronous and in the order they are provided in this request's body.
     * Variables can be provided with every starting instruction.
     *
     * The exact semantics of modification can be read about in the
     * [User guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-modification/).
     */
    post: operations['modifyProcessInstanceAsyncOperation']
  }
  '/process-instance/{id}/suspended': {
    /**
     * Activate/Suspend Process Instance By Id
     * @description Activates or suspends a given process instance by id.
     */
    put: operations['updateSuspensionStateById']
  }
  '/process-instance/{id}/variables': {
    /**
     * Get Process Variables
     * @description Retrieves all variables of a given process instance by id.
     */
    get: operations['getProcessInstanceVariables']
    /**
     * Update/Delete Process Variables
     * @description Updates or deletes the variables of a process instance by id. Updates precede deletions.
     * So, if a variable is updated AND deleted, the deletion overrides the update.
     */
    post: operations['modifyProcessInstanceVariables']
  }
  '/process-instance/{id}/variables/{varName}': {
    /**
     * Get Process Variable
     * @description Retrieves a variable of a given process instance by id.
     */
    get: operations['getProcessInstanceVariable']
    /**
     * Update Process Variable
     * @description Sets a variable of a given process instance by id.
     */
    put: operations['setProcessInstanceVariable']
    /**
     * Delete Process Variable
     * @description Deletes a variable of a process instance by id.
     */
    delete: operations['deleteProcessInstanceVariable']
  }
  '/process-instance/{id}/variables/{varName}/data': {
    /**
     * Get Process Variable (Binary)
     * @description Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
     * Applicable for byte array or file Process Variables.
     */
    get: operations['getProcessInstanceVariableBinary']
    /**
     * Update Process Variable (Binary)
     * @description Sets the serialized value for a binary variable or the binary value for a file variable.
     */
    post: operations['setProcessInstanceVariableBinary']
  }
  '/schema/log': {
    /**
     * Get List
     * @description Queries for schema log entries that fulfill given parameters.
     */
    get: operations['getSchemaLog']
    /**
     * Get List (POST)
     * @description Queries for schema log entries that fulfill given parameters.
     */
    post: operations['querySchemaLog']
  }
  '/signal': {
    /**
     * Event
     * @description A signal is an event of global scope (broadcast semantics) and is delivered to all
     * active handlers. Internally this maps to the engine's signal event received builder
     * method `RuntimeService#createSignalEvent()`. For more information about the signal
     * behavior, see the [Signal Events](https://docs.camunda.org/manual/7.20/reference/bpmn20/events/signal-events/)
     * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
     */
    post: operations['throwSignal']
  }
  '/task': {
    /**
     * Get List
     * @description Queries for tasks that fulfill a given filter. The size of the result set can be
     * retrieved by using the Get Task Count method.
     *
     * **Security Consideration:** There are several query parameters (such as
     * assigneeExpression) for specifying an EL expression. These are disabled by default to
     * prevent remote code execution. See the section on
     * [security considerations](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
     * for custom code in the user guide for details.
     */
    get: operations['getTasks']
    /**
     * Get List (POST)
     * @description Queries for tasks that fulfill a given filter. This method is slightly more powerful
     * than the [Get Tasks](https://docs.camunda.org/manual/7.20/reference/rest/task/get-query/) method because it
     * allows filtering by multiple process or task variables of types `String`, `Number`
     * or `Boolean`. The size of the result set can be retrieved by using the
     * [Get Task Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/task/post-query-count/) method.
     *
     * **Security Consideration**:
     * There are several parameters (such as `assigneeExpression`) for specifying an EL
     * expression. These are disabled by default to prevent remote code execution. See the
     * section on
     * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
     * in the user guide for details.
     */
    post: operations['queryTasks']
  }
  '/task/count': {
    /**
     * Get List Count
     * @description Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size
     * of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.20/reference/rest/task/) method.
     *
     * **Security Consideration:** There are several query parameters (such as
     * assigneeExpression) for specifying an EL expression. These are disabled by default to
     * prevent remote code execution. See the section on
     * [security considerations](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
     * for custom code in the user guide for details.
     */
    get: operations['getTasksCount']
    /**
     * Get List Count (POST)
     * @description Retrieves the number of tasks that fulfill the given filter. Corresponds to the size
     * of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.20/reference/rest/task/post-query/)
     * method and takes the same parameters.
     *
     * **Security Consideration**:
     * There are several parameters (such as `assigneeExpression`) for specifying an EL
     * expression. These are disabled by default to prevent remote code execution. See the
     * section on
     * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
     * in the user guide for details.
     */
    post: operations['queryTasksCount']
  }
  '/task/create': {
    /**
     * Create
     * @description Creates a new task.
     */
    post: operations['createTask']
  }
  '/task/report/candidate-group-count': {
    /**
     * Get Task Count By Candidate Group
     * @description Retrieves the number of tasks for each candidate group.
     */
    get: operations['getTaskCountByCandidateGroup']
  }
  '/task/{id}': {
    /**
     * Get
     * @description Retrieves a task by id.
     */
    get: operations['getTask']
    /**
     * Update
     * @description Updates a task.
     */
    put: operations['updateTask']
    /**
     * Delete
     * @description Removes a task by id.
     */
    delete: operations['deleteTask']
  }
  '/task/{id}/assignee': {
    /**
     * Set Assignee
     * @description Changes the assignee of a task to a specific user.
     *
     * **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.20/reference/rest/task/post-claim/)
     * method is that this method does not check if the task already has a user
     * assigned to it.
     */
    post: operations['setAssignee']
  }
  '/task/{id}/attachment': {
    /**
     * Get List
     * @description Gets the attachments for a task.
     */
    get: operations['getAttachments']
  }
  '/task/{id}/attachment/create': {
    /**
     * Create
     * @description Creates an attachment for a task.
     */
    post: operations['addAttachment']
  }
  '/task/{id}/attachment/{attachmentId}': {
    /**
     * Get
     * @description Retrieves a task attachment by task id and attachment id.
     */
    get: operations['getAttachment']
    /**
     * Delete
     * @description Removes an attachment from a task by id.
     */
    delete: operations['deleteAttachment']
  }
  '/task/{id}/attachment/{attachmentId}/data': {
    /**
     * Get (Binary)
     * @description Retrieves the binary content of a task attachment by task id and attachment id.
     */
    get: operations['getAttachmentData']
  }
  '/task/{id}/bpmnError': {
    /**
     * Handle BPMN Error
     * @description Reports a business error in the context of a running task by id. The error code must
     * be specified to identify the BPMN error handler. See the documentation for
     * [Reporting Bpmn Error](https://docs.camunda.org/manual/7.20/reference/bpmn20/tasks/user-task/#reporting-bpmn-error)
     * in User Tasks.
     */
    post: operations['handleBpmnError']
  }
  '/task/{id}/bpmnEscalation': {
    /**
     * Handle BPMN Escalation
     * @description Reports an escalation in the context of a running task by id. The escalation code must
     * be specified to identify the escalation handler. See the documentation for
     * [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.20/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation)
     * in User Tasks.
     */
    post: operations['handleEscalation']
  }
  '/task/{id}/claim': {
    /**
     * Claim
     * @description Claims a task for a specific user.
     *
     * **Note:** The difference with the
     * [Set Assignee](https://docs.camunda.org/manual/7.20/reference/rest/task/post-assignee/)
     * method is that here a check is performed to see if the task already has a user
     * assigned to it.
     */
    post: operations['claim']
  }
  '/task/{id}/comment': {
    /**
     * Get List
     * @description Gets the comments for a task by id.
     */
    get: operations['getComments']
  }
  '/task/{id}/comment/create': {
    /**
     * Create
     * @description Creates a comment for a task by id.
     */
    post: operations['createComment']
  }
  '/task/{id}/comment/{commentId}': {
    /**
     * Get
     * @description Retrieves a task comment by task id and comment id.
     */
    get: operations['getComment']
  }
  '/task/{id}/complete': {
    /**
     * Complete
     * @description Completes a task and updates process variables.
     */
    post: operations['complete']
  }
  '/task/{id}/delegate': {
    /**
     * Delegate
     * @description Delegates a task to another user.
     */
    post: operations['delegateTask']
  }
  '/task/{id}/deployed-form': {
    /**
     * Get Deployed Form
     * @description Retrieves the deployed form that is referenced from a given task. For further
     * information please refer to the
     * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
     */
    get: operations['getDeployedForm']
  }
  '/task/{id}/form': {
    /**
     * Get Form Key
     * @description Retrieves the form key for a task. The form key corresponds to the `FormData#formKey`
     * property in the engine. This key can be used to do task-specific form rendering in
     * client applications. Additionally, the context path of the containing process
     * application is returned.
     */
    get: operations['getForm']
  }
  '/task/{id}/form-variables': {
    /**
     * Get Task Form Variables
     * @description Retrieves the form variables for a task. The form variables take form data specified
     * on the task into account. If form fields are defined, the variable types and default
     * values of the form fields are taken into account.
     */
    get: operations['getFormVariables']
  }
  '/task/{id}/identity-links': {
    /**
     * Get List
     * @description Gets the identity links for a task by id, which are the users and groups that are in
     * *some* relation to it (including assignee and owner).
     */
    get: operations['getIdentityLinks']
    /**
     * Add
     * @description Adds an identity link to a task by id. Can be used to link any user or group to a task
     * and specify a relation.
     */
    post: operations['addIdentityLink']
  }
  '/task/{id}/identity-links/delete': {
    /**
     * Delete
     * @description Removes an identity link from a task by id
     */
    post: operations['deleteIdentityLink']
  }
  '/task/{id}/localVariables': {
    /**
     * Get Local Task Variables
     * @description Retrieves all variables of a given task by id.
     */
    get: operations['getTaskLocalVariables']
    /**
     * Update/Delete Local Task Variables
     * @description Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is
     * updated AND deleted, the deletion overrides the update.
     */
    post: operations['modifyTaskLocalVariables']
  }
  '/task/{id}/localVariables/{varName}': {
    /**
     * Get Local Task Variable
     * @description Retrieves a variable from the context of a given task by id.
     */
    get: operations['getTaskLocalVariable']
    /**
     * Update Local Task Variable
     * @description Sets a variable in the context of a given task.
     */
    put: operations['putTaskLocalVariable']
    /**
     * Delete Local Task Variable
     * @description Removes a local variable from a task by id.
     */
    delete: operations['deleteTaskLocalVariable']
  }
  '/task/{id}/localVariables/{varName}/data': {
    /**
     * Get Local Task Variable (Binary)
     * @description Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file
     * variables.
     */
    get: operations['getTaskLocalVariableBinary']
    /**
     * Update Local Task Variable (Binary)
     * @description Sets the serialized value for a binary variable or the binary value for a file variable.
     */
    post: operations['setBinaryTaskLocalVariable']
  }
  '/task/{id}/rendered-form': {
    /**
     * Get Rendered Form
     * @description Retrieves the rendered form for a task. This method can be used to get the HTML
     * rendering of a
     * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
     */
    get: operations['getRenderedForm']
  }
  '/task/{id}/resolve': {
    /**
     * Resolve
     * @description Resolves a task and updates execution variables.
     *
     * Resolving a task marks that the assignee is done with the task delegated to them, and
     * that it can be sent back to the owner. Can only be executed when the task has been
     * delegated. The assignee will be set to the owner, who performed the delegation.
     */
    post: operations['resolve']
  }
  '/task/{id}/submit-form': {
    /**
     * Submit Form
     * @description Completes a task and updates process variables using a form submit. There are two
     * difference between this method and the `complete` method:
     *
     * * If the task is in state `PENDING` - i.e., has been delegated before, it is not
     * completed but resolved. Otherwise it will be completed.
     * * If the task has Form Field Metadata defined, the process engine will perform backend
     * validation for any form fields which have validators defined.
     * See the
     * [Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/_index/#generated-task-forms)
     * section of the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/) for more information.
     */
    post: operations['submit']
  }
  '/task/{id}/unclaim': {
    /**
     * Unclaim
     * @description Resets a task's assignee. If successful, the task is not assigned to a user.
     */
    post: operations['unclaim']
  }
  '/task/{id}/variables': {
    /**
     * Get Task Variables
     * @description Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
     * variable or declared in a parent scope of the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    get: operations['getTaskVariables']
    /**
     * Update/Delete Task Variables
     * @description Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
     * updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
     * local task variable or declared in a parent scope of the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    post: operations['modifyTaskVariables']
  }
  '/task/{id}/variables/{varName}': {
    /**
     * Get Task Variable
     * @description Retrieves a variable from the context of a given task.
     * The variable must be visible from the task. It is visible from the task if it is a local task variable or
     * declared in a parent scope of the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    get: operations['getTaskVariable']
    /**
     * Update Task Variable
     * @description Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
     * is a local task variable, or declared in a parent scope of the task. See the documentation on
     * [variable scopes and visibility](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).
     *
     * **Note**: If a variable doesn't exist, the variable is created in the top-most scope
     * visible from the task.
     */
    put: operations['putTaskVariable']
    /**
     * Delete Task Variable
     * @description Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
     * variable or declared in a parent scope of the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    delete: operations['deleteTaskVariable']
  }
  '/task/{id}/variables/{varName}/data': {
    /**
     * Get Task Variable (Binary)
     * @description Retrieves a binary variable from the context of a given task. Applicable for byte array and file
     * variables. The variable must be visible from the task. It is visible from the task if it is a local task
     * variable or declared in a parent scope of the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    get: operations['getTaskVariableBinary']
    /**
     * Update Task Variable (Binary)
     * @description Sets the serialized value for a binary variable or the binary value for a file variable visible from the
     * task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
     * the task. See documentation on
     * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
     */
    post: operations['setBinaryTaskVariable']
  }
  '/telemetry/configuration': {
    /**
     * Fetch Telemetry Configuration
     * @description Fetches Telemetry Configuration.
     */
    get: operations['getTelemetryConfiguration']
    /**
     * Configure Telemetry
     * @description Configures whether Camunda receives data collection of the process engine setup and usage.
     */
    post: operations['configureTelemetry']
  }
  '/telemetry/data': {
    /**
     * Fetch Telemetry Data
     * @description Fetches Telemetry Data.
     */
    get: operations['getTelemetryData']
  }
  '/tenant': {
    /**
     * Get Tenants
     * @description Query for a list of tenants using a list of parameters. The size of the result set
     * can be retrieved by using the [Get Tenant
     * Count](https://docs.camunda.org/manual/7.20/reference/rest/tenant/get-query-count/) method.
     */
    get: operations['queryTenants']
    /**
     * Tenant Resource Options
     * @description The `/tenant` resource supports two custom OPTIONS requests, this one for the resource
     * as such and one for individual tenant instances. The OPTIONS request
     * allows checking for the set of available operations that the currently
     * authenticated user can perform on the `/tenant` resource. If the user
     * can perform an operation or not may depend on various things,
     * including the users authorizations to interact with this resource and
     * the internal configuration of the process engine.
     */
    options: operations['availableTenantResourceOperations']
  }
  '/tenant/count': {
    /**
     * Get Tenant Count
     * @description Query for tenants using a list of parameters and retrieves the count.
     */
    get: operations['getTenantCount']
  }
  '/tenant/create': {
    /**
     * Create Tenant
     * @description Create a new tenant.
     */
    post: operations['createTenant']
  }
  '/tenant/{id}': {
    /**
     * Get Tenant
     * @description Retrieves a tenant.
     */
    get: operations['getTenant']
    /**
     * Update Tenant
     * @description Updates a given tenant.
     */
    put: operations['updateTenant']
    /**
     * Delete Tenant
     * @description Deletes a tenant by id.
     */
    delete: operations['deleteTenant']
    /**
     * Tenant Resource Options
     * @description The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for
     * individual tenant instances. The OPTIONS request allows checking for the set of available operations that
     * the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an
     * operation or not may depend on various things, including the users authorizations to interact with this
     * resource and the internal configuration of the process engine.
     */
    options: operations['availableTenantInstanceOperations']
  }
  '/tenant/{id}/group-members': {
    /**
     * Tenant Group Membership Resource Options
     * @description The OPTIONS request allows checking for the set of available operations that the
     * currently authenticated user can perform on the resource. If the user
     * can perform an operation or not may depend on various things,
     * including the users authorizations to interact with this resource and
     * the internal configuration of the process engine.
     */
    options: operations['availableTenantGroupMembersOperations']
  }
  '/tenant/{id}/group-members/{groupId}': {
    /**
     * Create Tenant Group Membership
     * @description Creates a membership between a tenant and a group.
     */
    put: operations['createGroupMembership']
    /**
     * Create Tenant Group Membership
     * @description Creates a membership between a tenant and a group.
     */
    delete: operations['deleteGroupMembership']
  }
  '/tenant/{id}/user-members': {
    /**
     * Tenant User Membership Resource Options
     * @description The OPTIONS request allows checking for the set of available operations that the
     * currently authenticated user can perform on the resource. If the user
     * can perform an operation or not may depend on various things,
     * including the users authorizations to interact with this resource and
     * the internal configuration of the process engine.
     */
    options: operations['availableTenantUserMembersOperations']
  }
  '/tenant/{id}/user-members/{userId}': {
    /**
     * Create Tenant User Membership
     * @description Creates a membership between a tenant and an user.
     */
    put: operations['createUserMembership']
    /**
     * Delete a Tenant User Membership
     * @description Deletes a membership between a tenant and an user.
     */
    delete: operations['deleteUserMembership']
  }
  '/user': {
    /**
     * Get List
     * @description Query for a list of users using a list of parameters.
     * The size of the result set can be retrieved by using the Get User Count method.
     * [Get User Count](https://docs.camunda.org/manual/7.20/reference/rest/user/get-query-count/) method.
     */
    get: operations['getUsers']
    /**
     * Options
     * @description The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
     * and one for individual user instances. The `OPTIONS` request allows checking for the set of
     * available operations that the currently authenticated user can perform on the /user resource.
     * If the user can perform an operation or not may depend on various things, including the user's
     * authorizations to interact with this resource and the internal configuration of the process
     * engine. `OPTIONS /user` returns available interactions on the resource.
     */
    options: operations['availableOperations']
  }
  '/user/count': {
    /**
     * Get List Count
     * @description Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
     * [Get Users](https://docs.camunda.org/manual/7.20/reference/rest/user/get-query/) method.
     */
    get: operations['getUserCount']
  }
  '/user/create': {
    /**
     * Create
     * @description Create a new user.
     */
    post: operations['createUser']
  }
  '/user/{id}': {
    /**
     * Delete
     * @description Deletes a user by id.
     */
    delete: operations['deleteUser']
    /**
     * Options
     * @description The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
     * and one for individual user instances. The `OPTIONS` request allows checking for the set of
     * available operations that the currently authenticated user can perform on the /user resource.
     * If the user can perform an operation or not may depend on various things, including the user's
     * authorizations to interact with this resource and the internal configuration of the process
     * engine. `OPTIONS /user/{id}` returns available interactions on a resource instance.
     */
    options: operations['availableUserOperations']
  }
  '/user/{id}/credentials': {
    /**
     * Update Credentials
     * @description Updates a user's credentials (password)
     */
    put: operations['updateCredentials']
  }
  '/user/{id}/profile': {
    /**
     * Get Profile
     * @description Retrieves a user's profile.
     */
    get: operations['getUserProfile']
    /**
     * Update User Profile
     * @description Updates the profile information of an already existing user.
     */
    put: operations['updateProfile']
  }
  '/user/{id}/unlock': {
    /**
     * Unlock User
     * @description Unlocks a user by id.
     */
    post: operations['unlockUser']
  }
  '/variable-instance': {
    /**
     * Get Variable Instances
     * @description Query for variable instances that fulfill given parameters. Parameters may be the
     * properties of variable instances, such as the name or type. The size
     * of the result set can be retrieved by using the [Get Variable Instance
     * Count](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query-count/)
     * method.
     */
    get: operations['getVariableInstances']
    /**
     * Get Variable Instances (POST)
     * @description Query for variable instances that fulfill given parameters through a JSON object.
     * This method is slightly more powerful than the
     * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/variable-
     * instance/get-query/) method because it allows filtering by multiple
     * variable instances of types `String`, `Number` or `Boolean`.
     */
    post: operations['queryVariableInstances']
  }
  '/variable-instance/count': {
    /**
     * Get Variable Instance Count
     * @description Query for the number of variable instances that fulfill given parameters. Takes the
     * same parameters as the [Get Variable
     * Instances](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query/)
     * method.
     */
    get: operations['getVariableInstancesCount']
    /**
     * Get Variable Instance Count (POST)
     * @description Query for the number of variable instances that fulfill given parameters. This
     * method takes the same message body as the
     * [Get Variable Instances POST](https://docs.camunda.org/manual/7.20/reference/rest/variable-
     * instance/post-query/) method and therefore it is slightly more
     * powerful than the [Get Variable Instance
     * Count](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query-count/)
     * method.
     */
    post: operations['queryVariableInstancesCount']
  }
  '/variable-instance/{id}': {
    /**
     * Get Variable Instance
     * @description Retrieves a variable by id.
     */
    get: operations['getVariableInstance']
  }
  '/variable-instance/{id}/data': {
    /**
     * Get Variable Instance (Binary)
     * @description Retrieves the content of a variable by id. Applicable for byte array and file
     * variables.
     */
    get: operations['getVariableInstanceBinary']
  }
  '/version': {
    /**
     * Get Rest API version
     * @description Retrieves the version of the Rest API.
     */
    get: operations['getRestAPIVersion']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    AbstractSetRemovalTimeDto: {
      /**
       * Format: date-time
       * @description The date for which the instances shall be removed. Value may not be `null`.
       *
       * **Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.
       */
      absoluteRemovalTime?: string | null
      /**
       * @description Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.
       *
       * **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.
       */
      clearedRemovalTime?: boolean | null
      /**
       * @description The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.
       *
       * **Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.
       */
      calculatedRemovalTime?: boolean | null
    }
    AbstractVendorVersionInformationDto: {
      /** @description Information about the vendor. */
      vendor?: string | null
      /** @description Information about the version. */
      version?: string | null
    }
    /** @description A JSON object corresponding to the Activity Instance tree of the given process instance. */
    ActivityInstanceDto: {
      /** @description The id of the activity instance. */
      id?: string | null
      /** @description The id of the parent activity instance, for example a sub process instance. */
      parentActivityInstanceId?: string | null
      /** @description The id of the activity. */
      activityId?: string | null
      /** @description The name of the activity */
      activityName?: string | null
      /** @description The name of the activity. This property is deprecated. Please use 'activityName'. */
      name?: string | null
      /** @description The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask') */
      activityType?: string | null
      /** @description The id of the process instance this activity instance is part of. */
      processInstanceId?: string | null
      /** @description The id of the process definition. */
      processDefinitionId?: string | null
      /** @description A list of child activity instances. */
      childActivityInstances?: components['schemas']['ActivityInstanceDto'][] | null
      /**
       * @description A list of child transition instances.
       * A transition instance represents an execution waiting in an asynchronous continuation.
       */
      childTransitionInstances?: components['schemas']['TransitionInstanceDto'][] | null
      /** @description A list of execution ids. */
      executionIds?: string[] | null
      /** @description A list of incident ids. */
      incidentIds?: string[] | null
      /**
       * @description A list of JSON objects containing incident specific properties:
       * * `id`: the id of the incident
       * * `activityId`: the activity id in which the incident occurred
       */
      incidents?: components['schemas']['ActivityInstanceIncidentDto'][] | null
    }
    /** @description An activity instance, incident pair. */
    ActivityInstanceIncidentDto: {
      /** @description The id of the incident. */
      id?: string | null
      /** @description The activity id in which the incident happened. */
      activityId?: string | null
    }
    ActivityStatisticsResultDto: {
      /** @description The id of the activity the results are aggregated for. */
      id?: string | null
      /**
       * Format: int32
       * @description The total number of running process instances of this activity.
       */
      instances?: number
      /**
       * Format: int32
       * @description The total number of failed jobs for the running instances.
       * **Note**: Will be `0` (not `null`), if failed jobs were excluded.
       */
      failedJobs?: number
      /**
       * @description Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
       * **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
       * Furthermore, the array will be also empty if no incidents were found.
       */
      incidents?: components['schemas']['IncidentStatisticsResultDto'][] | null
      /**
       * @description The fully qualified class name of the data transfer object class.
       * The class name might change in future releases.
       */
      '@class'?: string | null
    }
    AnnotationDto: {
      /** @description The annotation value to put. */
      annotation?: string | null
    }
    /**
     * @description Can be any value - string, number, boolean, array or object.
     *  **Note**: Not every endpoint supports every type.
     */
    AnyValue: unknown
    AtomLink: {
      /** @description The relation of the link to the object that belongs to. */
      rel?: string | null
      /** @description The url of the link. */
      href?: string | null
      /** @description The http method. */
      method?: string | null
    }
    AttachmentDto: {
      /** @description The id of the task attachment. */
      id?: string | null
      /** @description The name of the task attachment. */
      name?: string | null
      /** @description The description of the task attachment. */
      description?: string | null
      /** @description The id of the task to which the attachment belongs. */
      taskId?: string | null
      /**
       * @description Indication of the type of content that this attachment refers to.
       * Can be MIME type or any other indication.
       */
      type?: string | null
      /** @description The url to the remote content of the task attachment. */
      url?: string | null
      /**
       * Format: date-time
       * @description The time the variable was inserted.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      createTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the attachment should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /** @description The process instance id of the root process instance that initiated the process containing the task. */
      rootProcessInstanceId?: string | null
    } & components['schemas']['LinkableDto']
    AuthenticationResult: {
      /** @description An id of authenticated user. */
      authenticatedUser?: string | null
      /** @description A flag indicating if user is authenticated. */
      authenticated?: boolean | null
      /** @description Will be null. */
      tenants?: string[] | null
      /** @description Will be null. */
      groups?: string[] | null
    }
    AuthorizationCheckResultDto: {
      /** @description Name of the permission which was checked. */
      permissionName?: string | null
      /** @description The name of the resource for which the permission check was performed. */
      resourceName?: string | null
      /** @description The id of the resource for which the permission check was performed. */
      resourceId?: string | null
      /** @description Returns true or false depending on whether the user is authorized or not. */
      authorized?: boolean | null
    }
    AuthorizationCreateDto: {
      /**
       * Format: int32
       * @description The type of the authorization (0=global, 1=grant, 2=revoke). See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service.md#authorization-type)
       * for more information about authorization types.
       */
      type?: number | null
      /** @description An array of Strings holding the permissions provided by this authorization. */
      permissions?: string[] | null
      /**
       * @description The id of the user this authorization has been created for. The value `*`
       * represents a global authorization ranging over all users.
       */
      userId?: string | null
      /** @description The id of the group this authorization has been created for. */
      groupId?: string | null
      /**
       * Format: int32
       * @description An integer representing the resource type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
       * for a list of integer representations of resource types.
       */
      resourceType?: number | null
      /**
       * @description The resource Id. The value `*` represents an authorization ranging over all
       * instances of a resource.
       */
      resourceId?: string | null
    }
    AuthorizationDto: {
      /** @description The id of the authorization. */
      id?: string | null
      /**
       * Format: int32
       * @description The type of the authorization (0=global, 1=grant, 2=revoke). See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service.md#authorization-type)
       * for more information about authorization types.
       */
      type?: number | null
      /** @description An array of Strings holding the permissions provided by this authorization. */
      permissions?: string[] | null
      /**
       * @description The id of the user this authorization has been created for. The value `*`
       * represents a global authorization ranging over all users.
       */
      userId?: string | null
      /** @description The id of the group this authorization has been created for. */
      groupId?: string | null
      /**
       * Format: int32
       * @description An integer representing the resource type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
       * for a list of integer representations of resource types.
       */
      resourceType?: number | null
      /**
       * @description The resource Id. The value `*` represents an authorization ranging over all
       * instances of a resource.
       */
      resourceId?: string | null
      /**
       * Format: date-time
       * @description The removal time indicates the date a historic instance
       * authorization is cleaned up. A removal time can only be assigned to a historic
       * instance authorization. Can be `null` when not related to a historic instance
       * resource or when the removal time strategy is end and the root process instance
       * is not finished. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance the historic
       * instance authorization is related to. Can be `null` if not related to a historic instance
       * resource.
       */
      rootProcessInstanceId?: string | null
    }
    AuthorizationExceptionDto: {
      /** @description The id of the user that does not have expected permissions */
      userId?: string | null
      missingAuthorizations?: components['schemas']['MissingAuthorizationDto'][] | null
    } & components['schemas']['ExceptionDto']
    AuthorizationUpdateDto: {
      /** @description An array of Strings holding the permissions provided by this authorization. */
      permissions?: string[] | null
      /**
       * @description The id of the user this authorization has been created for. The value `*`
       * represents a global authorization ranging over all users.
       */
      userId?: string | null
      /** @description The id of the group this authorization has been created for. */
      groupId?: string | null
      /**
       * Format: int32
       * @description An integer representing the resource type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
       * for a list of integer representations of resource types.
       */
      resourceType?: number | null
      /**
       * @description The resource Id. The value `*` represents an authorization ranging over all
       * instances of a resource.
       */
      resourceId?: string | null
    }
    BasicUserCredentialsDto: {
      /** @description The username of a user. */
      username?: string | null
      /** @description A password of a user. */
      password?: string | null
    }
    BatchDto: {
      /** @description The id of the batch. */
      id?: string | null
      /**
       * @description The type of the batch.
       * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
       * for more information about batch types.
       */
      type?: string | null
      /**
       * Format: int32
       * @description The total jobs of a batch is the number of batch execution jobs required to complete the batch.
       */
      totalJobs?: number | null
      /**
       * Format: int32
       * @description The number of batch execution jobs already created by the seed job.
       */
      jobsCreated?: number | null
      /**
       * Format: int32
       * @description The number of batch execution jobs created per seed job invocation.
       * The batch seed job is invoked until it has created all batch execution jobs required by the batch
       * (see `totalJobs` property).
       */
      batchJobsPerSeed?: number | null
      /**
       * Format: int32
       * @description Every batch execution job invokes the command executed by the batch `invocationsPerBatchJob` times.
       * E.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.
       */
      invocationsPerBatchJob?: number | null
      /** @description The job definition id for the seed jobs of this batch. */
      seedJobDefinitionId?: string | null
      /** @description The job definition id for the monitor jobs of this batch. */
      monitorJobDefinitionId?: string | null
      /** @description The job definition id for the batch execution jobs of this batch. */
      batchJobDefinitionId?: string | null
      /** @description Indicates whether this batch is suspended or not. */
      suspended?: boolean | null
      /** @description The tenant id of the batch. */
      tenantId?: string | null
      /** @description The id of the user that created the batch. */
      createUserId?: string | null
      /**
       * Format: date-time
       * @description The time the batch was started. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information,
       * please see the [documentation] (https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      startTime?: string | null
      /**
       * Format: date-time
       * @description The time the batch execution was started, i.e., at least one batch job has been executed. Default
       * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation]
       * (https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      executionStartTime?: string | null
    }
    BatchStatisticsDto: {
      /**
       * Format: int32
       * @description The number of remaining batch execution jobs. This does include failed batch execution jobs and
       * batch execution jobs which still have to be created by the seed job.
       */
      remainingJobs?: number | null
      /**
       * Format: int32
       * @description The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs.
       */
      completedJobs?: number | null
      /**
       * Format: int32
       * @description The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs.
       */
      failedJobs?: number | null
    } & components['schemas']['BatchDto']
    CalledProcessDefinitionDto: {
      /** @description Ids of the CallActivities which call this process. */
      calledFromActivityIds?: string[] | null
      /** @description The id of the calling process definition */
      callingProcessDefinitionId?: string | null
    } & components['schemas']['ProcessDefinitionDto']
    CamundaFormRef: {
      /** @description The key of the Camunda Form. */
      key?: string | null
      /** @description The binding of the Camunda Form. Can be `latest`, `deployment` or `version`. */
      binding?: string | null
      /**
       * Format: int32
       * @description The specific version of a Camunda Form. This property is only set if `binding` is `version`.
       */
      version?: number | null
    }
    CaseDefinitionDto: {
      /** @description The id of the case definition */
      id?: string | null
      /** @description The key of the case definition, i.e., the id of the CMMN 2.0 XML case definition. */
      key?: string | null
      /** @description The category of the case definition. */
      category?: string | null
      /** @description The name of the case definition. */
      name?: string | null
      /**
       * Format: int32
       * @description The version of the case definition that the engine assigned to it.
       */
      version?: number | null
      /** @description The file name of the case definition. */
      resource?: string | null
      /** @description The deployment id of the case definition. */
      deploymentId?: string | null
      /** @description The tenant id of the case definition. */
      tenantId?: string | null
      /**
       * Format: int32
       * @description History time to live value of the case definition.
       * Is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
       */
      historyTimeToLive?: number | null
    }
    CheckPasswordPolicyResultDto: {
      /** @description `true` if the password is compliant with the policy, otherwise `false`. */
      valid?: boolean | null
    } & components['schemas']['PasswordPolicyDto']
    CheckPasswordPolicyRuleDto: {
      /** @description `true` if the password is compliant with this rule, otherwise `false`. */
      valid?: boolean | null
    } & components['schemas']['PasswordPolicyRuleDto']
    CleanableHistoricBatchReportResultDto: {
      /** @description The type of the batch operation. */
      batchType?: string | null
      /**
       * Format: int32
       * @description The history time to live of the batch operation.
       */
      historyTimeToLive?: number | null
      /**
       * Format: int64
       * @description The count of the finished batch operations.
       */
      finishedBatchesCount?: number | null
      /**
       * Format: int64
       * @description The count of the cleanable historic batch operations, referring to history time to
       * live.
       */
      cleanableBatchesCount?: number | null
    }
    CleanableHistoricDecisionInstanceReportResultDto: {
      /** @description The id of the decision definition. */
      decisionDefinitionId?: string | null
      /** @description The key of the decision definition. */
      decisionDefinitionKey?: string | null
      /** @description The name of the decision definition. */
      decisionDefinitionName?: string | null
      /**
       * Format: int32
       * @description The version of the decision definition.
       */
      decisionDefinitionVersion?: number | null
      /**
       * Format: int32
       * @description The history time to live of the decision definition.
       */
      historyTimeToLive?: number | null
      /**
       * Format: int64
       * @description The count of the finished historic decision instances.
       */
      finishedDecisionInstanceCount?: number | null
      /**
       * Format: int64
       * @description The count of the cleanable historic decision instances, referring to history time
       * to live.
       */
      cleanableDecisionInstanceCount?: number | null
      /** @description The tenant id of the decision definition. */
      tenantId?: string | null
    }
    CleanableHistoricProcessInstanceReportResultDto: {
      /** @description The id of the process definition. */
      processDefinitionId?: string | null
      /** @description The key of the process definition. */
      processDefinitionKey?: string | null
      /** @description The name of the process definition. */
      processDefinitionName?: string | null
      /**
       * Format: int32
       * @description The version of the process definition.
       */
      processDefinitionVersion?: number | null
      /**
       * Format: int32
       * @description The history time to live of the process definition.
       */
      historyTimeToLive?: number | null
      /**
       * Format: int64
       * @description The count of the finished historic process instances.
       */
      finishedProcessInstanceCount?: number | null
      /**
       * Format: int64
       * @description The count of the cleanable historic process instances, referring to history time to
       * live.
       */
      cleanableProcessInstanceCount?: number | null
      /** @description The tenant id of the process definition. */
      tenantId?: string | null
    }
    CommentDto: {
      /** @description The id of the task comment. */
      id?: string | null
      /** @description The id of the user who created the comment. */
      userId?: string | null
      /** @description The id of the task to which the comment belongs. */
      taskId?: string | null
      /** @description The id of the process instance the comment is related to. */
      processInstanceId?: string | null
      /**
       * Format: date-time
       * @description The time when the comment was created.
       * [Default format]($(docsUrl)/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      time?: string | null
      /** @description The content of the comment. */
      message?: string | null
      /**
       * Format: date-time
       * @description The time after which the comment should be removed by the History Cleanup job.
       * [Default format]($(docsUrl)/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing the task.
       */
      rootProcessInstanceId?: string | null
    } & components['schemas']['LinkableDto']
    CompleteExternalTaskDto: {
      /** @description A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties: */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /** @description A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties: */
      localVariables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    } & components['schemas']['HandleExternalTaskDto']
    CompleteTaskDto: {
      /** @description A JSON object containing variable key-value pairs. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description Indicates whether the response should contain the process variables or not. The
       * default is `false` with a response code of `204`. If set to `true` the response
       * contains the process variables and has a response code of `200`. If the task is not
       * associated with a process instance (e.g. if it's part of a case instance) no
       * variables will be returned.
       * @default false
       */
      withVariablesInReturn?: boolean | null
    }
    ConditionQueryParameterDto: {
      /**
       * @description Comparison operator to be used. `notLike` is not supported by all endpoints.
       * @enum {string|null}
       */
      operator?: 'eq' | 'neq' | 'gt' | 'gteq' | 'lt' | 'lteq' | 'like' | 'notLike' | null
      value?: components['schemas']['AnyValue']
    }
    CorrelationMessageAsyncDto: {
      /** @description The name of the message to correlate. Corresponds to the 'name' element of the message defined in BPMN 2.0 XML. Can be null to correlate by other criteria only. */
      messageName?: string | null
      /**
       * @description A list of process instance ids that define a group of process instances
       * to which the operation will correlate a message.
       *
       * Please note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`
       * are defined, the resulting operation will be performed on the union of these sets.
       */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
      /** @description All variables the operation will set in the root scope of the process instances the message is correlated to. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    CorrelationMessageDto: {
      /** @description The name of the message to deliver. */
      messageName?: string | null
      /**
       * @description Used for correlation of process instances that wait for incoming messages.
       * Will only correlate to executions that belong to a process instance with the provided business key.
       */
      businessKey?: string | null
      /**
       * @description Used to correlate the message for a tenant with the given id.
       * Will only correlate to executions and process definitions which belong to the tenant.
       * Must not be supplied in conjunction with a `withoutTenantId`.
       */
      tenantId?: string | null
      /**
       * @description A Boolean value that indicates whether the message should only be correlated to executions
       * and process definitions which belong to no tenant or not. Value may only be `true`, as `false`
       * is the default behavior.
       * Must not be supplied in conjunction with a `tenantId`.
       * @default false
       */
      withoutTenantId?: boolean | null
      /** @description Used to correlate the message to the process instance with the given id. */
      processInstanceId?: string | null
      /**
       * @description Used for correlation of process instances that wait for incoming messages.
       * Has to be a JSON object containing key-value pairs that are matched against process instance variables
       * during correlation. Each key is a variable name and each value a JSON variable value object with the
       * following properties.
       */
      correlationKeys?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description Local variables used for correlation of executions (process instances) that wait for incoming messages.
       * Has to be a JSON object containing key-value pairs that are matched against local variables during correlation.
       * Each key is a variable name and each value a JSON variable value object with the following properties.
       */
      localCorrelationKeys?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description A map of variables that is injected into the triggered execution or process instance after the message
       * has been delivered. Each key is a variable name and each value a JSON variable value object with
       * the following properties.
       */
      processVariables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description A map of local variables that is injected into the execution waiting on the message.
       * Each key is a variable name and each value a JSON variable value object
       * with the following properties.
       */
      processVariablesLocal?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description A map of variables that is injected into the new scope triggered by message correlation.
       * Each key is a variable name and each value a JSON variable value object
       * with the following properties.
       */
      processVariablesToTriggeredScope?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities.
       * If the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition).
       * If the value is set to `true`, the message will be correlated to multiple executions and a process definition that
       * can be instantiated by this message in one go.
       * @default false
       */
      all?: boolean | null
      /**
       * @description A Boolean value that indicates whether the result of the correlation should be returned or not.
       * If this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the
       * all property, there will be either one ore more returned results in the list.
       *
       * The default value is `false`, which means no result will be returned.
       * @default false
       */
      resultEnabled?: boolean | null
      /**
       * @description A Boolean value that indicates whether the result of the correlation should contain process variables or not.
       * The parameter resultEnabled should be set to `true` in order to use this it.
       *
       * The default value is `false`, which means the variables will not be returned.
       * @default false
       */
      variablesInResultEnabled?: boolean | null
    }
    CountResultDto: {
      /**
       * Format: int64
       * @description The number of matching instances.
       */
      count?: number
    }
    CreateFilterDto: {
      /** @description The resource type of the filter. */
      resourceType?: string | null
      /** @description The name of the filter. */
      name?: string | null
      /** @description The user id of the owner of the filter. */
      owner?: string | null
      /** @description The query of the filter as a JSON object. */
      query?: Record<string, never>
      /** @description The properties of a filter as a JSON object. */
      properties?: Record<string, never>
    }
    CreateIncidentDto: {
      /** @description A type of the new incident. */
      incidentType?: string | null
      /** @description A configuration for the new incident. */
      configuration?: string | null
      /** @description A message for the new incident. */
      message?: string | null
    }
    DecisionDefinitionDiagramDto: {
      /** @description The id of the decision definition. */
      id?: string | null
      /**
       * @description An escaped XML string containing the XML that this decision definition was deployed with.
       * Carriage returns, line feeds and quotation marks are escaped.
       */
      dmnXml?: string | null
    }
    DecisionDefinitionDto: {
      /** @description The id of the decision definition */
      id?: string | null
      /** @description The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition. */
      key?: string | null
      /** @description The category of the decision definition. */
      category?: string | null
      /** @description The name of the decision definition. */
      name?: string | null
      /**
       * Format: int32
       * @description The version of the decision definition that the engine assigned to it.
       */
      version?: number | null
      /** @description The file name of the decision definition. */
      resource?: string | null
      /** @description The deployment id of the decision definition. */
      deploymentId?: string | null
      /** @description The tenant id of the decision definition. */
      tenantId?: string | null
      /** @description The id of the decision requirements definition this decision definition belongs to. */
      decisionRequirementsDefinitionId?: string | null
      /** @description The key of the decision requirements definition this decision definition belongs to. */
      decisionRequirementsDefinitionKey?: string | null
      /**
       * Format: int32
       * @description History time to live value of the decision definition.
       * Is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
       */
      historyTimeToLive?: number | null
      /** @description The version tag of the decision definition. */
      versionTag?: string | null
    }
    DecisionRequirementsDefinitionDto: {
      /** @description The id of the decision requirements definition. */
      id?: string | null
      /** @description The key of the decision requirements definition. */
      key?: string | null
      /** @description The category of the decision requirements definition. */
      category?: string | null
      /** @description The name of the decision requirements definition. */
      name?: string | null
      /**
       * Format: int32
       * @description The version of the decision requirements definition that the engine assigned to
       * it.
       */
      version?: number | null
      /** @description The file name of the decision requirements definition. */
      resource?: string | null
      /** @description The deployment id of the decision requirements definition. */
      deploymentId?: string | null
      /** @description The tenant id of the decision requirements definition. */
      tenantId?: string | null
    }
    DecisionRequirementsDefinitionXmlDto: {
      /** @description The id of the decision requirements definition. */
      id?: string | null
      /**
       * @description An escaped XML string containing the XML that this decision requirements definition
       * was deployed with. Carriage returns, line feeds and quotation marks
       * are escaped.
       */
      dmnXml?: string | null
    }
    DeleteHistoricDecisionInstancesDto: {
      /** @description A list of historic decision instance ids to delete. */
      historicDecisionInstanceIds?: string[] | null
      historicDecisionInstanceQuery?: components['schemas']['HistoricDecisionInstanceQueryDto']
      /** @description A string with delete reason. */
      deleteReason?: string | null
    }
    DeleteHistoricProcessInstancesDto: {
      /** @description A list historic process instance ids to delete. */
      historicProcessInstanceIds?: string[] | null
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
      /** @description A string with delete reason. */
      deleteReason?: string | null
      /** @description If set to `false`, the request will still be successful if one ore more of the process ids are not found. */
      failIfNotExists?: boolean | null
    }
    DeleteProcessInstancesDto: {
      /** @description A list process instance ids to delete. */
      processInstanceIds?: string[] | null
      /** @description A string with delete reason. */
      deleteReason?: string | null
      /** @description Skip execution listener invocation for activities that are started or ended as part of this request. */
      skipCustomListeners?: boolean | null
      /** @description Skip deletion of the subprocesses related to deleted processes as part of this request. */
      skipSubprocesses?: boolean | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
    }
    DeploymentDto: {
      /** @description The id of the deployment. */
      id?: string | null
      /** @description The tenant id of the deployment. */
      tenantId?: string | null
      /**
       * Format: date-time
       * @description The time when the deployment was created.
       */
      deploymentTime?: string | null
      /** @description The source of the deployment. */
      source?: string | null
      /** @description The name of the deployment. */
      name?: string | null
    } & components['schemas']['LinkableDto']
    /**
     * DeploymentResourceDto
     * @description A JSON object corresponding to the `Resource` interface in the engine.
     * Its properties are as follows:
     */
    DeploymentResourceDto: {
      /** @description The id of the deployment resource. */
      id?: string | null
      /** @description The name of the deployment resource */
      name?: string | null
      /** @description The id of the deployment. */
      deploymentId?: string | null
    }
    DeploymentWithDefinitionsDto: {
      /**
       * @description A JSON Object containing a property for each of the process definitions,
       * which are successfully deployed with that deployment.
       * The key is the process definition id, the value is a JSON Object corresponding to the process definition.
       */
      deployedProcessDefinitions?: {
        [key: string]: components['schemas']['ProcessDefinitionDto']
      } | null
      /**
       * @description A JSON Object containing a property for each of the decision definitions,
       * which are successfully deployed with that deployment.
       * The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
       */
      deployedDecisionDefinitions?: {
        [key: string]: components['schemas']['DecisionDefinitionDto']
      } | null
      /**
       * @description A JSON Object containing a property for each of the decision requirements definitions,
       * which are successfully deployed with that deployment.
       * The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
       */
      deployedDecisionRequirementsDefinitions?: {
        [key: string]: components['schemas']['DecisionRequirementsDefinitionDto']
      } | null
      /**
       * @description A JSON Object containing a property for each of the case definitions,
       * which are successfully deployed with that deployment.
       * The key is the case definition id, the value is a JSON Object corresponding to the case definition.
       */
      deployedCaseDefinitions?: {
        [key: string]: components['schemas']['CaseDefinitionDto']
      } | null
    } & components['schemas']['DeploymentDto']
    DurationReportResultDto: {
      /**
       * Format: int32
       * @description Specifies a timespan within a year.
       * **Note:** The period must be interpreted in conjunction with the returned `periodUnit`.
       */
      period?: number | null
      /**
       * @description The unit of the given period. Possible values are `MONTH` and `QUARTER`.
       * @enum {string|null}
       */
      periodUnit?: 'MONTH' | 'QUARTER' | null
      /**
       * Format: int64
       * @description The smallest duration in milliseconds of all completed process instances which were started in the given period.
       */
      minimum?: number | null
      /**
       * Format: int64
       * @description The greatest duration in milliseconds of all completed process instances which were started in the given period.
       */
      maximum?: number | null
      /**
       * Format: int64
       * @description The average duration in milliseconds of all completed process instances which were started in the given period.
       */
      average?: number | null
    }
    EvaluateDecisionDto: {
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    EvaluationConditionDto: {
      /**
       * @description A map of variables which are used for evaluation of the conditions and are injected into the process instances which have been triggered.
       * Each key is a variable name and each value a JSON variable value object with the following properties.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /** @description Used for the process instances that have been triggered after the evaluation. */
      businessKey?: string | null
      /**
       * @description Used to evaluate a condition for a tenant with the given id.
       * Will only evaluate conditions of process definitions which belong to the tenant.
       */
      tenantId?: string | null
      /**
       * @description A Boolean value that indicates whether the conditions should only be evaluated of process definitions which belong to no tenant or not.
       * Value may only be true, as false is the default behavior.
       */
      withoutTenantId?: boolean | null
      /** @description Used to evaluate conditions of the process definition with the given id. */
      processDefinitionId?: string | null
    }
    EventSubscriptionDto: {
      /** @description The id of the event subscription. */
      id?: string | null
      /** @description The type of the event subscription. */
      eventType?: string | null
      /** @description The name of the event this subscription belongs to as defined in the process model. */
      eventName?: string | null
      /** @description The execution that is subscribed on the referenced event. */
      executionId?: string | null
      /** @description The process instance this subscription belongs to. */
      processInstanceId?: string | null
      /**
       * @description The identifier of the activity that this event subscription belongs to.
       * This could for example be the id of a receive task.
       */
      activityId?: string | null
      /**
       * Format: date-time
       * @description The time this event subscription was created.
       */
      createdDate?: string | null
      /**
       * @description The id of the tenant this event subscription belongs to.
       * Can be `null` if the subscription belongs to no single tenant.
       */
      tenantId?: string | null
    }
    /** @description A event subscription query which retrieves a list of event subscriptions */
    EventSubscriptionQueryDto: {
      /** @description The id of the event subscription. */
      eventSubscriptionId?: string | null
      /** @description The name of the event this subscription belongs to as defined in the process model. */
      eventName?: string | null
      /**
       * @description The type of the event subscription.
       * @enum {string|null}
       */
      eventType?: 'message' | 'signal' | 'compensate' | 'conditional' | null
      /** @description The execution that is subscribed on the referenced event. */
      executionId?: string | null
      /** @description The process instance this subscription belongs to. */
      processInstanceId?: string | null
      /**
       * @description The identifier of the activity that this event subscription belongs to.
       * This could for example be the id of a receive task.
       */
      activityId?: string | null
      /**
       * @description Filter by a comma-separated list of tenant ids.
       * Only select subscriptions that belong to one of the given tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only select subscriptions which have no tenant id.
       * Value may only be `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * @description Select event subscriptions which have no tenant id.
       * Can be used in combination with tenantIdIn parameter.
       * Value may only be `true`, as `false` is the default behavior.
       */
      includeEventSubscriptionsWithoutTenantId?: boolean | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'created' | 'tenantId' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    /** ExceptionDto */
    ExceptionDto: {
      /** @description An exception class indicating the occurred error. */
      type?: string | null
      /** @description A detailed message of the error. */
      message?: string | null
      /**
       * @description The code allows your client application to identify the error in an automated fashion.
       * You can look up the meaning of all built-in codes and learn how to add custom codes
       * in the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/error-handling/#exception-codes).
       */
      code?: number
    }
    ExecutionDto: {
      /** @description The id of the Execution. */
      id?: string | null
      /** @description The id of the root of the execution tree representing the process instance. */
      processInstanceId?: string | null
      /** @description Indicates if the execution is ended. */
      ended?: boolean | null
      /**
       * @description The id of the tenant this execution belongs to. Can be `null`
       * if the execution belongs to no single tenant.
       */
      tenantId?: string | null
    }
    /** @description A Execution instance query which defines a list of Execution instances */
    ExecutionQueryDto: {
      /** @description Filter by the business key of the process instances the executions belong to. */
      businessKey?: string | null
      /** @description Filter by the process definition the executions run on. */
      processDefinitionId?: string | null
      /** @description Filter by the key of the process definition the executions run on. */
      processDefinitionKey?: string | null
      /** @description Filter by the id of the process instance the execution belongs to. */
      processInstanceId?: string | null
      /** @description Filter by the id of the activity the execution currently executes. */
      activityId?: string | null
      /** @description Select only those executions that expect a signal of the given name. */
      signalEventSubscriptionName?: string | null
      /** @description Select only those executions that expect a message of the given name. */
      messageEventSubscriptionName?: string | null
      /**
       * @description Only include active executions. Value may only be `true`, as `false` is the default
       * behavior.
       */
      active?: boolean | null
      /**
       * @description Only include suspended executions. Value may only be `true`, as `false` is the default
       * behavior.
       */
      suspended?: boolean | null
      /** @description Filter by the incident id. */
      incidentId?: string | null
      /** @description Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
      incidentType?: string | null
      /** @description Filter by the incident message. Exact match. */
      incidentMessage?: string | null
      /** @description Filter by the incident message that the parameter is a substring of. */
      incidentMessageLike?: string | null
      /**
       * @description Filter by a  list of tenant ids. An execution must have one of the given
       * tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description An array to only include executions that have variables with certain values.
       *
       * The array consists of objects with the three properties `name`, `operator`
       * and `value`.
       * `name (String)` is the variable name, `operator (String)` is the comparison
       * operator to be used and `value` the variable value.
       * `value` may be `String`, `Number` or `Boolean`.
       *
       * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -
       * greater than;
       * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or
       * equal to;
       * `like`.
       */
      variables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description An array to only include executions that belong to a process instance with variables
       * with certain values.
       *
       * The array consists of objects with the three properties `name`, `operator`
       * and `value`.
       * `name (String)` is the variable name, `operator (String)` is the comparison
       * operator to be used and `value` the variable value.
       * `value` may be `String`, `Number` or `Boolean`.
       *
       * Valid operator values are: `eq` - equal to; `neq` - not equal to.
       */
      processVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Match all variable names provided in `variables` and `processVariables` case-
       * insensitively. If set to `true` **variableName** and **variablename** are
       * treated as equal.
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match all variable values provided in `variables` and `processVariables` case-
       * insensitively. If set to `true` **variableValue** and **variablevalue** are
       * treated as equal.
       */
      variableValuesIgnoreCase?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Has no effect for the `/count` endpoint
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'instanceId' | 'definitionKey' | 'definitionId' | 'tenantId' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    ExecutionTriggerDto: {
      /**
       * @description A JSON object containing variable key-value pairs. Each key is a variable name and
       * each value a JSON variable value object.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    ExtendLockOnExternalTaskDto: {
      /**
       * Format: int64
       * @description An amount of time (in milliseconds). This is the new lock duration starting from the
       * current moment.
       */
      newDuration?: number | null
    } & components['schemas']['HandleExternalTaskDto']
    ExternalTaskBpmnError: {
      /**
       * @description The id of the worker that reports the failure. Must match the id of the worker who has most recently
       * locked the task.
       */
      workerId?: string | null
    } & components['schemas']['TaskBpmnErrorDto']
    /**
     * ExternalTaskDto
     * @description An External Task object with the following properties
     */
    ExternalTaskDto: {
      /** @description The id of the activity that this external task belongs to. */
      activityId?: string | null
      /** @description The id of the activity instance that the external task belongs to. */
      activityInstanceId?: string | null
      /**
       * @description The full error message submitted with the latest reported failure executing this task; `null` if no
       * failure was reported previously or if no error message was submitted
       */
      errorMessage?: string | null
      /** @description The id of the execution that the external task belongs to. */
      executionId?: string | null
      /** @description The id of the external task. */
      id?: string | null
      /**
       * Format: date-time
       * @description The date that the task's most recent lock expires or has expired.
       */
      lockExpirationTime?: string | null
      /** @description The id of the process definition the external task is defined in. */
      processDefinitionId?: string | null
      /** @description The key of the process definition the external task is defined in. */
      processDefinitionKey?: string | null
      /** @description The version tag of the process definition the external task is defined in. */
      processDefinitionVersionTag?: string | null
      /** @description The id of the process instance the external task belongs to. */
      processInstanceId?: string | null
      /** @description The id of the tenant the external task belongs to. */
      tenantId?: string | null
      /**
       * Format: int32
       * @description The number of retries the task currently has left.
       */
      retries?: number | null
      /** @description A flag indicating whether the external task is suspended or not. */
      suspended?: boolean | null
      /** @description The id of the worker that posesses or posessed the most recent lock. */
      workerId?: string | null
      /** @description The topic name of the external task. */
      topicName?: string | null
      /**
       * Format: int64
       * @description The priority of the external task.
       */
      priority?: number | null
      /** @description The business key of the process instance the external task belongs to. */
      businessKey?: string | null
    }
    ExternalTaskFailureDto: {
      /** @description An message indicating the reason of the failure. */
      errorMessage?: string | null
      /** @description A detailed error description. */
      errorDetails?: string | null
      /**
       * Format: int32
       * @description A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and
       * the task cannot be fetched anymore unless the retries are increased again. The incident's message is set
       * to the `errorMessage` parameter.
       */
      retries?: number | null
      /**
       * Format: int64
       * @description A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0.
       */
      retryTimeout?: number | null
      /** @description A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties: */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /** @description A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties: */
      localVariables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    } & components['schemas']['HandleExternalTaskDto']
    /**
     * ExternalTaskQueryDto
     * @description A JSON object with the following properties:
     */
    ExternalTaskQueryDto: {
      /** @description Filter by an external task's id. */
      externalTaskId?: string | null
      /** @description Filter by the comma-separated list of external task ids. */
      externalTaskIdIn?: string[] | null
      /** @description Filter by an external task topic. */
      topicName?: string | null
      /** @description Filter by the id of the worker that the task was most recently locked by. */
      workerId?: string | null
      /**
       * @description Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
       * Value may only be `true`, as `false` matches any external task.
       */
      locked?: boolean | null
      /**
       * @description Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
       * Value may only be `true`, as `false` matches any external task.
       */
      notLocked?: boolean | null
      /**
       * @description Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
       * `true`, as `false` matches any external task.
       */
      withRetriesLeft?: boolean | null
      /**
       * @description Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
       * external task.
       */
      noRetriesLeft?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to external tasks that have a lock that expires after a given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      lockExpirationAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to external tasks that have a lock that expires before a given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      lockExpirationBefore?: string | null
      /** @description Filter by the id of the activity that an external task is created for. */
      activityId?: string | null
      /** @description Filter by the comma-separated list of ids of the activities that an external task is created for. */
      activityIdIn?: string[] | null
      /** @description Filter by the id of the execution that an external task belongs to. */
      executionId?: string | null
      /** @description Filter by the id of the process instance that an external task belongs to. */
      processInstanceId?: string | null
      /** @description Filter by a comma-separated list of process instance ids that an external task may belong to. */
      processInstanceIdIn?: string[] | null
      /** @description Filter by the id of the process definition that an external task belongs to. */
      processDefinitionId?: string | null
      /**
       * @description Filter by a comma-separated list of tenant ids.
       * An external task must have one of the given tenant ids.
       */
      tenantIdIn?: string[] | null
      /** @description Only include active tasks. Value may only be `true`, as `false` matches any external task. */
      active?: boolean | null
      /** @description Only include suspended tasks. Value may only be `true`, as `false` matches any external task. */
      suspended?: boolean | null
      /**
       * Format: int64
       * @description Only include jobs with a priority higher than or equal to the given value.
       * Value must be a valid `long` value.
       */
      priorityHigherThanOrEquals?: number | null
      /**
       * Format: int64
       * @description Only include jobs with a priority lower than or equal to the given value.
       * Value must be a valid `long` value.
       */
      priorityLowerThanOrEquals?: number | null
      /**
       * @description A JSON array of criteria to sort the result by. Each element of the array is a JSON object that
       *                     specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether
       *                     it is primary, secondary, etc. The ordering objects have the following properties:
       *
       *                     **Note:** The `sorting` properties will not be applied to the External Task count query.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'id'
              | 'lockExpirationTime'
              | 'processInstanceId'
              | 'processDefinitionId'
              | 'processDefinitionKey'
              | 'taskPriority'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    FetchExternalTaskTopicDto: {
      /** @description **Mandatory.** The topic's name. */
      topicName: string
      /**
       * Format: int64
       * @description **Mandatory.** The duration to lock the external tasks for in milliseconds.
       */
      lockDuration: number | null
      /**
       * @description A JSON array of `String` values that represent variable names. For each result task belonging to this
       * topic, the given variables are returned as well if they are accessible from the external task's
       * execution. If not provided - all variables will be fetched.
       */
      variables?: string[] | null
      /**
       * @description If `true` only local variables will be fetched.
       * @default false
       */
      localVariables?: boolean | null
      /** @description A `String` value which enables the filtering of tasks based on process instance business key. */
      businessKey?: string | null
      /** @description Filter tasks based on process definition id. */
      processDefinitionId?: string | null
      /** @description Filter tasks based on process definition ids. */
      processDefinitionIdIn?: string[] | null
      /** @description Filter tasks based on process definition key. */
      processDefinitionKey?: string | null
      /** @description Filter tasks based on process definition keys. */
      processDefinitionKeyIn?: string[] | null
      /** @description Filter tasks based on process definition version tag. */
      processDefinitionVersionTag?: string | null
      /**
       * @description Filter tasks without tenant id.
       * @default false
       */
      withoutTenantId?: boolean | null
      /** @description Filter tasks based on tenant ids. */
      tenantIdIn?: string[] | null
      /**
       * @description A `JSON` object used for filtering tasks based on process instance variable values. A property name of
       * the object represents a process variable name, while the property value represents the process variable
       * value to filter tasks by.
       */
      processVariables?: {
        [key: string]: unknown
      }
      /**
       * @description Determines whether serializable variable values (typically variables that store custom Java objects)
       * should be deserialized on server side (default `false`).
       *
       * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
       * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note
       * that this requires the Java classes of the variable value to be on the REST API's classpath.
       *
       * If set to `false`, a serializable variable will be returned in its serialized format. For example, a
       * variable that is serialized as XML will be returned as a JSON string containing XML.
       * @default false
       */
      deserializeValues?: boolean | null
      /**
       * @description Determines whether custom extension properties defined in the BPMN activity of the external task (e.g.
       * via the Extensions tab in the Camunda modeler) should be included in the response. Default: false
       * @default false
       */
      includeExtensionProperties?: boolean | null
    }
    FetchExternalTasksDto: {
      /**
       * @description **Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for
       * that worker and can only be completed when providing the same worker id.
       */
      workerId: string
      /**
       * Format: int32
       * @description **Mandatory.** The maximum number of tasks to return.
       */
      maxTasks: number | null
      /**
       * @description A `boolean` value, which indicates whether the task should be fetched based on its priority
       * or arbitrarily.
       */
      usePriority?: boolean | null
      /**
       * Format: int64
       * @description The [Long Polling](https://docs.camunda.org/manual/7.20/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks)
       * timeout in milliseconds.
       *
       * **Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).
       */
      asyncResponseTimeout?: number | null
      /**
       * @description A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be
       * arbitrarily distributed among these topics. Each topic object has the following properties:
       */
      topics?: components['schemas']['FetchExternalTaskTopicDto'][] | null
    }
    FilterDto: {
      /** @description The id of the filter. */
      id?: string | null
      /** @description The resource type of the filter. */
      resourceType?: string | null
      /** @description The name of the filter. */
      name?: string | null
      /** @description The user id of the owner of the filter. */
      owner?: string | null
      /** @description The query of the filter as a JSON object. */
      query?: Record<string, never>
      /** @description The properties of a filter as a JSON object. */
      properties?: Record<string, never>
      /**
       * Format: int64
       * @description
       * The number of items matched by the filter itself. Note: Only exists
       * if the query parameter
       * `itemCount` was set to `true`
       */
      itemCount?: number | null
    }
    /** FormDto */
    FormDto: {
      /** @description The form key. */
      key?: string | null
      camundaFormRef?: components['schemas']['CamundaFormRef']
      /**
       * @description The context path of the process application. If the task (or the process definition) does not
       * belong to a process application deployment or a process definition at all, this
       * property is not set.
       */
      contextPath?: string | null
    }
    GroupDto: {
      /** @description The id of the group. */
      id?: string | null
      /** @description The name of the group. */
      name?: string | null
      /** @description The type of the group. */
      type?: string | null
    }
    /** @description A group instance query which defines a list of group instances */
    GroupQueryDto: {
      /** @description Filter by the id of the group. */
      id?: string | null
      /** @description Filter by a JSON string array of group ids. */
      idIn?: string[] | null
      /** @description Filter by the name of the group. */
      name?: string | null
      /** @description Filter by the name that the parameter is a substring of. */
      nameLike?: string | null
      /** @description Filter by the type of the group. */
      type?: string | null
      /** @description Only retrieve groups where the given user id is a member of. */
      member?: string | null
      /** @description Only retrieve groups which are members of the given tenant. */
      memberOfTenant?: string | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'id' | 'name' | 'type' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HandleExternalTaskDto: {
      /**
       * @description **Mandatory.** The ID of the worker who is performing the operation on the external task.
       * If the task is already locked, must match the id of the worker who has most recently
       * locked the task.
       */
      workerId?: string
    }
    HistoricActivityInstanceDto: {
      /** @description The id of the activity instance. */
      id?: string | null
      /** @description The id of the parent activity instance, for example a sub process instance. */
      parentActivityInstanceId?: string | null
      /** @description The id of the activity that this object is an instance of. */
      activityId?: string | null
      /** @description The name of the activity that this object is an instance of. */
      activityName?: string | null
      /** @description The type of the activity that this object is an instance of. */
      activityType?: string | null
      /** @description The key of the process definition that this activity instance belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the process definition that this activity instance belongs to. */
      processDefinitionId?: string | null
      /** @description The id of the process instance that this activity instance belongs to. */
      processInstanceId?: string | null
      /** @description The id of the execution that executed this activity instance. */
      executionId?: string | null
      /** @description The id of the task that is associated to this activity instance. Is only set if the activity is a user task. */
      taskId?: string | null
      /** @description The assignee of the task that is associated to this activity instance. Is only set if the activity is a user task. */
      assignee?: string | null
      /** @description The id of the called process instance. Is only set if the activity is a call activity and the called instance a process instance. */
      calledProcessInstanceId?: string | null
      /** @description The id of the called case instance. Is only set if the activity is a call activity and the called instance a case instance. */
      calledCaseInstanceId?: string | null
      /**
       * Format: date-time
       * @description The time the instance was started. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startTime?: string | null
      /**
       * Format: date-time
       * @description The time the instance ended. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      endTime?: string | null
      /**
       * Format: int64
       * @description The time the instance took to finish (in milliseconds).
       */
      durationInMillis?: number | null
      /** @description If `true`, this activity instance is canceled. */
      canceled?: boolean | null
      /** @description If `true`, this activity instance did complete a BPMN 2.0 scope. */
      completeScope?: boolean | null
      /** @description The tenant id of the activity instance. */
      tenantId?: string | null
      /**
       * Format: date-time
       * @description The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      removalTime?: string | null
      /** @description The process instance id of the root process instance that initiated the process containing this activity instance. */
      rootProcessInstanceId?: string | null
    }
    /** @description A historic activity instance query which defines a group of historic activity instances */
    HistoricActivityInstanceQueryDto: {
      /** @description Filter by activity instance id. */
      activityInstanceId?: string | null
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Filter by process definition id. */
      processDefinitionId?: string | null
      /** @description Filter by the id of the execution that executed the activity instance. */
      executionId?: string | null
      /** @description Filter by the activity id (according to BPMN 2.0 XML). */
      activityId?: string | null
      /** @description Filter by the activity name (according to BPMN 2.0 XML). */
      activityName?: string | null
      /** @description Filter by activity type. */
      activityType?: string | null
      /** @description Only include activity instances that are user tasks and assigned to a given user. */
      taskAssignee?: string | null
      /**
       * @description Only include finished activity instances.
       * Value may only be `true`, as `false` behaves the same as when the property is not set.
       */
      finished?: boolean | null
      /**
       * @description Only include unfinished activity instances.
       * Value may only be `true`, as `false` behaves the same as when the property is not set.
       */
      unfinished?: boolean | null
      /**
       * @description Only include canceled activity instances.
       * Value may only be `true`, as `false` behaves the same as when the property is not set.
       */
      canceled?: boolean | null
      /**
       * @description Only include activity instances which completed a scope.
       * Value may only be `true`, as `false` behaves the same as when the property is not set.
       */
      completeScope?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedAfter?: string | null
      /** @description Must be a JSON array of Strings. An activity instance must have one of the given tenant ids. */
      tenantIdIn?: string[] | null
      /** @description Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
      withoutTenantId?: boolean | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'activityInstanceId'
              | 'instanceId'
              | 'executionId'
              | 'activityId'
              | 'activityName'
              | 'activityType'
              | 'startTime'
              | 'endTime'
              | 'duration'
              | 'definitionId'
              | 'occurrence'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricActivityStatisticsDto: {
      /** @description The id of the activity the results are aggregated for. */
      id?: string | null
      /**
       * Format: int64
       * @description The total number of all running instances of the activity.
       */
      instances?: number | null
      /**
       * Format: int64
       * @description The total number of all canceled instances of the activity. **Note:** Will be `0`
       * (not `null`), if canceled activity instances were excluded.
       */
      canceled?: number | null
      /**
       * Format: int64
       * @description The total number of all finished instances of the activity. **Note:** Will be `0`
       * (not `null`), if finished activity instances were excluded.
       */
      finished?: number | null
      /**
       * Format: int64
       * @description The total number of all instances which completed a scope of the activity.
       * **Note:** Will be `0` (not `null`), if activity instances which
       * completed a scope were excluded.
       */
      completeScope?: number | null
      /**
       * Format: int64
       * @description The total number of open incidents for the activity. **Note:** Will be `0` (not
       * `null`), if `incidents` is set to `false`.
       */
      openIncidents?: number | null
      /**
       * Format: int64
       * @description The total number of resolved incidents for the activity. **Note:** Will be `0` (not
       * `null`), if `incidents` is set to `false`.
       */
      resolvedIncidents?: number | null
      /**
       * Format: int64
       * @description The total number of deleted incidents for the activity. **Note:** Will be `0` (not
       * `null`), if `incidents` is set to `false`.
       */
      deletedIncidents?: number | null
    }
    HistoricBatchDto: {
      /** @description The id of the batch. */
      id?: string | null
      /**
       * @description The type of the batch. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
       * for more information about batch types.
       */
      type?: string | null
      /**
       * Format: int32
       * @description
       * The total jobs of a batch is the number of batch execution
       * jobs required to complete the batch.
       */
      totalJobs?: number | null
      /**
       * Format: int32
       * @description
       * The number of batch execution jobs created per seed job invocation.
       * The batch seed job is invoked until it has created all batch
       * execution jobs required by the batch (see `totalJobs` property).
       */
      batchJobsPerSeed?: number | null
      /**
       * Format: int32
       * @description
       * Every batch execution job invokes the command executed by the batch
       * `invocationsPerBatchJob` times. E.g., for a process instance
       * migration batch this specifies the number of process instances
       * which are migrated per batch execution job.
       */
      invocationsPerBatchJob?: number | null
      /** @description The job definition id for the seed jobs of this batch. */
      seedJobDefinitionId?: string | null
      /** @description The job definition id for the monitor jobs of this batch. */
      monitorJobDefinitionId?: string | null
      /** @description The job definition id for the batch execution jobs of this batch. */
      batchJobDefinitionId?: string | null
      /** @description The tenant id of the batch. */
      tenantId?: string | null
      /** @description The batch creator's user id. */
      createUserId?: string | null
      /**
       * Format: date-time
       * @description The time the batch was started. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       * For further information, please see the [documentation](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      startTime?: string | null
      /**
       * Format: date-time
       * @description The time the batch execution was started, i.e., at least one batch job has been executed. Default format
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation]
       * (https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      executionStartTime?: string | null
      /**
       * Format: date-time
       * @description The time the batch ended. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       * For further information, please see the [documentation](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      endTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the historic batch should be removed by the History Cleanup
       * job. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       * For further information, please see the [documentation](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      removalTime?: string | null
    }
    /** @description Query for the historic batches to set the removal time for. */
    HistoricBatchQueryDto: {
      /** @description Filter by batch id. */
      batchId?: string | null
      /**
       * @description Filter by batch type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
       * for more information about batch types.
       */
      type?: string | null
      /**
       * @description
       * Filter completed or not completed batches. If the value is
       * `true`, only completed batches, i.e., end time is set, are
       * returned. Otherwise, if the value is `false`, only running
       * batches, i.e., end time is null, are returned.
       */
      completed?: boolean | null
      /**
       * @description Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given
       * tenant ids.
       */
      tenantIdIn?: string[] | null
      /** @description Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior. */
      withoutTenantId?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Has no effect for the `/count` endpoint
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'batchId' | 'startTime' | 'endTime' | 'tenantId' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricDecisionInputInstanceDto: {
      /** @description The id of the decision input value. */
      id?: string | null
      /** @description The id of the decision instance the input value belongs to. */
      decisionInstanceId?: string | null
      /** @description The id of the clause the input value belongs to. */
      clauseId?: string | null
      /** @description The name of the clause the input value belongs to. */
      clauseName?: string | null
      /** @description An error message in case a Java Serialized Object could not be de-serialized. */
      errorMessage?: string | null
      /** @description The value type of the variable. */
      type?: string | null
      /**
       * Format: date-time
       * @description The time the variable was inserted.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      createTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the entry should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this entry.
       */
      rootProcessInstanceId?: string | null
      /**
       * @description The variable's value. Value differs depending on the variable's type
       * and on the `disableCustomObjectDeserialization` parameter.
       */
      value?: Record<string, never>
      /**
       * @description A JSON object containing additional, value-type-dependent
       * properties.
       *
       * For variables of type `Object`, the following properties are
       * returned:
       *
       * * `objectTypeName`: A string representation of the object's type
       * name.
       *
       * * `serializationDataFormat`: The serialization format used to store
       * the variable.
       */
      valueInfo?: {
        [key: string]: unknown
      }
    }
    HistoricDecisionInstanceDto: {
      /** @description The id of the decision instance. */
      id?: string | null
      /** @description The id of the decision definition that this decision instance belongs to. */
      decisionDefinitionId?: string | null
      /** @description The key of the decision definition that this decision instance belongs to. */
      decisionDefinitionKey?: string | null
      /** @description The name of the decision definition that this decision instance belongs to. */
      decisionDefinitionName?: string | null
      /**
       * Format: date-time
       * @description The time the instance was evaluated.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      evaluationTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the instance should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /** @description The id of the process definition that this decision instance belongs to. */
      processDefinitionId?: string | null
      /** @description The key of the process definition that this decision instance belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the process instance that this decision instance belongs to. */
      processInstanceId?: string | null
      /** @description The id of the case definition that this decision instance belongs to. */
      caseDefinitionId?: string | null
      /** @description The key of the case definition that this decision instance belongs to. */
      caseDefinitionKey?: string | null
      /** @description The id of the case instance that this decision instance belongs to. */
      caseInstanceId?: string | null
      /** @description The id of the activity that this decision instance belongs to. */
      activityId?: string | null
      /** @description The id of the activity instance that this decision instance belongs to. */
      activityInstanceId?: string | null
      /** @description The tenant id of the historic decision instance. */
      tenantId?: string | null
      /**
       * @description The id of the authenticated user that has evaluated this decision instance without
       * a process or case instance.
       */
      userId?: string | null
      /**
       * @description The list of decision input values. **Only exists** if `includeInputs`
       * was set to `true` in the query.
       */
      inputs?: components['schemas']['HistoricDecisionInputInstanceDto'][] | null
      /**
       * @description The list of decision output values. **Only exists** if `includeOutputs`
       * was set to `true` in the query.
       */
      outputs?: components['schemas']['HistoricDecisionOutputInstanceDto'][] | null
      /**
       * Format: double
       * @description The result of the collect aggregation of the decision result if used. `null` if no
       * aggregation was used.
       */
      collectResultValue?: number | null
      /**
       * @description The decision instance id of the evaluated root decision. Can be `null` if this
       * instance is the root decision instance of the evaluation.
       */
      rootDecisionInstanceId?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the evaluation
       * of this decision. Can be `null` if this decision instance is not
       * evaluated as part of a BPMN process.
       */
      rootProcessInstanceId?: string | null
      /**
       * @description The id of the decision requirements definition that this decision instance belongs
       * to.
       */
      decisionRequirementsDefinitionId?: string | null
      /**
       * @description The key of the decision requirements definition that this decision instance belongs
       * to.
       */
      decisionRequirementsDefinitionKey?: string | null
    }
    /** @description A historic decision instance query which defines a list of historic decision instances */
    HistoricDecisionInstanceQueryDto: {
      /** @description Filter by decision instance id. */
      decisionInstanceId?: string | null
      /** @description Filter by decision instance ids. Must be a comma-separated list of decision instance ids. */
      decisionInstanceIdIn?: string[] | null
      /** @description Filter by the decision definition the instances belongs to. */
      decisionDefinitionId?: string | null
      /**
       * @description Filter by the decision definitions the instances belongs to. Must be a
       * comma-separated list of decision definition ids.
       */
      decisionDefinitionIdIn?: string[] | null
      /** @description Filter by the key of the decision definition the instances belongs to. */
      decisionDefinitionKey?: string | null
      /**
       * @description Filter by the keys of the decision definition the instances belongs to. Must be a comma-
       * separated list of decision definition keys.
       */
      decisionDefinitionKeyIn?: string[] | null
      /** @description Filter by the name of the decision definition the instances belongs to. */
      decisionDefinitionName?: string | null
      /**
       * @description Filter by the name of the decision definition the instances belongs to, that the parameter
       * is a substring of.
       */
      decisionDefinitionNameLike?: string | null
      /** @description Filter by the process definition the instances belongs to. */
      processDefinitionId?: string | null
      /** @description Filter by the key of the process definition the instances belongs to. */
      processDefinitionKey?: string | null
      /** @description Filter by the process instance the instances belongs to. */
      processInstanceId?: string | null
      /** @description Filter by the case definition the instances belongs to. */
      caseDefinitionId?: string | null
      /** @description Filter by the key of the case definition the instances belongs to. */
      caseDefinitionKey?: string | null
      /** @description Filter by the case instance the instances belongs to. */
      caseInstanceId?: string | null
      /**
       * @description Filter by the activity ids the instances belongs to.
       * Must be a comma-separated list of acitvity ids.
       */
      activityIdIn?: string[] | null
      /**
       * @description Filter by the activity instance ids the instances belongs to.
       * Must be a comma-separated list of acitvity instance ids.
       */
      activityInstanceIdIn?: string[] | null
      /**
       * @description Filter by a comma-separated list of tenant ids. A historic decision instance must have one
       * of the given tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic decision instances that belong to no tenant. Value may only be
       * `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to instances that were evaluated before the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
       * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      evaluatedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were evaluated after the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
       * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      evaluatedAfter?: string | null
      /** @description Restrict to instances that were evaluated by the given user. */
      userId?: string | null
      /**
       * @description Restrict to instances that have a given root decision instance id.
       * This also includes the decision instance with the given id.
       */
      rootDecisionInstanceId?: string | null
      /**
       * @description Restrict to instances those are the root decision instance of an evaluation.
       * Value may only be `true`, as `false` is the default behavior.
       */
      rootDecisionInstancesOnly?: boolean | null
      /** @description Filter by the decision requirements definition the instances belongs to. */
      decisionRequirementsDefinitionId?: string | null
      /** @description Filter by the key of the decision requirements definition the instances belongs to. */
      decisionRequirementsDefinitionKey?: string | null
      /**
       * @description Include input values in the result.
       * Value may only be `true`, as `false` is the default behavior.
       */
      includeInputs?: boolean | null
      /**
       * @description Include output values in the result.
       * Value may only be `true`, as `false` is the default behavior.
       */
      includeOutputs?: boolean | null
      /**
       * @description Disables fetching of byte array input and output values.
       * Value may only be `true`, as `false` is the default behavior.
       */
      disableBinaryFetching?: boolean | null
      /**
       * @description Disables deserialization of input and output values that are custom objects.
       * Value may only be `true`, as `false` is the default behavior.
       */
      disableCustomObjectDeserialization?: boolean | null
    }
    HistoricDecisionInstanceStatisticsDto: {
      /** @description A key of decision definition. */
      decisionDefinitionKey?: string | null
      /**
       * Format: int32
       * @description A number of evaluation for decision definition.
       */
      evaluations?: number | null
    }
    HistoricDecisionOutputInstanceDto: {
      /** @description The id of the decision output value. */
      id?: string | null
      /** @description The id of the decision instance the output value belongs to. */
      decisionInstanceId?: string | null
      /** @description The id of the clause the output value belongs to. */
      clauseId?: string | null
      /** @description The name of the clause the output value belongs to. */
      clauseName?: string | null
      /** @description The id of the rule the output value belongs to. */
      ruleId?: string | null
      /**
       * Format: int32
       * @description The order of the rule the output value belongs to.
       */
      ruleOrder?: number | null
      /** @description An error message in case a Java Serialized Object could not be de-serialized. */
      errorMessage?: string | null
      /** @description The name of the output variable. */
      variableName?: string | null
      /** @description The value type of the variable. */
      type?: string | null
      /**
       * Format: date-time
       * @description The time the variable was inserted.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      createTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the entry should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this entry.
       */
      rootProcessInstanceId?: string | null
      /**
       * @description The variable's value. Value differs depending on the variable's type
       * and on the `disableCustomObjectDeserialization` parameter.
       */
      value?: Record<string, never>
      /**
       * @description A JSON object containing additional, value-type-dependent
       * properties.
       *
       * For variables of type `Object`, the following properties are
       * returned:
       *
       * * `objectTypeName`: A string representation of the object's type
       * name.
       *
       * * `serializationDataFormat`: The serialization format used to store
       * the variable.
       */
      valueInfo?: {
        [key: string]: unknown
      }
    }
    HistoricDetailDto: {
      /** @description The id of the historic detail. */
      id?: string | null
      /**
       * @description The type of the historic detail. Either `formField` for a submitted form field
       * value or `variableUpdate` for variable updates.
       */
      type?: string | null
      /** @description The key of the process definition that this historic detail belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the process definition that this historic detail belongs to. */
      processDefinitionId?: string | null
      /** @description The id of the process instance the historic detail belongs to. */
      processInstanceId?: string | null
      /** @description The id of the activity instance the historic detail belongs to. */
      activityInstanceId?: string | null
      /** @description The id of the execution the historic detail belongs to. */
      executionId?: string | null
      /** @description The key of the case definition that this historic detail belongs to. */
      caseDefinitionKey?: string | null
      /** @description The id of the case definition that this historic detail belongs to. */
      caseDefinitionId?: string | null
      /** @description The id of the case instance the historic detail belongs to. */
      caseInstanceId?: string | null
      /** @description The id of the case execution the historic detail belongs to. */
      caseExecutionId?: string | null
      /** @description The id of the task the historic detail belongs to. */
      taskId?: string | null
      /** @description The id of the tenant that this historic detail belongs to. */
      tenantId?: string | null
      /**
       * @description The id of user operation which links historic detail with
       * [user operation log](https://docs.camunda.org/manual/7.20/reference/rest/history/user-operation-log/)
       * entries.
       */
      userOperationId?: string | null
      /**
       * Format: date-time
       * @description The time when this historic detail occurred. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      time?: string | null
      /**
       * Format: date-time
       * @description The time after which the historic detail should be removed by the History Cleanup job.
       * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this historic detail.
       */
      rootProcessInstanceId?: string | null
      /**
       * @description The id of the form field.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `formField`.
       */
      fieldId?: string | null
      /**
       * @description The submitted form field value. The value differs depending on the form field's type
       * and on the `deserializeValue` parameter.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `formField`.
       */
      fieldValue?: Record<string, never>
      /**
       * @description The name of the variable which has been updated.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      variableName?: string | null
      /**
       * @description The id of the associated variable instance.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      variableInstanceId?: string | null
      /**
       * @description The value type of the variable.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      variableType?: string | null
      /**
       * @description The variable's value. Value differs depending on the variable's type
       * and on the deserializeValues parameter.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      value?: Record<string, never>
      /**
       * @description A JSON object containing additional, value-type-dependent properties.
       * For variables of type `Object`, the following properties are returned:
       *
       * * `objectTypeName`: A string representation of the object's type name.
       * * `serializationDataFormat`: The serialization format used to store the variable.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      valueInfo?: {
        [key: string]: unknown
      }
      /**
       * @description Returns `true` for variable updates that contains the initial values of the variables.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      initial?: boolean | null
      /**
       * Format: int32
       * @description The revision of the historic variable update.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      revision?: number | null
      /**
       * @description An error message in case a Java Serialized Object
       * could not be de-serialized.
       *
       * **Note:** This property is only set for a `HistoricVariableUpdate` historic details.
       * In these cases, the value of the `type` property is `variableUpdate`.
       */
      errorMessage?: string | null
    }
    /** @description A historic detail query which defines a group of historic details. */
    HistoricDetailQueryDto: {
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Only include historic details which belong to one of the passed  process instance ids. */
      processInstanceIdIn?: string[] | null
      /** @description Filter by execution id. */
      executionId?: string | null
      /** @description Filter by task id. */
      taskId?: string | null
      /** @description Filter by activity instance id. */
      activityInstanceId?: string | null
      /** @description Filter by case instance id. */
      caseInstanceId?: string | null
      /** @description Filter by case execution id. */
      caseExecutionId?: string | null
      /** @description Filter by variable instance id. */
      variableInstanceId?: string | null
      /**
       * @description Only include historic details where the variable updates belong to one of the passed
       * list of variable types. A list of all supported variable types can be found
       * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
       * **Note:** All non-primitive variables are associated with the type `serializable`.
       */
      variableTypeIn?: string[] | null
      /** @description Filter by a  list of tenant ids. */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic details that belong to no tenant. Value may only be
       * `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /** @description Filter by a user operation id. */
      userOperationId?: string | null
      /** @description Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior. */
      formFields?: boolean | null
      /** @description Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior. */
      variableUpdates?: boolean | null
      /**
       * @description Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.
       * When this parameter is used together with `taskId`, this call is ignored and task details are not excluded.
       * Value may only be `true`, as `false` is the default behavior.
       */
      excludeTaskDetails?: boolean | null
      /**
       * @description Restrict to historic variable updates that contain only initial variable values.
       * Value may only be `true`, as `false` is the default behavior.
       */
      initial?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to historic details that occured before the given date (including the date).
       * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
       */
      occurredBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to historic details that occured after the given date (including the date).
       * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
       */
      occurredAfter?: string | null
      /**
       * @description A JSON array of criteria to sort the result by. Each element of the array is
       *                     a JSON object that specifies one ordering. The position in the array
       *                     identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                     etc. Does not have an effect for the `count` endpoint.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'processInstanceId'
              | 'variableName'
              | 'variableType'
              | 'variableRevision'
              | 'formPropertyId'
              | 'time'
              | 'occurrence'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricExternalTaskLogDto: {
      /** @description The id of the log entry. */
      id?: string | null
      /** @description The id of the external task. */
      externalTaskId?: string | null
      /**
       * Format: date-time
       * @description The time when the log entry has been written.
       */
      timestamp?: string | null
      /** @description The topic name of the associated external task. */
      topicName?: string | null
      /** @description The id of the worker that posessed the most recent lock. */
      workerId?: string | null
      /**
       * Format: int32
       * @description The number of retries the associated external task has left.
       */
      retries?: number | null
      /**
       * Format: int64
       * @description The execution priority the external task had when the log entry was created.
       */
      priority?: number | null
      /** @description The message of the error that occurred by executing the associated external task. */
      errorMessage?: string | null
      /** @description The id of the activity on which the associated external task was created. */
      activityId?: string | null
      /** @description The id of the activity instance on which the associated external task was created. */
      activityInstanceId?: string | null
      /** @description The execution id on which the associated external task was created. */
      executionId?: string | null
      /** @description The id of the process instance on which the associated external task was created. */
      processInstanceId?: string | null
      /** @description The id of the process definition which the associated external task belongs to. */
      processDefinitionId?: string | null
      /** @description The key of the process definition which the associated external task belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the tenant that this historic external task log entry belongs to. */
      tenantId?: string | null
      /**
       * @description A flag indicating whether this log represents the creation of the associated
       * external task.
       */
      creationLog?: boolean | null
      /**
       * @description A flag indicating whether this log represents the failed execution of the
       * associated external task.
       */
      failureLog?: boolean | null
      /**
       * @description A flag indicating whether this log represents the successful execution of the
       * associated external task.
       */
      successLog?: boolean | null
      /**
       * @description A flag indicating whether this log represents the deletion of the associated
       * external task.
       */
      deletionLog?: boolean | null
      /**
       * Format: date-time
       * @description The time after which this log should be removed by the History Cleanup job. Default
       * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  For further information, please see the [documentation](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this log.
       */
      rootProcessInstanceId?: string | null
    }
    /** @description A Historic External Task Log instance query which defines a list of Historic External Task Log instances */
    HistoricExternalTaskLogQueryDto: {
      /** @description Filter by historic external task log id. */
      logId?: string | null
      /** @description Filter by external task id. */
      externalTaskId?: string | null
      /** @description Filter by an external task topic. */
      topicName?: string | null
      /** @description Filter by the id of the worker that the task was most recently locked by. */
      workerId?: string | null
      /** @description Filter by external task exception message. */
      errorMessage?: string | null
      /** @description Only include historic external task logs which belong to one of the passed activity ids. */
      activityIdIn?: string[] | null
      /**
       * @description Only include historic external task logs which belong to one of the passed activity
       * instance ids.
       */
      activityInstanceIdIn?: string[] | null
      /** @description Only include historic external task logs which belong to one of the passed execution ids. */
      executionIdIn?: string[] | null
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Filter by process definition id. */
      processDefinitionId?: string | null
      /** @description Filter by process definition key. */
      processDefinitionKey?: string | null
      /**
       * @description Only include historic external task log entries which belong to one of the passed and
       * comma-separated tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic external task log entries that belong to no tenant. Value may only
       * be `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * Format: int64
       * @description Only include logs for which the associated external task had a priority lower than or
       * equal to the given value. Value must be a valid `long` value.
       */
      priorityLowerThanOrEquals?: number | null
      /**
       * Format: int64
       * @description Only include logs for which the associated external task had a priority higher than or
       * equal to the given value. Value must be a valid `long` value.
       */
      priorityHigherThanOrEquals?: number | null
      /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
      creationLog?: boolean | null
      /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
      failureLog?: boolean | null
      /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
      successLog?: boolean | null
      /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
      deletionLog?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Sorting has no effect for `count` endpoints.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'timestamp'
              | 'externalTaskId'
              | 'topicName'
              | 'workerId'
              | 'retries'
              | 'priority'
              | 'activityId'
              | 'activityInstanceId'
              | 'executionId'
              | 'processInstanceId'
              | 'processDefinitionId'
              | 'processDefinitionKey'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricIdentityLinkLogDto: {
      /** @description Id of the Historic identity link entry. */
      id?: string | null
      /**
       * Format: date-time
       * @description The time when the identity link is logged.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      time?: string | null
      /** @description The type of identity link (candidate/assignee/owner). */
      type?: string | null
      /** @description The id of the user/assignee. */
      userId?: string | null
      /** @description The id of the group. */
      groupId?: string | null
      /** @description The id of the task. */
      taskId?: string | null
      /** @description The id of the process definition. */
      processDefinitionId?: string | null
      /** @description The key of the process definition. */
      processDefinitionKey?: string | null
      /** @description Type of operation (add/delete). */
      operationType?: string | null
      /** @description The id of the assigner. */
      assignerId?: string | null
      /** @description The id of the tenant. */
      tenantId?: string | null
      /**
       * Format: date-time
       * @description The time after which the identity link should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this identity link.
       */
      rootProcessInstanceId?: string | null
    }
    HistoricIncidentDto: {
      /** @description The id of the incident. */
      id?: string | null
      /** @description The key of the process definition this incident is associated with. */
      processDefinitionKey?: string | null
      /** @description The id of the process definition this incident is associated with. */
      processDefinitionId?: string | null
      /** @description The key of the process definition this incident is associated with. */
      processInstanceId?: string | null
      /** @description The id of the execution this incident is associated with. */
      executionId?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this incident.
       */
      rootProcessInstanceId?: string | null
      /**
       * Format: date-time
       * @description The time this incident happened.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      createTime?: string | null
      /**
       * Format: date-time
       * @description The time this incident has been deleted or resolved.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      endTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the incident should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The type of incident, for example: `failedJobs` will be returned in case of an
       * incident which identified a failed job during the execution of a
       * process instance. See the [User Guide](/manual/develop/user-
       * guide/process-engine/incidents/#incident-types) for a list of
       * incident types.
       */
      incidentType?: string | null
      /** @description The id of the activity this incident is associated with. */
      activityId?: string | null
      /** @description The id of the activity on which the last exception occurred. */
      failedActivityId?: string | null
      /** @description The id of the associated cause incident which has been triggered. */
      causeIncidentId?: string | null
      /** @description The id of the associated root cause incident which has been triggered. */
      rootCauseIncidentId?: string | null
      /** @description The payload of this incident. */
      configuration?: string | null
      /** @description The payload of this incident at the time when it occurred. */
      historyConfiguration?: string | null
      /** @description The message of this incident. */
      incidentMessage?: string | null
      /** @description The id of the tenant this incident is associated with. */
      tenantId?: string | null
      /** @description The job definition id the incident is associated with. */
      jobDefinitionId?: string | null
      /** @description If true, this incident is open. */
      open?: boolean | null
      /** @description If true, this incident has been deleted. */
      deleted?: boolean | null
      /** @description If true, this incident has been resolved. */
      resolved?: boolean | null
      /** @description The annotation set to the incident. */
      annotation?: string | null
    }
    HistoricJobLogDto: {
      /** @description The id of the log entry. */
      id?: string | null
      /**
       * Format: date-time
       * @description The time when the log entry has been written.
       */
      timestamp?: string | null
      /**
       * Format: date-time
       * @description The time after which the log entry should be removed by the History Cleanup job.
       * Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further info see the
       * [docs](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       */
      removalTime?: string | null
      /** @description The id of the associated job. */
      jobId?: string | null
      /**
       * Format: date-time
       * @description The date on which the associated job is supposed to be processed.
       */
      jobDueDate?: string | null
      /**
       * Format: int32
       * @description The number of retries the associated job has left.
       */
      jobRetries?: number | null
      /**
       * Format: int64
       * @description The execution priority the job had when the log entry was created.
       */
      jobPriority?: number | null
      /** @description The message of the exception that occurred by executing the associated job. */
      jobExceptionMessage?: string | null
      /**
       * @description The id of the activity on which the last exception occurred by executing the
       * associated job.
       */
      failedActivityId?: string | null
      /** @description The id of the job definition on which the associated job was created. */
      jobDefinitionId?: string | null
      /**
       * @description The job definition type of the associated job. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
       * for more information about job definition types.
       */
      jobDefinitionType?: string | null
      /** @description The job definition configuration type of the associated job. */
      jobDefinitionConfiguration?: string | null
      /** @description The id of the activity on which the associated job was created. */
      activityId?: string | null
      /** @description The execution id on which the associated job was created. */
      executionId?: string | null
      /** @description The id of the process instance on which the associated job was created. */
      processInstanceId?: string | null
      /** @description The id of the process definition which the associated job belongs to. */
      processDefinitionId?: string | null
      /** @description The key of the process definition which the associated job belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the deployment which the associated job belongs to. */
      deploymentId?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * which the associated job belongs to.
       */
      rootProcessInstanceId?: string | null
      /** @description The id of the tenant that this historic job log entry belongs to. */
      tenantId?: string | null
      /**
       * @description
       * The name of the host of the Process Engine where the
       * job of this historic job log entry was executed.
       */
      hostname?: string | null
      /** @description A flag indicating whether this log represents the creation of the associated job. */
      creationLog?: boolean | null
      /**
       * @description A flag indicating whether this log represents the failed execution of the
       * associated job.
       */
      failureLog?: boolean | null
      /**
       * @description A flag indicating whether this log represents the successful execution of the
       * associated job.
       */
      successLog?: boolean | null
      /** @description A flag indicating whether this log represents the deletion of the associated job. */
      deletionLog?: boolean | null
    }
    /** @description A Historic Job Log instance query which defines a list of Historic Job Log instances */
    HistoricJobLogQueryDto: {
      /** @description Filter by historic job log id. */
      logId?: string | null
      /** @description Filter by job id. */
      jobId?: string | null
      /** @description Filter by job exception message. */
      jobExceptionMessage?: string | null
      /** @description Filter by job definition id. */
      jobDefinitionId?: string | null
      /**
       * @description Filter by job definition type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
       * for more information about job definition types.
       */
      jobDefinitionType?: string | null
      /** @description Filter by job definition configuration. */
      jobDefinitionConfiguration?: string | null
      /** @description Only include historic job logs which belong to one of the passed activity ids. */
      activityIdIn?: string[] | null
      /** @description Only include historic job logs which belong to failures of one of the passed activity ids. */
      failedActivityIdIn?: string[] | null
      /** @description Only include historic job logs which belong to one of the passed execution ids. */
      executionIdIn?: string[] | null
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Filter by process definition id. */
      processDefinitionId?: string | null
      /** @description Filter by process definition key. */
      processDefinitionKey?: string | null
      /** @description Filter by deployment id. */
      deploymentId?: string | null
      /**
       * @description Only include historic job log entries which belong to one of the passed and comma-
       * separated tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic job log entries that belong to no tenant. Value may only be
       * `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /** @description Filter by hostname. */
      hostname?: string | null
      /**
       * Format: int64
       * @description Only include logs for which the associated job had a priority lower than or equal to the
       * given value. Value must be a valid `long` value.
       */
      jobPriorityLowerThanOrEquals?: number | null
      /**
       * Format: int64
       * @description Only include logs for which the associated job had a priority higher than or equal to the
       * given value. Value must be a valid `long` value.
       */
      jobPriorityHigherThanOrEquals?: number | null
      /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
      creationLog?: boolean | null
      /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
      failureLog?: boolean | null
      /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
      successLog?: boolean | null
      /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
      deletionLog?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Sorting has no effect for `count` endpoints
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'timestamp'
              | 'jobId'
              | 'jobDefinitionId'
              | 'jobDueDate'
              | 'jobRetries'
              | 'jobPriority'
              | 'activityId'
              | 'executionId'
              | 'processInstanceId'
              | 'processDefinitionId'
              | 'processDefinitionKey'
              | 'deploymentId'
              | 'hostname'
              | 'occurrence'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricProcessInstanceDto: {
      /** @description The id of the process instance. */
      id?: string | null
      /** @description The process instance id of the root process instance that initiated the process. */
      rootProcessInstanceId?: string | null
      /** @description The id of the parent process instance, if it exists. */
      superProcessInstanceId?: string | null
      /** @description The id of the parent case instance, if it exists. */
      superCaseInstanceId?: string | null
      /** @description The id of the parent case instance, if it exists. */
      caseInstanceId?: string | null
      /** @description The name of the process definition that this process instance belongs to. */
      processDefinitionName?: string | null
      /** @description The key of the process definition that this process instance belongs to. */
      processDefinitionKey?: string | null
      /**
       * Format: int32
       * @description The version of the process definition that this process instance belongs to.
       */
      processDefinitionVersion?: number | null
      /** @description The id of the process definition that this process instance belongs to. */
      processDefinitionId?: string | null
      /** @description The business key of the process instance. */
      businessKey?: string | null
      /**
       * Format: date-time
       * @description The time the instance was started. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      startTime?: string | null
      /**
       * Format: date-time
       * @description The time the instance ended. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      endTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the instance should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * Format: int64
       * @description The time the instance took to finish (in milliseconds).
       */
      durationInMillis?: number | null
      /** @description The id of the user who started the process instance. */
      startUserId?: string | null
      /** @description The id of the initial activity that was executed (e.g., a start event). */
      startActivityId?: string | null
      /** @description The provided delete reason in case the process instance was canceled during execution. */
      deleteReason?: string | null
      /** @description The tenant id of the process instance. */
      tenantId?: string | null
      /**
       * @description Last state of the process instance, possible values are:
       *
       * `ACTIVE` - running process instance
       *
       * `SUSPENDED` - suspended process instances
       *
       * `COMPLETED` - completed through normal end event
       *
       * `EXTERNALLY_TERMINATED` - terminated externally, for instance through REST API
       *
       * `INTERNALLY_TERMINATED` - terminated internally, for instance by terminating boundary event
       * @enum {string|null}
       */
      state?:
        | 'ACTIVE'
        | 'SUSPENDED'
        | 'COMPLETED'
        | 'EXTERNALLY_TERMINATED'
        | 'INTERNALLY_TERMINATED'
        | null
    }
    /** @description A historic process instance query which defines a group of historic process instances */
    HistoricProcessInstanceQueryDto: {
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Filter by process instance ids. Must be a JSON array of `Strings`. */
      processInstanceIds?: string[] | null
      /** @description Filter by the process definition the instances run on. */
      processDefinitionId?: string | null
      /** @description Filter by the key of the process definition the instances run on. */
      processDefinitionKey?: string | null
      /** @description Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of `Strings`. */
      processDefinitionKeyIn?: string[] | null
      /** @description Filter by the name of the process definition the instances run on. */
      processDefinitionName?: string | null
      /** @description Filter by process definition names that the parameter is a substring of. */
      processDefinitionNameLike?: string | null
      /** @description Exclude instances that belong to a set of process definitions. Must be a JSON array of `Strings`. */
      processDefinitionKeyNotIn?: string[] | null
      /** @description Filter by process instance business key. */
      processInstanceBusinessKey?: string | null
      /** @description Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of `Strings` */
      processInstanceBusinessKeyIn?: string[] | null
      /** @description Filter by process instance business key that the parameter is a substring of. */
      processInstanceBusinessKeyLike?: string | null
      /** @description Restrict the query to all process instances that are top level process instances. */
      rootProcessInstances?: boolean | null
      /**
       * @description Only include finished process instances. This flag includes all process instances
       * that are completed or terminated. Value may only be `true`, as `false` is the default behavior.
       */
      finished?: boolean | null
      /** @description Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior. */
      unfinished?: boolean | null
      /** @description Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior. */
      withIncidents?: boolean | null
      /** @description Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior. */
      withRootIncidents?: boolean | null
      /** @description Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
      incidentType?: string | null
      /**
       * @description Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
       * @enum {string|null}
       */
      incidentStatus?: 'open' | 'resolved' | null
      /** @description Filter by the incident message. Exact match. */
      incidentMessage?: string | null
      /** @description Filter by the incident message that the parameter is a substring of. */
      incidentMessageLike?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were started before the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were started after the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were finished before the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that were finished after the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that executed an activity after the given date (inclusive).
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executedActivityAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that executed an activity before the given date (inclusive).
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executedActivityBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that executed an job after the given date (inclusive).
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executedJobAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to instances that executed an job before the given date (inclusive).
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executedJobBefore?: string | null
      /** @description Only include process instances that were started by the given user. */
      startedBy?: string | null
      /** @description Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. */
      superProcessInstanceId?: string | null
      /** @description Restrict query to one process instance that has a sub process instance with the given id. */
      subProcessInstanceId?: string | null
      /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
      superCaseInstanceId?: string | null
      /** @description Restrict query to one process instance that has a sub case instance with the given id. */
      subCaseInstanceId?: string | null
      /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
      caseInstanceId?: string | null
      /** @description Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of `Strings` */
      tenantIdIn?: string[] | null
      /** @description Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
      withoutTenantId?: boolean | null
      /** @description Restrict to instances that executed an activity with one of given ids. Must be a JSON array of `Strings` */
      executedActivityIdIn?: string[] | null
      /** @description Restrict to instances that have an active activity with one of given ids. Must be a JSON array of `Strings` */
      activeActivityIdIn?: string[] | null
      /** @description Restrict to instances that are active. */
      active?: boolean | null
      /** @description Restrict to instances that are suspended. */
      suspended?: boolean | null
      /** @description Restrict to instances that are completed. */
      completed?: boolean | null
      /** @description Restrict to instances that are externallyTerminated. */
      externallyTerminated?: boolean | null
      /** @description Restrict to instances that are internallyTerminated. */
      internallyTerminated?: boolean | null
      /**
       * @description A JSON array to only include process instances that have/had variables with certain values.
       * The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name,
       * `operator` (`String`) is the comparison operator to be used and `value` the variable value.
       *
       * Value may be `String`, `Number` or `Boolean`.
       *
       * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
       */
      variables?: components['schemas']['VariableQueryParameterDto'][] | null
      /** @description Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal. */
      variableNamesIgnoreCase?: boolean | null
      /** @description Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal. */
      variableValuesIgnoreCase?: boolean | null
      /**
       * @description A JSON array of nested historic process instance queries with OR semantics.
       *
       * A process instance matches a nested query if it fulfills at least one of the query's predicates.
       *
       * With multiple nested queries, a process instance must fulfill at least one predicate of each query
       * ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).
       *
       * All process instance query properties can be used except for: `sorting`
       *
       * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
       */
      orQueries?: components['schemas']['HistoricProcessInstanceQueryDto'][] | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'instanceId'
              | 'definitionId'
              | 'definitionKey'
              | 'definitionName'
              | 'definitionVersion'
              | 'businessKey'
              | 'startTime'
              | 'endTime'
              | 'duration'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricTaskInstanceDto: {
      /** @description The task id. */
      id?: string | null
      /** @description The key of the process definition the task belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the process definition the task belongs to. */
      processDefinitionId?: string | null
      /** @description The id of the process instance the task belongs to. */
      processInstanceId?: string | null
      /** @description The id of the execution the task belongs to. */
      executionId?: string | null
      /** @description The key of the case definition the task belongs to. */
      caseDefinitionKey?: string | null
      /** @description The id of the case definition the task belongs to. */
      caseDefinitionId?: string | null
      /** @description The id of the case instance the task belongs to. */
      caseInstanceId?: string | null
      /** @description The id of the case execution the task belongs to. */
      caseExecutionId?: string | null
      /** @description The id of the activity that this object is an instance of. */
      activityInstanceId?: string | null
      /** @description The task name. */
      name?: string | null
      /** @description The task's description. */
      description?: string | null
      /** @description The task's delete reason. */
      deleteReason?: string | null
      /** @description The owner's id. */
      owner?: string | null
      /** @description The assignee's id. */
      assignee?: string | null
      /**
       * Format: date-time
       * @description The time the task was started. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      startTime?: string | null
      /**
       * Format: date-time
       * @description The time the task ended. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      endTime?: string | null
      /**
       * Format: int64
       * @description The time the task took to finish (in milliseconds).
       */
      duration?: number | null
      /** @description The task's key. */
      taskDefinitionKey?: string | null
      /**
       * Format: int32
       * @description The task's priority.
       */
      priority?: number | null
      /**
       * Format: date-time
       * @description The task's due date. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      due?: string | null
      /** @description The id of the parent task, if this task is a subtask. */
      parentTaskId?: string | null
      /**
       * Format: date-time
       * @description The follow-up date for the task. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      followUp?: string | null
      /** @description The tenant id of the task instance. */
      tenantId?: string | null
      /**
       * Format: date-time
       * @description The time after which the task should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this task.
       */
      rootProcessInstanceId?: string | null
    }
    /** @description A Historic Task instance query which defines a list of Historic Task instances */
    HistoricTaskInstanceQueryDto: {
      /** @description Filter by task id. */
      taskId?: string | null
      /** @description Filter by parent task id. */
      taskParentTaskId?: string | null
      /** @description Filter by process instance id. */
      processInstanceId?: string | null
      /** @description Filter by process instance business key. */
      processInstanceBusinessKey?: string | null
      /**
       * @description Filter by process instances with one of the give business keys.
       * The keys need to be in a comma-separated list.
       */
      processInstanceBusinessKeyIn?: string[] | null
      /** @description Filter by  process instance business key that has the parameter value as a substring. */
      processInstanceBusinessKeyLike?: string | null
      /** @description Filter by the id of the execution that executed the task. */
      executionId?: string | null
      /** @description Filter by process definition id. */
      processDefinitionId?: string | null
      /** @description Restrict to tasks that belong to a process definition with the given key. */
      processDefinitionKey?: string | null
      /** @description Restrict to tasks that belong to a process definition with the given name. */
      processDefinitionName?: string | null
      /** @description Filter by case instance id. */
      caseInstanceId?: string | null
      /** @description Filter by the id of the case execution that executed the task. */
      caseExecutionId?: string | null
      /** @description Filter by case definition id. */
      caseDefinitionId?: string | null
      /** @description Restrict to tasks that belong to a case definition with the given key. */
      caseDefinitionKey?: string | null
      /** @description Restrict to tasks that belong to a case definition with the given name. */
      caseDefinitionName?: string | null
      /** @description Only include tasks which belong to one of the passed  activity instance ids. */
      activityInstanceIdIn?: string[] | null
      /** @description Restrict to tasks that have the given name. */
      taskName?: string | null
      /** @description Restrict to tasks that have a name with the given parameter value as substring. */
      taskNameLike?: string | null
      /** @description Restrict to tasks that have the given description. */
      taskDescription?: string | null
      /** @description Restrict to tasks that have a description that has the parameter value as a substring. */
      taskDescriptionLike?: string | null
      /** @description Restrict to tasks that have the given key. */
      taskDefinitionKey?: string | null
      /** @description Restrict to tasks that have one of the passed  task definition keys. */
      taskDefinitionKeyIn?: string[] | null
      /** @description Restrict to tasks that have the given delete reason. */
      taskDeleteReason?: string | null
      /** @description Restrict to tasks that have a delete reason that has the parameter value as a substring. */
      taskDeleteReasonLike?: string | null
      /** @description Restrict to tasks that the given user is assigned to. */
      taskAssignee?: string | null
      /** @description Restrict to tasks that are assigned to users with the parameter value as a substring. */
      taskAssigneeLike?: string | null
      /** @description Restrict to tasks that the given user owns. */
      taskOwner?: string | null
      /** @description Restrict to tasks that are owned by users with the parameter value as a substring. */
      taskOwnerLike?: string | null
      /**
       * Format: int32
       * @description Restrict to tasks that have the given priority.
       */
      taskPriority?: number | null
      /** @description If set to `true`, restricts the query to all tasks that are assigned. */
      assigned?: boolean | null
      /** @description If set to `true`, restricts the query to all tasks that are unassigned. */
      unassigned?: boolean | null
      /** @description Only include finished tasks. Value may only be `true`, as `false` is the default behavior. */
      finished?: boolean | null
      /**
       * @description Only include unfinished tasks. Value may only be `true`, as `false` is the default
       * behavior.
       */
      unfinished?: boolean | null
      /**
       * @description Only include tasks of finished processes. Value may only be `true`, as `false` is the
       * default behavior.
       */
      processFinished?: boolean | null
      /**
       * @description Only include tasks of unfinished processes. Value may only be `true`, as `false` is the
       * default behavior.
       */
      processUnfinished?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskDueDate?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskDueDateBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskDueDateAfter?: string | null
      /**
       * @description Only include tasks which have no due date. Value may only be `true`, as `false` is the
       * default behavior.
       */
      withoutTaskDueDate?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskFollowUpDate?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskFollowUpDateBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      taskFollowUpDateAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      startedAfter?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedBefore?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      finishedAfter?: string | null
      /**
       * @description Filter by a  list of tenant ids. A task instance must have one of the given
       * tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic task instances that belong to no tenant. Value may only be
       * `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * @description Only include tasks that have variables with certain values. Variable filtering expressions are
       * comma-separated and are structured as follows:
       *
       * A valid parameter value has the form `key_operator_value`.
       * `key` is the variable name, `operator` is the comparison operator to be used
       * and `value` the variable value.
       * **Note:** Values are always treated as `String` objects on server side.
       *
       *
       * Valid operator values are:
       * * `eq` - equal to;
       * * `neq` - not equal to;
       * * `gt` - greater than;
       * * `gteq` - greater than or equal to;
       * * `lt` - lower than;
       * * `lteq` - lower than or equal to;
       * * `like`.
       *
       * `key` and `value` may not contain underscore or comma characters.
       */
      taskVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Only include tasks that belong to process instances that have variables with certain
       * values. Variable filtering expressions are comma-separated and are structured as
       * follows:
       *
       * A valid parameter value has the form `key_operator_value`.
       * `key` is the variable name, `operator` is the comparison operator to be used
       * and `value` the variable value.
       * **Note:** Values are always treated as `String` objects on server side.
       *
       *
       * Valid operator values are:
       * * `eq` - equal to;
       * * `neq` - not equal to;
       * * `gt` - greater than;
       * * `gteq` - greater than or equal to;
       * * `lt` - lower than;
       * * `lteq` - lower than or equal to;
       * * `like`;
       * * `notLike`.
       *
       * `key` and `value` may not contain underscore or comma characters.
       */
      processVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Match the variable name provided in `taskVariables` and `processVariables` case-
       * insensitively. If set to `true` **variableName** and **variablename** are
       * treated as equal.
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match the variable value provided in `taskVariables` and `processVariables` case-
       * insensitively. If set to `true` **variableValue** and **variablevalue** are
       * treated as equal.
       */
      variableValuesIgnoreCase?: boolean | null
      /** @description Restrict to tasks with a historic identity link to the given user. */
      taskInvolvedUser?: string | null
      /** @description Restrict to tasks with a historic identity link to the given group. */
      taskInvolvedGroup?: string | null
      /** @description Restrict to tasks with a historic identity link to the given candidate user. */
      taskHadCandidateUser?: string | null
      /** @description Restrict to tasks with a historic identity link to the given candidate group. */
      taskHadCandidateGroup?: string | null
      /**
       * @description Only include tasks which have a candidate group. Value may only be `true`,
       * as `false` is the default behavior.
       */
      withCandidateGroups?: boolean | null
      /**
       * @description Only include tasks which have no candidate group. Value may only be `true`,
       * as `false` is the default behavior.
       */
      withoutCandidateGroups?: boolean | null
      /**
       * @description A JSON array of nested historic task instance queries with OR semantics.
       *
       * A task instance matches a nested query if it fulfills at least one of the query's predicates.
       *
       * With multiple nested queries, a task instance must fulfill at least one predicate of each query
       * ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).
       *
       * All task instance query properties can be used except for: `sorting`, `withCandidateGroups`, ` withoutCandidateGroups`.
       *
       * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
       */
      orQueries?: components['schemas']['HistoricTaskInstanceQueryDto'][] | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                     an object that specifies one ordering. The position in the array
       *                     identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                     etc. Sorting has no effect for `count` endpoints
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'taskId'
              | 'activityInstanceId'
              | 'processDefinitionId'
              | 'processInstanceId'
              | 'executionId'
              | 'duration'
              | 'endTime'
              | 'startTime'
              | 'taskName'
              | 'taskDescription'
              | 'assignee'
              | 'owner'
              | 'dueDate'
              | 'followUpDate'
              | 'deleteReason'
              | 'taskDefinitionKey'
              | 'priority'
              | 'caseDefinitionId'
              | 'caseInstanceId'
              | 'caseExecutionId'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoricTaskInstanceReportResultDto: {
      /**
       * @description The name of the task. It is only available when the `groupBy` parameter is set to `taskName`.
       * Else the value is `null`.
       *
       * **Note:** This property is only set for a historic task report object.
       * In these cases, the value of the `reportType` query parameter is `count`.
       */
      taskName?: string | null
      /**
       * Format: int64
       * @description The number of tasks which have the given definition.
       *
       * **Note:** This property is only set for a historic task report object.
       * In these cases, the value of the `reportType` query parameter is `count`.
       */
      count?: number | null
      /**
       * @description The key of the process definition.
       *
       * **Note:** This property is only set for a historic task report object.
       * In these cases, the value of the `reportType` query parameter is `count`.
       */
      processDefinitionKey?: string | null
      /**
       * @description The id of the process definition.
       *
       * **Note:** This property is only set for a historic task report object.
       * In these cases, the value of the `reportType` query parameter is `count`.
       */
      processDefinitionId?: string | null
      /**
       * @description The name of the process definition.
       *
       * **Note:** This property is only set for a historic task report object.
       * In these cases, the value of the `reportType` query parameter is `count`.
       */
      processDefinitionName?: string | null
      /**
       * Format: int32
       * @description Specifies a span of time within a year.
       * **Note:** The period must be interpreted in conjunction with the returned `periodUnit`.
       *
       * **Note:** This property is only set for a duration report object.
       * In these cases, the value of the `reportType` query parameter is `duration`.
       */
      period?: number | null
      /**
       * @description The unit of the given period. Possible values are `MONTH` and `QUARTER`.
       *
       * **Note:** This property is only set for a duration report object.
       * In these cases, the value of the `reportType` query parameter is `duration`.
       * @enum {string|null}
       */
      periodUnit?: 'MONTH' | 'QUARTER' | null
      /**
       * Format: int64
       * @description The smallest duration in milliseconds of all completed process instances which
       * were started in the given period.
       *
       * **Note:** This property is only set for a duration report object.
       * In these cases, the value of the `reportType` query parameter is `duration`.
       */
      minimum?: number | null
      /**
       * Format: int64
       * @description The greatest duration in milliseconds of all completed process instances which were
       * started in the given period.
       *
       * **Note:** This property is only set for a duration report object.
       * In these cases, the value of the `reportType` query parameter is `duration`.
       */
      maximum?: number | null
      /**
       * Format: int64
       * @description The average duration in milliseconds of all completed process instances which were
       * started in the given period.
       *
       * **Note:** This property is only set for a duration report object.
       * In these cases, the value of the `reportType` query parameter is `duration`.
       */
      average?: number | null
      /** @description The id of the tenant. */
      tenantId?: string | null
    }
    HistoricVariableInstanceDto: {
      /** @description The id of the variable instance. */
      id?: string | null
      /** @description The name of the variable instance. */
      name?: string | null
      /** @description The key of the process definition the variable instance belongs to. */
      processDefinitionKey?: string | null
      /** @description The id of the process definition the variable instance belongs to. */
      processDefinitionId?: string | null
      /** @description The process instance id the variable instance belongs to. */
      processInstanceId?: string | null
      /** @description The execution id the variable instance belongs to. */
      executionId?: string | null
      /** @description The id of the activity instance in which the variable is valid. */
      activityInstanceId?: string | null
      /** @description The key of the case definition the variable instance belongs to. */
      caseDefinitionKey?: string | null
      /** @description The id of the case definition the variable instance belongs to. */
      caseDefinitionId?: string | null
      /** @description The case instance id the variable instance belongs to. */
      caseInstanceId?: string | null
      /** @description The case execution id the variable instance belongs to. */
      caseExecutionId?: string | null
      /** @description The id of the task the variable instance belongs to. */
      taskId?: string | null
      /** @description The id of the tenant that this variable instance belongs to. */
      tenantId?: string | null
      /** @description An error message in case a Java Serialized Object could not be de-serialized. */
      errorMessage?: string | null
      /** @description The current state of the variable. Can be 'CREATED' or 'DELETED'. */
      state?: string | null
      /**
       * Format: date-time
       * @description The time the variable was inserted. [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      createTime?: string | null
      /**
       * Format: date-time
       * @description The time after which the variable should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this variable.
       */
      rootProcessInstanceId?: string | null
    } & components['schemas']['VariableValueDto']
    /** @description A Historic Variable Instance instance query which defines a list of Historic Variable Instance instances */
    HistoricVariableInstanceQueryDto: {
      /** @description Filter by variable name. */
      variableName?: string | null
      /** @description Restrict to variables with a name like the parameter. */
      variableNameLike?: string | null
      /** @description Filter by variable value. May be `String`, `Number` or `Boolean`. */
      variableValue?: Record<string, never>
      /**
       * @description Match the variable name provided in `variableName` and `variableNameLike` case-
       * insensitively. If set to `true` **variableName** and **variablename** are
       * treated as equal.
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match the variable value provided in `variableValue` case-insensitively. If set to `true`
       * **variableValue** and **variablevalue** are treated as equal.
       */
      variableValuesIgnoreCase?: boolean | null
      /**
       * @description Only include historic variable instances which belong to one of the passed and comma-
       * separated variable types. A list of all supported variable types can be found
       * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
       * **Note:** All non-primitive variables are associated with the type
       * 'serializable'.
       */
      variableTypeIn?: string[] | null
      /** @description Include variables that has already been deleted during the execution. */
      includeDeleted?: boolean | null
      /** @description Filter by the process instance the variable belongs to. */
      processInstanceId?: string | null
      /** @description Only include historic variable instances which belong to one of the passed  process instance ids. */
      processInstanceIdIn?: string[] | null
      /** @description Filter by the process definition the variable belongs to. */
      processDefinitionId?: string | null
      /** @description Filter by a key of the process definition the variable belongs to. */
      processDefinitionKey?: string | null
      /** @description Only include historic variable instances which belong to one of the passed and  execution ids. */
      executionIdIn?: string[] | null
      /** @description Filter by the case instance the variable belongs to. */
      caseInstanceId?: string | null
      /** @description Only include historic variable instances which belong to one of the passed and  case execution ids. */
      caseExecutionIdIn?: string[] | null
      /** @description Only include historic variable instances which belong to one of the passed and  case activity ids. */
      caseActivityIdIn?: string[] | null
      /** @description Only include historic variable instances which belong to one of the passed and  task ids. */
      taskIdIn?: string[] | null
      /** @description Only include historic variable instances which belong to one of the passed and  activity instance ids. */
      activityInstanceIdIn?: string[] | null
      /**
       * @description Only include historic variable instances which belong to one of the passed and comma-
       * separated tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include historic variable instances that belong to no tenant. Value may only be
       * `true`, as `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /** @description Only include historic variable instances which belong to one of the passed  variable names. */
      variableNameIn?: string[] | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                      an object that specifies one ordering. The position in the array
       *                      identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                      etc. Sorting has no effect for `count` endpoints
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'instanceId' | 'variableName' | 'tenantId' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    HistoryCleanupConfigurationDto: {
      /**
       * Format: date-time
       * @description Start time of the current or next batch window. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      batchWindowStartTime?: string | null
      /**
       * Format: date-time
       * @description End time of the current or next batch window. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
       * e.g., `2013-01-23T14:42:45.000+0200`.
       */
      batchWindowEndTime?: string | null
      /**
       * @description Indicates whether the engine node participates in history cleanup or
       * not. The default is `true`. Participation can be disabled via
       * [Process Engine Configuration](https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine/#history-cleanup-enabled).
       *
       * For more details, see
       * [Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#cleanup-execution-participation-per-node).
       */
      enabled?: boolean | null
    }
    HistoryTimeToLiveDto: {
      /**
       * Format: int32
       * @description New value for historyTimeToLive field of the definition.
       * Can be `null` if `enforceHistoryTimeToLive` is configured to `false`.
       * Cannot be negative.
       */
      historyTimeToLive?: number | null
    }
    IdentityLinkDto: {
      /** @description The id of the user participating in this link. Either `userId` or `groupId` is set. */
      userId?: string | null
      /** @description The id of the group participating in this link. Either `groupId` or `userId` is set. */
      groupId?: string | null
      /**
       * @description The type of the identity link. The value of the this property can be user-defined. The Process Engine
       * provides three pre-defined Identity Link `type`s:
       *
       * * `candidate`
       * * `assignee` - reserved for the task assignee
       * * `owner` - reserved for the task owner
       *
       * **Note**: When adding or removing an Identity Link, the `type` property must be defined.
       */
      type: string | null
    }
    IdentityServiceGroupDto: {
      /** @description The id of the group. */
      id?: string | null
      /** @description The name of the group. */
      name?: string | null
    }
    IdentityServiceGroupInfoDto: {
      /** @description An array of group objects. */
      groups?: components['schemas']['IdentityServiceGroupDto'][] | null
      /** @description An array that contains all users that are member in one of the groups. */
      groupUsers?: components['schemas']['IdentityServiceUserDto'][] | null
    }
    IdentityServiceUserDto: {
      /** @description The id of the user. */
      id?: string | null
      /** @description The firstname of the user. */
      firstName?: string | null
      /** @description The lastname of the user. */
      lastName?: string | null
      /** @description The displayName is generated from the id or firstName and lastName if available. */
      displayName?: string | null
    }
    IncidentDto: {
      /** @description The id of the incident. */
      id?: string | null
      /** @description The id of the process definition this incident is associated with. */
      processDefinitionId?: string | null
      /** @description The id of the process instance this incident is associated with. */
      processInstanceId?: string | null
      /** @description The id of the execution this incident is associated with. */
      executionId?: string | null
      /**
       * Format: date-time
       * @description The time this incident happened. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      incidentTimestamp?: string | null
      /**
       * @description The type of incident, for example: `failedJobs` will be returned in case of an incident which identified
       * a failed job during the execution of a process instance. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
       */
      incidentType?: string | null
      /** @description The id of the activity this incident is associated with. */
      activityId?: string | null
      /** @description The id of the activity on which the last exception occurred. */
      failedActivityId?: string | null
      /** @description The id of the associated cause incident which has been triggered. */
      causeIncidentId?: string | null
      /** @description The id of the associated root cause incident which has been triggered. */
      rootCauseIncidentId?: string | null
      /** @description The payload of this incident. */
      configuration?: string | null
      /** @description The id of the tenant this incident is associated with. */
      tenantId?: string | null
      /** @description The message of this incident. */
      incidentMessage?: string | null
      /** @description The job definition id the incident is associated with. */
      jobDefinitionId?: string | null
      /** @description The annotation set to the incident. */
      annotation?: string | null
    }
    IncidentStatisticsResultDto: {
      /**
       * @description The type of the incident the number of incidents is aggregated for.
       * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
       */
      incidentType?: string | null
      /**
       * Format: int32
       * @description The total number of incidents for the corresponding incident type.
       */
      incidentCount?: number | null
    }
    JobConditionQueryParameterDto: {
      /**
       * @description Comparison operator to be used.
       * @enum {string|null}
       */
      operator?: 'gt' | 'lt' | null
      /**
       * Format: date-time
       * @description Date value to compare with.
       */
      value?: string | null
    }
    JobDefinitionDto: {
      /** @description The id of the job definition. */
      id?: string | null
      /** @description The id of the process definition this job definition is associated with. */
      processDefinitionId?: string | null
      /** @description The key of the process definition this job definition is associated with. */
      processDefinitionKey?: string | null
      /** @description The id of the activity this job definition is associated with. */
      activityId?: string | null
      /**
       * @description The type of the job which is running for this job definition. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
       * for more information about job types.
       */
      jobType?: string | null
      /**
       * @description The configuration of a job definition provides details about the jobs which will be
       * created. For example: for timer jobs it is the timer configuration.
       */
      jobConfiguration?: string | null
      /**
       * Format: int64
       * @description The execution priority defined for jobs that are created based on this definition.
       * May be `null` when the priority has not been overridden on the job
       * definition level.
       */
      overridingJobPriority?: number | null
      /** @description Indicates whether this job definition is suspended or not. */
      suspended?: boolean | null
      /** @description The id of the tenant this job definition is associated with. */
      tenantId?: string | null
      /**
       * @description The id of the deployment this job definition is related to. In a deployment-aware
       * setup, this leads to all jobs of the same definition being executed
       * on the same node.
       */
      deploymentId?: string | null
    }
    JobDefinitionPriorityDto: {
      /**
       * Format: int64
       * @description The new execution priority number for jobs of the given definition. The
       * definition's priority can be reset by using the value `null`. In
       * that case, the job definition's priority no longer applies but a new
       * job's priority is determined as specified in the process model.
       */
      priority?: number | null
      /**
       * @description A boolean value indicating whether existing jobs of the given definition should
       * receive the priority as well. Default value is `false`. Can only be
       * `true` when the __priority__ parameter is not `null`.
       */
      includeJobs?: boolean | null
    }
    /** @description A Job definition query which defines a list of Job definitions */
    JobDefinitionQueryDto: {
      /** @description Filter by job definition id. */
      jobDefinitionId?: string | null
      /** @description Only include job definitions which belong to one of the passed activity ids. */
      activityIdIn?: string[] | null
      /** @description Only include job definitions which exist for the given process definition id. */
      processDefinitionId?: string | null
      /** @description Only include job definitions which exist for the given process definition key. */
      processDefinitionKey?: string | null
      /**
       * @description Only include job definitions which exist for the given job type. See the
       * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
       * for more information about job types.
       */
      jobType?: string | null
      /**
       * @description Only include job definitions which exist for the given job configuration. For example: for
       * timer jobs it is the timer configuration.
       */
      jobConfiguration?: string | null
      /**
       * @description Only include active job definitions. Value may only be `true`, as `false` is the default
       * behavior.
       */
      active?: boolean | null
      /**
       * @description Only include suspended job definitions. Value may only be `true`, as `false` is the
       * default behavior.
       */
      suspended?: boolean | null
      /**
       * @description Only include job definitions that have an overriding job priority defined. The only
       * effective value is `true`. If set to `false`, this filter is not applied.
       */
      withOverridingJobPriority?: boolean | null
      /**
       * @description Only include job definitions which belong to one of the passed tenant
       * ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include job definitions which belong to no tenant. Value may only be `true`, as
       * `false` is the default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * @description Include job definitions which belong to no tenant. Can be used in combination with
       * `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
       */
      includeJobDefinitionsWithoutTenantId?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Sorting has no effect for `count` endpoints.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'jobDefinitionId'
              | 'activityId'
              | 'processDefinitionId'
              | 'processDefinitionKey'
              | 'jobType'
              | 'jobConfiguration'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    JobDefinitionSuspensionStateDto: {
      /**
       * @description A `Boolean` value which indicates whether to activate or suspend also all jobs of
       * the referenced job definitions. When the value is set to `true`, all jobs
       * of the provided job definitions will be activated or suspended and
       * when the value is set to `false`, the suspension state of all jobs
       * of the provided job definitions will not be updated.
       */
      includeJobs?: boolean | null
      /**
       * @description The date on which the referenced job definitions will be activated or suspended. If null,
       * the suspension state of the given job definitions is updated
       * immediately. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
       * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executionDate?: string | null
    } & components['schemas']['SuspensionStateDto']
    JobDefinitionsSuspensionStateDto: {
      /** @description The process definition id of the job definitions to activate or suspend. */
      processDefinitionId?: string | null
      /** @description The process definition key of the job definitions to activate or suspend. */
      processDefinitionKey?: string | null
      /**
       * @description Only activate or suspend job definitions of a process definition which belongs to a
       * tenant with the given id.
       *
       * Note that this parameter will only be considered
       * in combination with `processDefinitionKey`.
       */
      processDefinitionTenantId?: string | null
      /**
       * @description Only activate or suspend job definitions of a process definition which belongs to
       * no tenant. Value may only be `true`, as `false` is the default
       * behavior.
       *
       * Note that this parameter will only be considered
       * in combination with `processDefinitionKey`.
       */
      processDefinitionWithoutTenantId?: boolean | null
    } & components['schemas']['JobDefinitionSuspensionStateDto']
    JobDto: {
      /** @description The id of the job. */
      id?: string | null
      /** @description The id of the associated job definition. */
      jobDefinitionId?: string | null
      /**
       * Format: date-time
       * @description The date on which this job is supposed to be processed.
       */
      dueDate?: string | null
      /** @description The id of the process instance which execution created the job. */
      processInstanceId?: string | null
      /** @description The specific execution id on which the job was created. */
      executionId?: string | null
      /** @description The id of the process definition which this job belongs to. */
      processDefinitionId?: string | null
      /** @description The key of the process definition which this job belongs to. */
      processDefinitionKey?: string | null
      /**
       * Format: int32
       * @description The number of retries this job has left.
       */
      retries?: number | null
      /**
       * @description The message of the exception that occurred, the last time the job was executed. Is
       * null when no exception occurred.
       */
      exceptionMessage?: string | null
      /**
       * @description The id of the activity on which the last exception occurred, the last time the job
       * was executed. Is null when no exception occurred.
       */
      failedActivityId?: string | null
      /** @description A flag indicating whether the job is suspended or not. */
      suspended?: boolean | null
      /**
       * Format: int64
       * @description The job's priority for execution.
       */
      priority?: number | null
      /** @description The id of the tenant which this job belongs to. */
      tenantId?: string | null
      /**
       * Format: date-time
       * @description The date on which this job has been created.
       */
      createTime?: string | null
    }
    JobDuedateDto: {
      /**
       * Format: date-time
       * @description The date to set when the job has the next execution.
       */
      duedate?: string | null
      /**
       * @description A boolean value to indicate if modifications to the due date should cascade to
       * subsequent jobs. (e.g. Modify the due date of a timer by +15
       * minutes. This flag indicates if a +15 minutes should be applied to all
       * subsequent timers.) This flag only affects timer jobs and only works if due date
       * is not null. Default: `false`
       */
      cascade?: boolean | null
    }
    /** @description A Job instance query which defines a list of Job instances */
    JobQueryDto: {
      /** @description Filter by job id. */
      jobId?: string | null
      /** @description Filter by a  list of job ids. */
      jobIds?: string[] | null
      /** @description Only select jobs which exist for the given job definition. */
      jobDefinitionId?: string | null
      /** @description Only select jobs which exist for the given process instance. */
      processInstanceId?: string | null
      /** @description Only select jobs which exist for the given  list of process instance ids. */
      processInstanceIds?: string[] | null
      /** @description Only select jobs which exist for the given execution. */
      executionId?: string | null
      /** @description Filter by the id of the process definition the jobs run on. */
      processDefinitionId?: string | null
      /** @description Filter by the key of the process definition the jobs run on. */
      processDefinitionKey?: string | null
      /** @description Only select jobs which exist for an activity with the given id. */
      activityId?: string | null
      /**
       * @description Only select jobs which have retries left. Value may only be `true`, as `false` is the
       * default behavior.
       */
      withRetriesLeft?: boolean | null
      /**
       * @description Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due
       * date is in the past. Value may only be `true`, as `false` is the default
       * behavior.
       */
      executable?: boolean | null
      /**
       * @description Only select jobs that are timers. Cannot be used together with `messages`. Value may only
       * be `true`, as `false` is the default behavior.
       */
      timers?: boolean | null
      /**
       * @description Only select jobs that are messages. Cannot be used together with `timers`. Value may only
       * be `true`, as `false` is the default behavior.
       */
      messages?: boolean | null
      /** @description Only select jobs where the due date is lower or higher than the given date. */
      dueDates?: components['schemas']['JobConditionQueryParameterDto'][] | null
      /** @description Only select jobs created before or after the given date. */
      createTimes?: components['schemas']['JobConditionQueryParameterDto'][] | null
      /**
       * @description Only select jobs that failed due to an exception. Value may only be `true`, as `false` is
       * the default behavior.
       */
      withException?: boolean | null
      /** @description Only select jobs that failed due to an exception with the given message. */
      exceptionMessage?: string | null
      /** @description Only select jobs that failed due to an exception at an activity with the given id. */
      failedActivityId?: string | null
      /**
       * @description Only select jobs which have no retries left. Value may only be `true`, as `false` is the
       * default behavior.
       */
      noRetriesLeft?: boolean | null
      /** @description Only include active jobs. Value may only be `true`, as `false` is the default behavior. */
      active?: boolean | null
      /** @description Only include suspended jobs. Value may only be `true`, as `false` is the default behavior. */
      suspended?: boolean | null
      /**
       * Format: int64
       * @description Only include jobs with a priority lower than or equal to the given value. Value must be a
       * valid `long` value.
       */
      priorityLowerThanOrEquals?: number | null
      /**
       * Format: int64
       * @description Only include jobs with a priority higher than or equal to the given value. Value must be a
       * valid `long` value.
       */
      priorityHigherThanOrEquals?: number | null
      /** @description Only include jobs which belong to one of the passed  tenant ids. */
      tenantIdIn?: string[] | null
      /**
       * @description Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the
       * default behavior.
       */
      withoutTenantId?: boolean | null
      /**
       * @description Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.
       * Value may only be `true`, as `false` is the default behavior.
       */
      includeJobsWithoutTenantId?: boolean | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is
       *                        an object that specifies one ordering. The position in the array
       *                        identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                        etc. Does not have an effect for the `count` endpoint.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'jobId'
              | 'executionId'
              | 'processInstanceId'
              | 'processDefinitionId'
              | 'processDefinitionKey'
              | 'jobPriority'
              | 'jobRetries'
              | 'jobDueDate'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    JobRetriesDto: {
      /**
       * Format: date-time
       * @description The due date to set for the job. A due date indicates when this job is ready for execution.
       * Jobs with due dates in the past will be scheduled for execution.
       */
      dueDate?: string | null
    } & components['schemas']['RetriesDto']
    JobSuspensionStateDto: {
      /** @description The job definition id of the jobs to activate or suspend. */
      jobDefinitionId?: string | null
      /** @description The process definition id of the jobs to activate or suspend. */
      processDefinitionId?: string | null
      /** @description The process instance id of the jobs to activate or suspend. */
      processInstanceId?: string | null
      /** @description The process definition key of the jobs to activate or suspend. */
      processDefinitionKey?: string | null
      /**
       * @description Only activate or suspend jobs of a process definition which belongs to a tenant
       * with the given id. Works only when selecting with `processDefinitionKey`.
       */
      processDefinitionTenantId?: string | null
      /**
       * @description Only activate or suspend jobs of a process definition which belongs to no tenant.
       * Value may only be `true`, as `false` is the default behavior. Works only when selecting with `processDefinitionKey`.
       */
      processDefinitionWithoutTenantId?: boolean | null
    } & components['schemas']['SuspensionStateDto']
    LinkableDto: {
      /** @description The links associated to this resource, with `method`, `href` and `rel`. */
      links?: components['schemas']['AtomLink'][] | null
    }
    LockExternalTaskDto: {
      /**
       * Format: int64
       * @description The duration to lock the external task for in milliseconds.
       * **Note:** Attempting to lock an already locked external task with the same `workerId`
       * will succeed and a new lock duration will be set, starting from the current moment.
       */
      lockDuration?: number
    } & components['schemas']['HandleExternalTaskDto']
    /** LockedExternalTaskDto */
    LockedExternalTaskDto: {
      /** @description The id of the activity that this external task belongs to. */
      activityId?: string | null
      /** @description The id of the activity instance that the external task belongs to. */
      activityInstanceId?: string | null
      /**
       * @description The full error message submitted with the latest reported failure executing this task;`null` if no failure
       * was reported previously or if no error message was submitted
       */
      errorMessage?: string | null
      /**
       * @description The error details submitted with the latest reported failure executing this task.`null` if no failure was
       * reported previously or if no error details was submitted
       */
      errorDetails?: string | null
      /** @description The id of the execution that the external task belongs to. */
      executionId?: string | null
      /** @description The id of the external task. */
      id?: string | null
      /**
       * Format: date-time
       * @description The date that the task's most recent lock expires or has expired.
       */
      lockExpirationTime?: string | null
      /** @description The id of the process definition the external task is defined in. */
      processDefinitionId?: string | null
      /** @description The key of the process definition the external task is defined in. */
      processDefinitionKey?: string | null
      /** @description The version tag of the process definition the external task is defined in. */
      processDefinitionVersionTag?: string | null
      /** @description The id of the process instance the external task belongs to. */
      processInstanceId?: string | null
      /** @description The id of the tenant the external task belongs to. */
      tenantId?: string | null
      /**
       * Format: int32
       * @description The number of retries the task currently has left.
       */
      retries?: number | null
      /** @description Whether the process instance the external task belongs to is suspended. */
      suspended?: boolean | null
      /** @description The id of the worker that posesses or posessed the most recent lock. */
      workerId?: string | null
      /**
       * Format: int64
       * @description The priority of the external task.
       */
      priority?: number | null
      /** @description The topic name of the external task. */
      topicName?: string | null
      /** @description The business key of the process instance the external task belongs to. */
      businessKey?: string | null
      /**
       * @description A JSON object containing a property for each of the requested variables. The key is the variable name,
       * the value is a JSON object of serialized variable values with the following properties:
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    /**
     * @description The `processInstance` property only has a value if the resultType is set to `ProcessDefinition`.
     * The processInstance with the properties as described in the
     * [get single instance](https://docs.camunda.org/manual/7.20/reference/rest/process-instance/get/) method.
     *
     * The `execution` property only has a value if the resultType is set to `Execution`.
     * The execution with the properties as described in the
     * [get single execution](https://docs.camunda.org/manual/7.20/reference/rest/execution/get/) method.
     */
    MessageCorrelationResultWithVariableDto: {
      /**
       * @description Indicates if the message was correlated to a message start event or an
       * intermediate message catching event. In the first case, the resultType is
       * `ProcessDefinition` and otherwise `Execution`.
       * @enum {string|null}
       */
      resultType?: 'Execution' | 'ProcessDefinition' | null
      processInstance?: components['schemas']['ProcessInstanceDto']
      execution?: components['schemas']['ExecutionDto']
      /**
       * @description This property is returned if the `variablesInResultEnabled` is set to `true`.
       * Contains a list of the process variables.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    MetricsIntervalResultDto: {
      /**
       * Format: date-time
       * @description The interval timestamp.
       */
      timestamp?: string | null
      /** @description The name of the metric. */
      name?: string | null
      /** @description The reporter of the metric. `null` if the metrics are aggregated by reporter. */
      reporter?: string | null
      /**
       * Format: int64
       * @description The value of the metric aggregated by the interval.
       */
      value?: number | null
    }
    MetricsResultDto: {
      /**
       * Format: int64
       * @description The current sum (count) for the selected metric.
       */
      result?: number | null
    }
    MigrationExecutionDto: {
      migrationPlan?: components['schemas']['MigrationPlanDto']
      /** @description A list of process instance ids to migrate. */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      /**
       * @description A boolean value to control whether execution listeners should be invoked during
       * migration.
       */
      skipCustomListeners?: boolean | null
      /**
       * @description A boolean value to control whether input/output mappings should be executed during
       * migration.
       */
      skipIoMappings?: boolean | null
    }
    MigrationInstructionDto: {
      /** @description The activity ids from the source process definition being mapped. */
      sourceActivityIds?: string[] | null
      /** @description The activity ids from the target process definition being mapped. */
      targetActivityIds?: string[] | null
      /** @description Configuration flag whether event triggers defined are going to be updated during migration. */
      updateEventTrigger?: boolean | null
    }
    MigrationInstructionValidationReportDto: {
      instruction?: components['schemas']['MigrationInstructionDto']
      /** @description A list of instruction validation report messages. */
      failures?: string[] | null
    }
    MigrationPlanDto: {
      /** @description The id of the source process definition for the migration. */
      sourceProcessDefinitionId?: string | null
      /** @description The id of the target process definition for the migration. */
      targetProcessDefinitionId?: string | null
      /**
       * @description A list of migration instructions which map equal activities. Each
       * migration instruction is a JSON object with the following properties:
       */
      instructions?: components['schemas']['MigrationInstructionDto'][] | null
      /**
       * @description A map of variables which will be set into the process instances' scope.
       * Each key is a variable name and each value a JSON variable value object.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    MigrationPlanGenerationDto: {
      /** @description The id of the source process definition for the migration. */
      sourceProcessDefinitionId?: string | null
      /** @description The id of the target process definition for the migration. */
      targetProcessDefinitionId?: string | null
      /**
       * @description A boolean flag indicating whether instructions between events should be configured
       * to update the event triggers.
       */
      updateEventTriggers?: boolean | null
      /**
       * @description A map of variables which will be set into the process instances' scope.
       * Each key is a variable name and each value a JSON variable value object.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    MigrationPlanReportDto: {
      /**
       * @description The list of instruction validation reports. If no validation
       * errors are detected it is an empty list.
       */
      instructionReports?: components['schemas']['MigrationInstructionValidationReportDto'][] | null
      /**
       * @description A map of variable reports.
       * Each key is a variable name and each value a JSON object consisting of the variable's type, value,
       * value info object and a list of failures.
       */
      variableReports?: {
        [key: string]: components['schemas']['MigrationVariableValidationReportDto']
      } | null
    }
    MigrationVariableValidationReportDto: {
      /** @description A list of variable validation report messages. */
      failures?: string[] | null
    } & components['schemas']['VariableValueDto']
    MissingAuthorizationDto: {
      /** @description The permission name that the user is missing. */
      permissionName?: string | null
      /** @description The name of the resource that the user is missing permission for. */
      resourceName?: string | null
      /** @description The id of the resource that the user is missing permission for. */
      resourceId?: string | null
    }
    ModificationDto: {
      /** @description The id of the process definition for the modification */
      processDefinitionId?: string | null
      /**
       * @description Skip execution listener invocation for activities that are started or ended as part
       * of this request.
       */
      skipCustomListeners?: boolean | null
      /**
       * @description Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#input-output-variable-mapping) for
       * activities that are started or ended as part of this request.
       */
      skipIoMappings?: boolean | null
      /** @description A list of process instance ids to modify. */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      /** @description An array of modification instructions. The instructions are executed in the order they are in. */
      instructions?:
        | components['schemas']['MultipleProcessInstanceModificationInstructionDto'][]
        | null
      /** @description An arbitrary text annotation set by a user for auditing reasons. */
      annotation?: string | null
    }
    MultiFormAttachmentDto: {
      /** @description The name of the attachment. */
      'attachment-name'?: string | null
      /** @description The description of the attachment. */
      'attachment-description'?: string | null
      /** @description The type of the attachment. */
      'attachment-type'?: string | null
      /** @description The url to the remote content of the attachment. */
      url?: string | null
      /**
       * Format: binary
       * @description The content of the attachment.
       */
      content?: string | null
    }
    MultiFormDeploymentDto: {
      /** @description The tenant id for the deployment to be created. */
      'tenant-id'?: string | null
      /** @description The source for the deployment to be created. */
      'deployment-source'?: string | null
      /**
       * @description A flag indicating whether the process engine should perform duplicate checking on a per-resource basis.
       * If set to true, only those resources that have actually changed are deployed.
       * Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources.
       * If set to true, the option enable-duplicate-filtering is overridden and set to true.
       * @default false
       */
      'deploy-changed-only'?: boolean | null
      /**
       * @description A flag indicating whether the process engine should perform duplicate checking for the deployment or not.
       * This allows you to check if a deployment with the same name and the same resouces already exists and
       * if true, not create a new deployment but instead return the existing deployment. The default value is false.
       * @default false
       */
      'enable-duplicate-filtering'?: boolean | null
      /** @description The name for the deployment to be created. */
      'deployment-name'?: string | null
      /**
       * Format: date-time
       * @description Sets the date on which the process definitions contained in this deployment will be activated. This means that all process
       * definitions will be deployed as usual, but they will be suspended from the start until the given activation date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      'deployment-activation-time'?: string | null
      /**
       * Format: binary
       * @description The binary data to create the deployment resource.
       * It is possible to have more than one form part with different form part names for the binary data to create a deployment.
       */
      data?: string | null
    }
    MultiFormVariableBinaryDto: {
      /**
       * Format: binary
       * @description The binary data to be set.
       * For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set
       * Only the filename is mandatory.
       */
      data?: string | null
      /**
       * @description The name of the variable type. Either Bytes for a byte array variable or File for a file variable.
       * @enum {string|null}
       */
      valueType?: 'Bytes' | 'File' | null
    }
    MultipleProcessInstanceModificationInstructionDto: {
      /**
       * @description **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.
       *
       * * A cancel instruction requests cancellation of a single activity instance or all instances of one activity.
       * * A startBeforeActivity instruction requests to enter a given activity.
       * * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.
       * * A startTransition instruction requests to execute a specific sequence flow.
       * @enum {string}
       */
      type: 'cancel' | 'startBeforeActivity' | 'startAfterActivity' | 'startTransition'
      /** @description Can be used with instructions of types `startTransition`. Specifies the sequence flow to start. */
      activityId?: string | null
      /** @description Can be used with instructions of types `startTransition`. Specifies the sequence flow to start. */
      transitionId?: string | null
      /** @description Can be used with instructions of type cancel. Prevents the deletion of new created activity instances. */
      cancelCurrentActiveActivityInstances?: boolean | null
    }
    ParseExceptionDto: {
      /** @description A JSON Object containing list of errors and warnings occurred during deployment. */
      details?: {
        [key: string]: components['schemas']['ResourceReportDto']
      } | null
    } & components['schemas']['ExceptionDto']
    PasswordPolicyDto: {
      /** @description An array of password policy rules. Each element of the array is representing one rule of the policy. */
      rules?: components['schemas']['PasswordPolicyRuleDto'][] | null
    }
    PasswordPolicyRequestDto: {
      /** @description The candidate password to be check against the password policy. */
      password?: string | null
      profile?: components['schemas']['UserProfileDto']
    }
    /** @description Describes a rule of a password policy. */
    PasswordPolicyRuleDto: {
      /** @description A placeholder string that contains the name of a password policy rule. */
      placeholder?: string | null
      /** @description A map that describes the characteristics of a password policy rule, such as the minimum number of digits. */
      parameter?: {
        [key: string]: string
      }
    }
    PatchVariablesDto: {
      /** @description A JSON object containing variable key-value pairs. */
      modifications?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /** @description An array of String keys of variables to be deleted. */
      deletions?: string[] | null
    }
    PriorityDto: {
      /**
       * Format: int64
       * @description The priority of the resource.
       */
      priority?: number | null
    }
    ProblemDto: {
      /** @description The message of the problem. */
      message?: string | null
      /**
       * Format: int32
       * @description The line where the problem occurred.
       */
      line?: number | null
      /**
       * Format: int32
       * @description The column where the problem occurred.
       */
      column?: number | null
      /** @description The main element id where the problem occurred. */
      mainElementId?: string | null
      /** @description A list of element id affected by the problem. */
      elementIds?: string[] | null
    }
    ProcessDefinitionDiagramDto: {
      /** @description The id of the process definition. */
      id?: string | null
      /**
       * @description An escaped XML string containing the XML that this definition was deployed with.
       * Carriage returns, line feeds and quotation marks are escaped.
       */
      bpmn20Xml?: string | null
    }
    ProcessDefinitionDto: {
      /** @description The id of the process definition */
      id?: string | null
      /** @description The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition. */
      key?: string | null
      /** @description The category of the process definition. */
      category?: string | null
      /** @description The description of the process definition. */
      description?: string | null
      /** @description The name of the process definition. */
      name?: string | null
      /**
       * Format: int32
       * @description The version of the process definition that the engine assigned to it.
       */
      version?: number | null
      /** @description The file name of the process definition. */
      resource?: string | null
      /** @description The deployment id of the process definition. */
      deploymentId?: string | null
      /** @description The file name of the process definition diagram, if it exists. */
      diagram?: string | null
      /** @description A flag indicating whether the definition is suspended or not. */
      suspended?: boolean | null
      /** @description The tenant id of the process definition. */
      tenantId?: string | null
      /** @description The version tag of the process definition. */
      versionTag?: string | null
      /**
       * Format: int32
       * @description History time to live value of the process definition.
       * Is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
       */
      historyTimeToLive?: number | null
      /** @description A flag indicating whether the process definition is startable in Tasklist or not. */
      startableInTasklist?: boolean | null
    }
    ProcessDefinitionStatisticsResultDto: {
      /** @description The id of the process definition the results are aggregated for. */
      id?: string | null
      /**
       * Format: int32
       * @description The total number of running process instances of this process definition.
       */
      instances?: number
      /**
       * Format: int32
       * @description The total number of failed jobs for the running instances.
       * **Note**: Will be `0` (not `null`), if failed jobs were excluded.
       */
      failedJobs?: number
      /**
       * @description Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.
       * **Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.
       * Furthermore, the array will be also empty if no incidents were found.
       */
      incidents?: components['schemas']['IncidentStatisticsResultDto'][] | null
      /**
       * @description The fully qualified class name of the data transfer object class.
       * The class name might change in future releases.
       */
      '@class'?: string | null
      definition?: components['schemas']['ProcessDefinitionDto']
    }
    ProcessDefinitionSuspensionStateDto: {
      /**
       * @description A `Boolean` value which indicates whether to activate or suspend all process definitions with the given key.
       * When the value is set to `true`, all process definitions with the given key will be suspended and
       * when the value is set to `false`, all process definitions with the given key will be activated.
       */
      suspended?: boolean | null
      /** @description The id of the process definitions to activate or suspend. */
      processDefinitionId?: string | null
      /** @description The key of the process definitions to activate or suspend. */
      processDefinitionKey?: string | null
      /**
       * @description A `Boolean` value which indicates whether to activate or suspend also all process instances of
       * the process definitions with the given key.
       * When the value is set to `true`, all process instances of the process definitions with the given key
       * will be activated or suspended and when the value is set to `false`, the suspension state of
       * all process instances of the process definitions with the given key will not be updated.
       */
      includeProcessInstances?: boolean | null
      /**
       * Format: date-time
       * @description The date on which all process definitions with the given key will be activated or suspended.
       * If `null`, the suspension state of all process definitions with the given key is updated immediately.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
       * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
       */
      executionDate?: string | null
    }
    ProcessEngineDto: {
      /** @description The name of the process engine. */
      name?: string | null
    }
    ProcessInstanceDto: {
      /** @description The id of the process instance. */
      id?: string | null
      /** @description The id of the process definition that this process instance belongs to. */
      definitionId?: string | null
      /** @description The business key of the process instance. */
      businessKey?: string | null
      /** @description The id of the case instance associated with the process instance. */
      caseInstanceId?: string | null
      /**
       * @deprecated
       * @description A flag indicating whether the process instance has ended or not. Deprecated: will always be false!
       */
      ended?: boolean | null
      /** @description A flag indicating whether the process instance is suspended or not. */
      suspended?: boolean | null
      /** @description The tenant id of the process instance. */
      tenantId?: string | null
    } & components['schemas']['LinkableDto']
    ProcessInstanceModificationDto: {
      /** @description Skip execution listener invocation for activities that are started or ended as part of this request. */
      skipCustomListeners?: boolean | null
      /**
       * @description Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#input-output-variable-mapping)
       * for activities that are started or ended as part of this request.
       */
      skipIoMappings?: boolean | null
      /** @description JSON array of modification instructions. The instructions are executed in the order they are in. */
      instructions?: components['schemas']['ProcessInstanceModificationInstructionDto'][] | null
      /** @description An arbitrary text annotation set by a user for auditing reasons. */
      annotation?: string | null
    }
    ProcessInstanceModificationInstructionDto: {
      /**
       * @description **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.
       *
       * * A cancel instruction requests cancellation of a single activity instance or all instances of one activity.
       * * A startBeforeActivity instruction requests to enter a given activity.
       * * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.
       * * A startTransition instruction requests to execute a specific sequence flow.
       * @enum {string}
       */
      type: 'cancel' | 'startBeforeActivity' | 'startAfterActivity' | 'startTransition'
      variables?: components['schemas']['TriggerVariableValueDto']
      /** @description Can be used with instructions of types `startTransition`. Specifies the sequence flow to start. */
      activityId?: string | null
      /** @description Can be used with instructions of types `startTransition`. Specifies the sequence flow to start. */
      transitionId?: string | null
      /**
       * @description Can be used with instructions of type `cancel`. Specifies the activity instance to cancel.
       * Valid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.20/reference/rest/process-instance/get-activity-instances/).
       */
      activityInstanceId?: string | null
      /**
       * @description Can be used with instructions of type `cancel`. Specifies the transition instance to cancel.
       * Valid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.20/reference/rest/process-instance/get-activity-instances/).
       */
      transitionInstanceId?: string | null
      /**
       * @description Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`.
       * Valid values are the activity instance IDs supplied by the Get Activity Instance request.
       * If there are multiple parent activity instances of the targeted activity,
       * this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.
       *
       * Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started,
       * this parameter allows to specifiy under which subprocess instance the activity should be started.
       */
      ancestorActivityInstanceId?: string | null
      /** @description Can be used with instructions of type cancel. Prevents the deletion of new created activity instances. */
      cancelCurrentActiveActivityInstances?: boolean | null
    }
    /** @description A process instance query which defines a group of process instances */
    ProcessInstanceQueryDto: {
      /** @description Filter by the deployment the id belongs to. */
      deploymentId?: string | null
      /** @description Filter by the process definition the instances run on. */
      processDefinitionId?: string | null
      /** @description Filter by the key of the process definition the instances run on. */
      processDefinitionKey?: string | null
      /**
       * @description Filter by a list of process definition keys.
       * A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
       */
      processDefinitionKeyIn?: string[] | null
      /**
       * @description Exclude instances by a list of process definition keys.
       * A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
       */
      processDefinitionKeyNotIn?: string[] | null
      /** @description Filter by process instance business key. */
      businessKey?: string | null
      /** @description Filter by process instance business key that the parameter is a substring of. */
      businessKeyLike?: string | null
      /** @description Filter by case instance id. */
      caseInstanceId?: string | null
      /**
       * @description Restrict query to all process instances that are sub process instances of the given process instance.
       * Takes a process instance id.
       */
      superProcessInstance?: string | null
      /**
       * @description Restrict query to all process instances that have the given process instance as a sub process instance.
       * Takes a process instance id.
       */
      subProcessInstance?: string | null
      /**
       * @description Restrict query to all process instances that are sub process instances of the given case instance.
       * Takes a case instance id.
       */
      superCaseInstance?: string | null
      /**
       * @description Restrict query to all process instances that have the given case instance as a sub case instance.
       * Takes a case instance id.
       */
      subCaseInstance?: string | null
      /** @description Only include active process instances. Value may only be true, as false is the default behavior. */
      active?: boolean | null
      /** @description Only include suspended process instances. Value may only be true, as false is the default behavior. */
      suspended?: boolean | null
      /** @description Filter by a list of process instance ids. Must be a JSON array of Strings. */
      processInstanceIds?: string[] | null
      /** @description Filter by presence of incidents. Selects only process instances that have an incident. */
      withIncident?: boolean | null
      /** @description Filter by the incident id. */
      incidentId?: string | null
      /** @description Filter by the incident type. See the User Guide for a list of incident types. */
      incidentType?: string | null
      /** @description Filter by the incident message. Exact match. */
      incidentMessage?: string | null
      /** @description Filter by the incident message that the parameter is a substring of. */
      incidentMessageLike?: string | null
      /**
       * @description Filter by a list of tenant ids. A process instance must have one of the given tenant ids.
       * Must be a JSON array of Strings.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include process instances which belong to no tenant.
       * Value may only be true, as false is the default behavior.
       */
      withoutTenantId?: boolean | null
      /** @description Only include process instances which process definition has no tenant id. */
      processDefinitionWithoutTenantId?: boolean | null
      /**
       * @description Filter by a list of activity ids.
       * A process instance must currently wait in a leaf activity with one of the given activity ids.
       */
      activityIdIn?: string[] | null
      /** @description Restrict the query to all process instances that are top level process instances. */
      rootProcessInstances?: boolean | null
      /** @description Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances) */
      leafProcessInstances?: boolean | null
      /**
       * @description A JSON array to only include process instances that have variables with certain values.
       * The array consists of objects with the three properties `name`, `operator` and `value`.
       * `name` (String) is the variable name,
       * `operator` (String) is the comparison operator to be used and `value` the variable value.
       * The `value` may be String, Number or Boolean.
       *
       * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than;
       * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
       */
      variables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Match all variable names in this query case-insensitively.
       * If set to true variableName and variablename are treated as equal.
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match all variable values in this query case-insensitively.
       * If set to true variableValue and variablevalue are treated as equal.
       */
      variableValuesIgnoreCase?: boolean | null
      /**
       * @description A JSON array of nested process instance queries with OR semantics.
       * A process instance matches a nested query if it fulfills at least one of the query's predicates.
       * With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form).
       * All process instance query properties can be used except for: `sorting`
       * See the [User guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
       */
      orQueries?: components['schemas']['ProcessInstanceQueryDto'][] | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'instanceId'
              | 'definitionId'
              | 'definitionKey'
              | 'businessKey'
              | 'tenantId'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    ProcessInstanceSuspensionStateAsyncDto: {
      /**
       * @description A list of process instance ids which defines a group of process instances
       * which will be activated or suspended by the operation.
       */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
    } & components['schemas']['SuspensionStateDto']
    ProcessInstanceSuspensionStateDto: {
      /**
       * @description The process definition id of the process instances to activate or suspend.
       *
       * **Note**: This parameter can be used only with combination of `suspended`.
       */
      processDefinitionId?: string | null
      /**
       * @description The process definition key of the process instances to activate or suspend.
       *
       * **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
       */
      processDefinitionKey?: string | null
      /**
       * @description Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.
       *
       * **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
       */
      processDefinitionTenantId?: string | null
      /**
       * @description Only activate or suspend process instances of a process definition which belongs to no tenant.
       * Value may only be true, as false is the default behavior.
       *
       * **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
       */
      processDefinitionWithoutTenantId?: boolean | null
      /**
       * @description A list of process instance ids which defines a group of process instances
       * which will be activated or suspended by the operation.
       *
       * **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
       */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
    } & components['schemas']['SuspensionStateDto']
    ProcessInstanceWithVariablesDto: {
      /** @description The id of the process instance. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    } & components['schemas']['ProcessInstanceDto']
    /**
     * RedeploymentDto
     * @description A JSON object with the following properties:
     */
    RedeploymentDto: {
      /** @description A list of deployment resource ids to re-deploy. */
      resourceIds?: string[] | null
      /** @description A list of deployment resource names to re-deploy. */
      resourceNames?: string[] | null
      /** @description Sets the source of the deployment. */
      source?: string | null
    }
    ResourceOptionsDto: Record<string, never> & components['schemas']['LinkableDto']
    ResourceReportDto: {
      /** @description A list of errors occurred during parsing. */
      errors?: components['schemas']['ProblemDto'][] | null
      /** @description A list of warnings occurred during parsing. */
      warnings?: components['schemas']['ProblemDto'][] | null
    }
    RestartProcessInstanceDto: {
      /** @description A list of process instance ids to restart. */
      processInstanceIds?: string[] | null
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
      /** @description Skip execution listener invocation for activities that are started as part of this request. */
      skipCustomListeners?: boolean | null
      /**
       * @description Skip execution of
       * [input/output variable mappings](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#input-output-variable-mapping)
       * for activities that are started as part of this request.
       */
      skipIoMappings?: boolean | null
      /** @description Set the initial set of variables during restart. By default, the last set of variables is used. */
      initialVariables?: boolean | null
      /** @description Do not take over the business key of the historic process instance. */
      withoutBusinessKey?: boolean | null
      /**
       * @description **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
       * If this property is omitted, the process instance starts at its default blank start event.
       */
      instructions?:
        | components['schemas']['RestartProcessInstanceModificationInstructionDto'][]
        | null
    }
    RestartProcessInstanceModificationInstructionDto: {
      /**
       * @description **Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.
       *
       * * A `startBeforeActivity` instruction requests to enter a given activity.
       * * A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity.
       * * A `startTransition` instruction requests to execute a specific sequence flow.
       * @enum {string}
       */
      type: 'startBeforeActivity' | 'startAfterActivity' | 'startTransition'
      /**
       * @description **Can be used with instructions of types** `startBeforeActivity`
       * and `startAfterActivity`. Specifies the sequence flow to start.
       */
      activityId?: string | null
      /**
       * @description **Can be used with instructions of types** `startTransition`.
       * Specifies the sequence flow to start.
       */
      transitionId?: string | null
    }
    RetriesDto: {
      /**
       * Format: int32
       * @description The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created
       * and the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again.
       * Can not be null.
       */
      retries?: number | null
    }
    SchemaLogEntryDto: {
      /** @description The id of the schema log entry. */
      id?: string | null
      /**
       * Format: date-time
       * @description The date and time of the schema update.
       */
      timestamp?: string | null
      /** @description The version of the schema. */
      version?: string | null
    }
    SchemaLogQueryDto: {
      /** @description The version of the schema. */
      version?: string | null
      /**
       * @description A JSON array of criteria to sort the result by. Each element of the array is
       *                       a JSON object that specifies one ordering. The position in the array
       *                       identifies the rank of an ordering, i.e., whether it is primary, secondary,
       *                       etc.
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'timestamp' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    SetJobRetriesByProcessDto: {
      /** @description A list of process instance ids to fetch jobs, for which retries will be set. */
      processInstances?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
    } & components['schemas']['SetJobRetriesDto']
    SetJobRetriesDto: {
      /** @description A list of job ids to set retries for. */
      jobIds?: string[] | null
      jobQuery?: components['schemas']['JobQueryDto']
    } & components['schemas']['JobRetriesDto']
    SetRemovalTimeToHistoricBatchesDto: {
      /** @description Query for the historic batches to set the removal time for. */
      historicBatchQuery?: Record<string, unknown> | null
      /** @description The ids of the historic batches to set the removal time for. */
      historicBatchIds?: string[] | null
    } & components['schemas']['AbstractSetRemovalTimeDto']
    SetRemovalTimeToHistoricDecisionInstancesDto: {
      /**
       * @description Sets the removal time to all historic decision instances in the hierarchy.
       * Value may only be `true`, as `false` is the default behavior.
       */
      hierarchical?: boolean | null
      historicDecisionInstanceQuery?: components['schemas']['HistoricDecisionInstanceQueryDto']
      /** @description The ids of the historic decision instances to set the removal time for. */
      historicDecisionInstanceIds?: string[] | null
    } & components['schemas']['AbstractSetRemovalTimeDto']
    SetRemovalTimeToHistoricProcessInstancesDto: {
      /** @description The id of the process instance. */
      historicProcessInstanceIds?: string[] | null
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
      /**
       * @description Sets the removal time to all historic process instances in the hierarchy.
       * Value may only be `true`, as `false` is the default behavior.
       */
      hierarchical?: boolean | null
      /**
       * @description Handles removal time updates in chunks, taking into account the defined size in
       * `removalTimeUpdateChunkSize` in the process engine configuration. The size of the
       * chunks can also be overridden per call with the `updateChunkSize` parameter.
       * Enabling this option can lead to multiple executions of the resulting jobs, preventing
       * the database transaction from timing out by limiting the number of rows to update.
       * Value may only be `true`, as `false` is the default behavior.
       */
      updateInChunks?: boolean | null
      /**
       * Format: int32
       * @description Defines the size of the chunks in which removal time updates are processed.
       * The value must be a positive integer between `1` and `500`. This only has an
       * effect if `updateInChunks` is set to `true`. If undefined, the operation uses the
       * `removalTimeUpdateChunkSize` defined in the process engine configuration.
       */
      updateChunkSize?: number | null
    } & components['schemas']['AbstractSetRemovalTimeDto']
    SetRetriesForExternalTasksDto: {
      /**
       * Format: int32
       * @description The number of retries to set for the external task.  Must be >= 0. If this is 0, an incident is created
       * and the task cannot be fetched anymore unless the retries are increased again. Can not be null.
       */
      retries?: number | null
      /** @description The ids of the external tasks to set the number of retries for. */
      externalTaskIds?: string[] | null
      /** @description The ids of process instances containing the tasks to set the number of retries for. */
      processInstanceIds?: string[] | null
      externalTaskQuery?: components['schemas']['ExternalTaskQueryDto']
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
    }
    SetVariablesAsyncDto: {
      /**
       * @description A list of process instance ids that define a group of process instances
       * to which the operation will set variables.
       *
       * Please note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`
       * are defined, the resulting operation will be performed on the union of these sets.
       */
      processInstanceIds?: string[] | null
      processInstanceQuery?: components['schemas']['ProcessInstanceQueryDto']
      historicProcessInstanceQuery?: components['schemas']['HistoricProcessInstanceQueryDto']
      /** @description A variables the operation will set in the root scope of the process instances. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    SignalDto: {
      /**
       * @description The name of the signal to deliver.
       *
       * **Note**: This property is mandatory.
       */
      name?: string
      /**
       * @description Optionally specifies a single execution which is notified by the signal.
       *
       * **Note**: If no execution id is defined the signal is broadcasted to all subscribed
       * handlers.
       */
      executionId?: string | null
      /**
       * @description A JSON object containing variable key-value pairs. Each key is a variable name and
       * each value a JSON variable value object.
       */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description Specifies a tenant to deliver the signal. The signal can only be received on
       * executions or process definitions which belongs to the given tenant.
       *
       * **Note**: Cannot be used in combination with executionId.
       */
      tenantId?: string | null
      /**
       * @description If true the signal can only be received on executions or process definitions which
       * belongs to no tenant. Value may not be false as this is the default behavior.
       *
       * **Note**: Cannot be used in combination with `executionId`.
       */
      withoutTenantId?: boolean | null
    }
    /**
     * @description Mandatory when `sortBy` is one of the following values: `processVariable`, `executionVariable`,
     * `taskVariable`, `caseExecutionVariable` or `caseInstanceVariable`. Must be a JSON object with the properties
     * `variable` and `type` where `variable` is a variable name and `type` is the name of a variable value type.
     */
    SortTaskQueryParametersDto: {
      /** @description The name of the variable to sort by. */
      variable?: string | null
      /** @description The name of the type of the variable value. */
      type?: string | null
    }
    StartProcessInstanceDto: {
      /** @description The business key of the process instance. */
      businessKey?: string | null
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /** @description The case instance id the process instance is to be initialized with. */
      caseInstanceId?: string | null
      /**
       * @description **Optional**. A JSON array of instructions that specify which activities to start the process instance at.
       * If this property is omitted, the process instance starts at its default blank start event.
       */
      startInstructions?:
        | components['schemas']['ProcessInstanceModificationInstructionDto'][]
        | null
      /**
       * @description Skip execution listener invocation for activities that are started or ended as part of this request.
       * **Note**: This option is currently only respected when start instructions are submitted
       * via the `startInstructions` property.
       */
      skipCustomListeners?: boolean | null
      /**
       * @description Skip execution of
       * [input/output variable mappings](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#input-output-variable-mapping)
       * for activities that are started or ended as part of this request.
       * **Note**: This option is currently only respected when start instructions are submitted
       * via the `startInstructions` property.
       */
      skipIoMappings?: boolean | null
      /**
       * @description Indicates if the variables, which was used by the process instance during execution, should be returned.
       * Default value: `false`
       */
      withVariablesInReturn?: boolean | null
    }
    StartProcessInstanceFormDto: {
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
      /**
       * @description The business key the process instance is to be initialized with.
       * The business key uniquely identifies the process instance in the context of the given process definition.
       */
      businessKey?: string | null
    }
    SuspensionStateDto: {
      /**
       * @description A Boolean value which indicates whether to activate or suspend a given instance
       * (e.g. process instance, job, job definition, or batch). When the value is set to true,
       * the given instance will be suspended and when the value is set to false,
       * the given instance will be activated.
       */
      suspended?: boolean | null
    }
    TaskBpmnErrorDto: {
      /**
       * @description An error code that indicates the predefined error. It is used to identify the BPMN
       * error handler.
       */
      errorCode?: string | null
      /** @description An error message that describes the error. */
      errorMessage?: string | null
      /** @description A JSON object containing variable key-value pairs. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    TaskCountByCandidateGroupResultDto: {
      /** @description The name of the candidate group. If there are tasks without a group name, the value will be `null` */
      groupName?: string | null
      /**
       * Format: int32
       * @description The number of tasks which have the group name as candidate group.
       */
      taskCount?: number | null
    }
    TaskDto: {
      /** @description The task id. */
      id?: string | null
      /** @description The task name. */
      name?: string | null
      /** @description The assignee's id. */
      assignee?: string | null
      /** @description The owner's id. */
      owner?: string | null
      /**
       * Format: date-time
       * @description The date the task was created on.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      created?: string | null
      /**
       * Format: date-time
       * @description The date the task was last updated. Every action that fires a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) will update this property.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      lastUpdated?: string | null
      /**
       * Format: date-time
       * @description The task's due date.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      due?: string | null
      /**
       * Format: date-time
       * @description The follow-up date for the task.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      followUp?: string | null
      /**
       * @description The task's delegation state. Possible values are `PENDING` and `RESOLVED`.
       * @enum {string|null}
       */
      delegationState?: 'PENDING' | 'RESOLVED' | null
      /** @description The task's description. */
      description?: string | null
      /** @description The id of the execution the task belongs to. */
      executionId?: string | null
      /** @description The id the parent task, if this task is a subtask. */
      parentTaskId?: string | null
      /**
       * Format: int32
       * @description The task's priority.
       */
      priority?: number | null
      /** @description The id of the process definition the task belongs to. */
      processDefinitionId?: string | null
      /** @description The id of the process instance the task belongs to. */
      processInstanceId?: string | null
      /** @description The id of the case execution the task belongs to. */
      caseExecutionId?: string | null
      /** @description The id of the case definition the task belongs to. */
      caseDefinitionId?: string | null
      /** @description The id of the case instance the task belongs to. */
      caseInstanceId?: string | null
      /** @description The task's key. */
      taskDefinitionKey?: string | null
      /** @description Whether the task belongs to a process instance that is suspended. */
      suspended?: boolean | null
      /** @description If not `null`, the form key for the task. */
      formKey?: string | null
      camundaFormRef?: components['schemas']['CamundaFormRef']
      /** @description If not `null`, the tenant id of the task. */
      tenantId?: string | null
    }
    TaskEscalationDto: {
      /**
       * @description An escalation code that indicates the predefined escalation. It is used to identify
       * the BPMN escalation handler.
       */
      escalationCode?: string | null
      /** @description A JSON object containing variable key-value pairs. */
      variables?: {
        [key: string]: components['schemas']['VariableValueDto']
      } | null
    }
    /** @description A Task query which defines a group of Tasks. */
    TaskQueryDto: {
      /** @description Restrict to task with the given id. */
      taskId?: string | null
      /** @description Restrict to tasks with any of the given ids. */
      taskIdIn?: string[] | null
      /** @description Restrict to tasks that belong to process instances with the given id. */
      processInstanceId?: string | null
      /** @description Restrict to tasks that belong to process instances with the given ids. */
      processInstanceIdIn?: string[] | null
      /** @description Restrict to tasks that belong to process instances with the given business key. */
      processInstanceBusinessKey?: string | null
      /**
       * @description Restrict to tasks that belong to process instances with the given business key which
       * is described by an expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      processInstanceBusinessKeyExpression?: string | null
      /**
       * @description Restrict to tasks that belong to process instances with one of the give business keys.
       * The keys need to be in a comma-separated list.
       */
      processInstanceBusinessKeyIn?: string[] | null
      /**
       * @description Restrict to tasks that have a process instance business key that has the parameter
       * value as a substring.
       */
      processInstanceBusinessKeyLike?: string | null
      /**
       * @description Restrict to tasks that have a process instance business key that has the parameter
       * value as a substring and is described by an expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      processInstanceBusinessKeyLikeExpression?: string | null
      /** @description Restrict to tasks that belong to a process definition with the given id. */
      processDefinitionId?: string | null
      /** @description Restrict to tasks that belong to a process definition with the given key. */
      processDefinitionKey?: string | null
      /**
       * @description Restrict to tasks that belong to a process definition with one of the given keys. The
       * keys need to be in a comma-separated list.
       */
      processDefinitionKeyIn?: string[] | null
      /** @description Restrict to tasks that belong to a process definition with the given name. */
      processDefinitionName?: string | null
      /**
       * @description Restrict to tasks that have a process definition name that has the parameter value as
       * a substring.
       */
      processDefinitionNameLike?: string | null
      /** @description Restrict to tasks that belong to an execution with the given id. */
      executionId?: string | null
      /** @description Restrict to tasks that belong to case instances with the given id. */
      caseInstanceId?: string | null
      /** @description Restrict to tasks that belong to case instances with the given business key. */
      caseInstanceBusinessKey?: string | null
      /**
       * @description Restrict to tasks that have a case instance business key that has the parameter value
       * as a substring.
       */
      caseInstanceBusinessKeyLike?: string | null
      /** @description Restrict to tasks that belong to a case definition with the given id. */
      caseDefinitionId?: string | null
      /** @description Restrict to tasks that belong to a case definition with the given key. */
      caseDefinitionKey?: string | null
      /** @description Restrict to tasks that belong to a case definition with the given name. */
      caseDefinitionName?: string | null
      /**
       * @description Restrict to tasks that have a case definition name that has the parameter value as a
       * substring.
       */
      caseDefinitionNameLike?: string | null
      /** @description Restrict to tasks that belong to a case execution with the given id. */
      caseExecutionId?: string | null
      /**
       * @description Only include tasks which belong to one of the passed and comma-separated activity
       * instance ids.
       */
      activityInstanceIdIn?: string[] | null
      /**
       * @description Only include tasks which belong to one of the passed and comma-separated
       * tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description Only include tasks which belong to no tenant. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withoutTenantId?: boolean | null
      /** @description Restrict to tasks that the given user is assigned to. */
      assignee?: string | null
      /**
       * @description Restrict to tasks that the user described by the given expression is assigned to. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      assigneeExpression?: string | null
      /**
       * @description Restrict to tasks that have an assignee that has the parameter
       * value as a substring.
       */
      assigneeLike?: string | null
      /**
       * @description Restrict to tasks that have an assignee that has the parameter value described by the
       * given expression as a substring. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      assigneeLikeExpression?: string | null
      /** @description Only include tasks which are assigned to one of the passed and comma-separated user ids. */
      assigneeIn?: string[] | null
      /** @description Only include tasks which are not assigned to one of the passed and comma-separated user ids. */
      assigneeNotIn?: string[] | null
      /** @description Restrict to tasks that the given user owns. */
      owner?: string | null
      /**
       * @description Restrict to tasks that the user described by the given expression owns. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      ownerExpression?: string | null
      /** @description Only include tasks that are offered to the given group. */
      candidateGroup?: string | null
      /**
       * @description Only include tasks that are offered to the group described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      candidateGroupExpression?: string | null
      /** @description Only include tasks that are offered to the given user or to one of his groups. */
      candidateUser?: string | null
      /**
       * @description Only include tasks that are offered to the user described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      candidateUserExpression?: string | null
      /**
       * @description Also include tasks that are assigned to users in candidate queries. Default is to only
       * include tasks that are not assigned to any user if you query by candidate user or
       * group(s).
       * @default false
       */
      includeAssignedTasks?: boolean | null
      /**
       * @description Only include tasks that the given user is involved in. A user is involved in a task if
       * an identity link exists between task and user (e.g., the user is the assignee).
       */
      involvedUser?: string | null
      /**
       * @description Only include tasks that the user described by the given expression is involved in.
       * A user is involved in a task if an identity link exists between task and user
       * (e.g., the user is the assignee). See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions.
       */
      involvedUserExpression?: string | null
      /**
       * @description If set to `true`, restricts the query to all tasks that are assigned.
       * @default false
       */
      assigned?: boolean | null
      /**
       * @description If set to `true`, restricts the query to all tasks that are unassigned.
       * @default false
       */
      unassigned?: boolean | null
      /** @description Restrict to tasks that have the given key. */
      taskDefinitionKey?: string | null
      /** @description Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list. */
      taskDefinitionKeyIn?: string[] | null
      /** @description Restrict to tasks that have a key that has the parameter value as a substring. */
      taskDefinitionKeyLike?: string | null
      /** @description Restrict to tasks that have the given name. */
      name?: string | null
      /** @description Restrict to tasks that do not have the given name. */
      nameNotEqual?: string | null
      /** @description Restrict to tasks that have a name with the given parameter value as substring. */
      nameLike?: string | null
      /**
       * @description Restrict to tasks that do not have a name with the given parameter
       * value as substring.
       */
      nameNotLike?: string | null
      /** @description Restrict to tasks that have the given description. */
      description?: string | null
      /**
       * @description Restrict to tasks that have a description that has the parameter
       * value as a substring.
       */
      descriptionLike?: string | null
      /**
       * Format: int32
       * @description Restrict to tasks that have the given priority.
       */
      priority?: number | null
      /**
       * Format: int32
       * @description Restrict to tasks that have a lower or equal priority.
       */
      maxPriority?: number | null
      /**
       * Format: int32
       * @description Restrict to tasks that have a higher or equal priority.
       */
      minPriority?: number | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due on the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
       */
      dueDate?: string | null
      /**
       * @description Restrict to tasks that are due on the date described by the given expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      dueDateExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due after the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
       */
      dueAfter?: string | null
      /**
       * @description Restrict to tasks that are due after the date described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      dueAfterExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that are due before the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
       */
      dueBefore?: string | null
      /**
       * @description Restrict to tasks that are due before the date described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      dueBeforeExpression?: string | null
      /**
       * @description Only include tasks which have no due date. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withoutDueDate?: boolean | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have a followUp date on the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
       * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
       */
      followUpDate?: string | null
      /**
       * @description Restrict to tasks that have a followUp date on the date described by the given
       * expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      followUpDateExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have a followUp date after the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
       */
      followUpAfter?: string | null
      /**
       * @description Restrict to tasks that have a followUp date after the date described by the given
       * expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      followUpAfterExpression?: string | null
      /**
       * @description Restrict to tasks that have a followUp date before the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
       */
      followUpBefore?: string | null
      /**
       * @description Restrict to tasks that have a followUp date before the date described by the given
       * expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      followUpBeforeExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that have no followUp date or a followUp date before the given date.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case
       * is to query all `active` tasks for a user for a given date.
       */
      followUpBeforeOrNotExistent?: string | null
      /**
       * @description Restrict to tasks that have no followUp date or a followUp date before the date
       * described by the given expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      followUpBeforeOrNotExistentExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were created on the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
       * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
       */
      createdOn?: string | null
      /**
       * @description Restrict to tasks that were created on the date described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      createdOnExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were created after the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must
       * have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
       */
      createdAfter?: string | null
      /**
       * @description Restrict to tasks that were created after the date described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      createdAfterExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were created before the given date. By
       * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must
       * have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
       */
      createdBefore?: string | null
      /**
       * @description Restrict to tasks that were created before the date described by the given expression.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      createdBeforeExpression?: string | null
      /**
       * Format: date-time
       * @description Restrict to tasks that were updated after the given date. Every action that fires
       * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
       * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must
       * have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
       */
      updatedAfter?: string | null
      /**
       * @description Restrict to tasks that were updated after the date described by the given expression. Every action that fires
       * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
       * See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to a
       * `java.util.Date` or `org.joda.time.DateTime` object.
       */
      updatedAfterExpression?: string | null
      /**
       * @description Restrict to tasks that are in the given delegation state. Valid values are
       * `PENDING` and `RESOLVED`.
       * @enum {string|null}
       */
      delegationState?: 'PENDING' | 'RESOLVED' | null
      /**
       * @description Restrict to tasks that are offered to any of the given candidate groups. Takes a
       * comma-separated list of group names, so for example
       * `developers,support,sales`.
       */
      candidateGroups?: string[] | null
      /**
       * @description Restrict to tasks that are offered to any of the candidate groups described by the
       * given expression. See the
       * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
       * for more information on available functions. The expression must evaluate to
       * `java.util.List` of Strings.
       */
      candidateGroupsExpression?: string | null
      /**
       * @description Only include tasks which have a candidate group. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withCandidateGroups?: boolean | null
      /**
       * @description Only include tasks which have no candidate group. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withoutCandidateGroups?: boolean | null
      /**
       * @description Only include tasks which have a candidate user. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withCandidateUsers?: boolean | null
      /**
       * @description Only include tasks which have no candidate users. Value may only be `true`,
       * as `false` is the default behavior.
       * @default false
       */
      withoutCandidateUsers?: boolean | null
      /**
       * @description Only include active tasks. Value may only be `true`, as `false`
       * is the default behavior.
       * @default false
       */
      active?: boolean | null
      /**
       * @description Only include suspended tasks. Value may only be `true`, as
       * `false` is the default behavior.
       * @default false
       */
      suspended?: boolean | null
      /**
       * @description A JSON array to only include tasks that have variables with certain values. The
       * array consists of JSON objects with three properties `name`, `operator` and `value`.
       * `name` is the variable name, `operator` is the comparison operator to be used and
       * `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.
       *
       * Valid `operator` values are:
       * `eq` - equal to;
       * `neq` - not equal to;
       * `gt` - greater than;
       * `gteq` - greater than or equal to;
       * `lt` - lower than;
       * `lteq` - lower than or equal to;
       * `like`.
       * `key` and `value` may not contain underscore or comma characters.
       */
      taskVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description A JSON array to only include tasks that belong to a process instance with variables
       * with certain values. The array consists of JSON objects with three properties
       * `name`, `operator` and `value`. `name` is the variable name, `operator` is the
       * comparison operator to be used and `value` the variable value. `value` may be of
       * type `String`, `Number` or `Boolean`.
       *
       * Valid `operator` values are:
       * `eq` - equal to;
       * `neq` - not equal to;
       * `gt` - greater than;
       * `gteq` - greater than or equal to;
       * `lt` - lower than;
       * `lteq` - lower than or equal to;
       * `like`;
       * `notLike`.
       * `key` and `value` may not contain underscore or comma characters.
       */
      processVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description A JSON array to only include tasks that belong to a case instance with variables
       * with certain values. The array consists of JSON objects with three properties
       * `name`, `operator` and `value`. `name` is the variable name, `operator` is the
       * comparison operator to be used and `value` the variable value. `value` may be of
       * type `String`, `Number` or `Boolean`.
       *
       * Valid `operator` values are:
       * `eq` - equal to;
       * `neq` - not equal to;
       * `gt` - greater than;
       * `gteq` - greater than or equal to;
       * `lt` - lower than;
       * `lteq` - lower than or equal to;
       * `like`.
       * `key` and `value` may not contain underscore or comma characters.
       */
      caseInstanceVariables?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Match all variable names in this query case-insensitively. If set
       * `variableName` and `variablename` are treated as equal.
       * @default false
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match all variable values in this query case-insensitively. If set
       * `variableValue` and `variablevalue` are treated as equal.
       * @default false
       */
      variableValuesIgnoreCase?: boolean | null
      /** @description Restrict query to all tasks that are sub tasks of the given task. Takes a task id. */
      parentTaskId?: string | null
      /**
       * @description A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills
       * *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).
       *
       * All task query properties can be used except for: `sorting`, `withCandidateGroups`,
       * `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`
       *
       * See the [User guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-engine-api/#or-queries)
       * for more information about OR queries.
       */
      orQueries?: components['schemas']['TaskQueryDto'][] | null
      /** @description Apply sorting of the result */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?:
              | 'instanceId'
              | 'caseInstanceId'
              | 'dueDate'
              | 'executionId'
              | 'caseExecutionId'
              | 'assignee'
              | 'created'
              | 'lastUpdated'
              | 'followUpDate'
              | 'description'
              | 'id'
              | 'name'
              | 'nameCaseInsensitive'
              | 'priority'
              | 'processVariable'
              | 'executionVariable'
              | 'taskVariable'
              | 'caseExecutionVariable'
              | 'caseInstanceVariable'
              | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
            parameters?: components['schemas']['SortTaskQueryParametersDto']
          }[]
        | null
    }
    TelemetryConfigurationDto: {
      /** @description Specifies if the telemetry data should be sent or not. */
      enableTelemetry?: boolean | null
    }
    TelemetryCountDto: {
      /**
       * Format: int64
       * @description An integer value representing the count for this metric.
       */
      count?: number | null
    }
    TelemetryDataDto: {
      /**
       * @description An id which is unique for each installation of Camunda. It is stored once per database so all
       * engines connected to the same database will have the same installation ID.
       * The ID is used to identify a single installation of Camunda Platform.
       */
      installation?: string | null
      product?: components['schemas']['TelemetryProductDto']
    }
    TelemetryInternalsDto: {
      database?: components['schemas']['AbstractVendorVersionInformationDto']
      'application-server'?: components['schemas']['AbstractVendorVersionInformationDto']
      'license-key'?: components['schemas']['TelemetryLicenseKeyDto']
      /** @description List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB). */
      'camunda-integration'?: string[] | null
      /** @description The count of executed commands after the last retrieved data. */
      commands?: {
        [key: string]: components['schemas']['TelemetryCountDto']
      } | null
      /** @description The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements. */
      metrics?: {
        [key: string]: components['schemas']['TelemetryCountDto']
      } | null
      /** @description The webapps enabled in this installation of Camunda. */
      webapps?: string[] | null
      jdk?: components['schemas']['AbstractVendorVersionInformationDto']
      /**
       * Format: date-time
       * @description The date when the engine started to collect dynamic data, such as command executions and metrics. If telemetry sending is enabled, dynamic data resets on sending the data to Camunda.
       * Dynamic data and the date returned by this method are reset in three cases: engine startup, after engine start when sending telemetry data to Camunda is enabled via API, after sending telemetry data to Camunda (only when this was enabled)
       * The date is in the format <code>YYYY-MM-DD'T'HH:mm:ss.SSSZ</code>.
       */
      'data-collection-start-date'?: string
    }
    TelemetryLicenseKeyDto: {
      /** @description The name of the customer the license was issued for. */
      customer?: string | null
      /** @description The license type. */
      type?: string | null
      /**
       * Format: date
       * @description The expiration date of the license.
       */
      'valid-until'?: string | null
      /** @description Flag that indicates if the license is unlimited. */
      unlimited?: boolean | null
      /** @description A map of features included in the license. */
      features?: {
        [key: string]: string
      }
      /** @description The raw license information. */
      raw?: string | null
    }
    TelemetryProductDto: {
      /** @description The name of the product (i.e., Camunda BPM Runtime). */
      name?: string | null
      /** @description The version of the process engine (i.e., 7.X.Y). */
      version?: string | null
      /** @description The edition of the product (i.e., either community or enterprise). */
      edition?: string | null
      internals?: components['schemas']['TelemetryInternalsDto']
    }
    TenantDto: {
      /** @description The id of the tenant. */
      id?: string | null
      /** @description The name of the tenant. */
      name?: string | null
    }
    /** @description A JSON object corresponding to the Activity Instance tree of the given process instance. */
    TransitionInstanceDto: {
      /** @description The id of the transition instance. */
      id?: string | null
      /** @description The id of the parent activity instance, for example a sub process instance. */
      parentActivityInstanceId?: string | null
      /** @description The id of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job) */
      activityId?: string | null
      /** @description The name of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job) */
      activityName?: string | null
      /** @description The type of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job) */
      activityType?: string | null
      /** @description The id of the process instance this instance is part of. */
      processInstanceId?: string | null
      /** @description The id of the process definition. */
      processDefinitionId?: string | null
      /** @description The execution id. */
      executionId?: string | null
      /** @description A list of incident ids. */
      incidentIds?: string[] | null
      /**
       * @description A list of JSON objects containing incident specific properties:
       * * `id`: the id of the incident
       * * `activityId`: the activity id in which the incident occurred
       */
      incidents?: components['schemas']['ActivityInstanceIncidentDto'][] | null
    }
    TriggerVariableValueDto: {
      /**
       * @description Indicates whether the variable should be a local variable or not.
       * If set to true, the variable becomes a local variable of the execution
       * entering the target activity.
       */
      local?: boolean | null
    } & components['schemas']['VariableValueDto']
    UserCredentialsDto: {
      /** @description The users new password. */
      password?: string | null
      /**
       * @description The password of the authenticated user who changes the password of the user
       * (i.e., the user with passed id as path parameter).
       */
      authenticatedUserPassword?: string | null
    }
    UserDto: {
      profile?: components['schemas']['UserProfileDto']
      credentials?: components['schemas']['UserCredentialsDto']
    }
    UserIdDto: {
      /** @description The id of the user that the current action refers to. */
      userId?: string | null
    }
    UserOperationLogEntryDto: {
      /** @description The unique identifier of this log entry. */
      id?: string | null
      /** @description The user who performed this operation. */
      userId?: string | null
      /**
       * Format: date-time
       * @description Timestamp of this operation.
       */
      timestamp?: string | null
      /**
       * @description The unique identifier of this operation. A composite operation that changes
       * multiple properties has a common `operationId`.
       */
      operationId?: string | null
      /** @description The type of this operation, e.g., `Assign`, `Claim` and so on. */
      operationType?: string | null
      /**
       * @description The type of the entity on which this operation was executed, e.g., `Task` or
       * `Attachment`.
       */
      entityType?: string | null
      /**
       * @description The name of the category this operation was associated with, e.g., `TaskWorker` or
       * `Admin`.
       */
      category?: string | null
      /** @description An arbitrary annotation set by a user for auditing reasons. */
      annotation?: string | null
      /** @description The property changed by this operation. */
      property?: string | null
      /** @description The original value of the changed property. */
      orgValue?: string | null
      /** @description The new value of the changed property. */
      newValue?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this
       * deployment.
       */
      deploymentId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this process
       * definition.
       */
      processDefinitionId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to process
       * definitions with this key.
       */
      processDefinitionKey?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this process
       * instance.
       */
      processInstanceId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this
       * execution.
       */
      executionId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this case
       * definition.
       */
      caseDefinitionId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this case
       * instance.
       */
      caseInstanceId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this case
       * execution.
       */
      caseExecutionId?: string | null
      /** @description If not `null`, the operation is restricted to entities in relation to this task. */
      taskId?: string | null
      /** @description If not `null`, the operation is restricted to entities in relation to this external task. */
      externalTaskId?: string | null
      /** @description If not `null`, the operation is restricted to entities in relation to this batch. */
      batchId?: string | null
      /** @description If not `null`, the operation is restricted to entities in relation to this job. */
      jobId?: string | null
      /**
       * @description If not `null`, the operation is restricted to entities in relation to this job
       * definition.
       */
      jobDefinitionId?: string | null
      /**
       * Format: date-time
       * @description The time after which the entry should be removed by the History Cleanup job.
       * [Default format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
       * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
       */
      removalTime?: string | null
      /**
       * @description The process instance id of the root process instance that initiated the process
       * containing this entry.
       */
      rootProcessInstanceId?: string | null
    }
    UserProfileDto: {
      /** @description The id of the user. */
      id?: string | null
      /** @description The first name of the user. */
      firstName?: string | null
      /** @description The first name of the user. */
      lastName?: string | null
      /** @description The email of the user. */
      email?: string | null
    }
    VariableInstanceDto: {
      /** @description The id of the variable instance. */
      id?: string | null
      /** @description The name of the variable instance. */
      name?: string | null
      /** @description The id of the process definition that this variable instance belongs to. */
      processDefinitionId?: string | null
      /** @description The id of the process instance that this variable instance belongs to. */
      processInstanceId?: string | null
      /** @description The id of the execution that this variable instance belongs to. */
      executionId?: string | null
      /** @description The id of the case instance that this variable instance belongs to. */
      caseInstanceId?: string | null
      /** @description The id of the case execution that this variable instance belongs to. */
      caseExecutionId?: string | null
      /** @description The id of the task that this variable instance belongs to. */
      taskId?: string | null
      /** @description The id of the batch that this variable instance belongs to.< */
      batchId?: string | null
      /** @description The id of the activity instance that this variable instance belongs to. */
      activityInstanceId?: string | null
      /** @description The id of the tenant that this variable instance belongs to. */
      tenantId?: string | null
      /** @description An error message in case a Java Serialized Object could not be de-serialized. */
      errorMessage?: string | null
    } & components['schemas']['VariableValueDto']
    /** @description A variable instance query which defines a list of variable instances */
    VariableInstanceQueryDto: {
      /** @description Filter by variable instance name. */
      variableName?: string | null
      /**
       * @description Filter by the variable instance name. The parameter can include the wildcard `%` to
       * express like-strategy such as: starts with (`%`name), ends with (name`%`) or
       * contains (`%`name`%`).
       */
      variableNameLike?: string | null
      /**
       * @description Only include variable instances which belong to one of the passed
       * process instance ids.
       */
      processInstanceIdIn?: string[] | null
      /**
       * @description Only include variable instances which belong to one of the passed
       * execution ids.
       */
      executionIdIn?: string[] | null
      /** @description Only include variable instances which belong to one of the passed  case instance ids. */
      caseInstanceIdIn?: string[] | null
      /** @description Only include variable instances which belong to one of the passed  case execution ids. */
      caseExecutionIdIn?: string[] | null
      /**
       * @description Only include variable instances which belong to one of the passed  task
       * ids.
       */
      taskIdIn?: string[] | null
      /**
       * @description Only include variable instances which belong to one of the passed
       * batch ids.
       */
      batchIdIn?: string[] | null
      /**
       * @description Only include variable instances which belong to one of the passed
       * activity instance ids.
       */
      activityInstanceIdIn?: string[] | null
      /**
       * @description Only include variable instances which belong to one of the passed
       * tenant ids.
       */
      tenantIdIn?: string[] | null
      /**
       * @description An array to only include variable instances that have the certain values.
       * The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the
       * variable name, `operator (String)` is the comparison operator to be used and `value` the variable value.
       * `value` may be `String`, `Number` or `Boolean`.
       *
       * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater
       * than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`
       */
      variableValues?: components['schemas']['VariableQueryParameterDto'][] | null
      /**
       * @description Match all variable names provided in `variableValues` case-insensitively. If set to `true`
       * **variableName** and **variablename** are treated as equal.
       */
      variableNamesIgnoreCase?: boolean | null
      /**
       * @description Match all variable values provided in `variableValues` case-insensitively. If set to
       * `true` **variableValue** and **variablevalue** are treated as equal.
       */
      variableValuesIgnoreCase?: boolean | null
      /** @description Only include variable instances which belong to one of passed scope ids. */
      variableScopeIdIn?: string[] | null
      /**
       * @description An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.
       *                       The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.
       *                       Sorting has no effect for `count` endpoints
       */
      sorting?:
        | {
            /**
             * @description Sort the results lexicographically by a given criterion.
             * Must be used in conjunction with the sortOrder parameter.
             * @enum {string|null}
             */
            sortBy?: 'variableName' | 'variableType' | 'activityInstanceId' | 'tenantId' | null
            /**
             * @description Sort the results in a given order. Values may be `asc` for ascending order or `desc` for
             * descending order. Must be used in conjunction with the sortBy parameter.
             * @enum {string|null}
             */
            sortOrder?: 'asc' | 'desc' | null
          }[]
        | null
    }
    VariableQueryParameterDto: {
      /** @description Variable name */
      name?: string | null
    } & components['schemas']['ConditionQueryParameterDto']
    VariableValueDto: {
      value?: components['schemas']['AnyValue']
      /** @description The value type of the variable. */
      type?: string | null
      /**
       * @description A JSON object containing additional, value-type-dependent properties.
       * For serialized variables of type Object, the following properties can be provided:
       *
       * * `objectTypeName`: A string representation of the object's type name.
       * * `serializationDataFormat`: The serialization format used to store the variable.
       *
       * For serialized variables of type File, the following properties can be provided:
       *
       * * `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again.
       * * `mimetype`: The MIME type of the file that is being uploaded.
       * * `encoding`: The encoding of the file that is being uploaded.
       *
       * The following property can be provided for all value types:
       *
       * * `transient`: Indicates whether the variable should be transient or
       * not. See [documentation](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables#transient-variables) for more informations.
       * (Not applicable for `decision-definition`, ` /process-instance/variables-async`, and `/migration/executeAsync` endpoints)
       */
      valueInfo?: {
        [key: string]: unknown
      }
    }
    VersionDto: {
      /** @description The version of the Rest API. */
      version?: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get Authorizations
   * @description Queries for a list of authorizations using a list of parameters.
   * The size of the result set can be retrieved by using the
   * [Get Authorization Count](https://docs.camunda.org/manual/7.20/reference/rest/authorization/get-query-count/) method.
   */
  queryAuthorizations: {
    parameters: {
      query?: {
        /** @description Filter by the id of the authorization. */
        id?: string
        /**
         * @description Filter by authorization type. (0=global, 1=grant, 2=revoke).
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#authorization-type)
         * for more information about authorization types.
         */
        type?: number
        /** @description Filter by a comma-separated list of userIds. */
        userIdIn?: string
        /** @description Filter by a comma-separated list of groupIds. */
        groupIdIn?: string
        /**
         * @description Filter by an integer representation of the resource type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
         * for a list of integer representations of resource types.
         */
        resourceType?: number
        /** @description Filter by resource id. */
        resourceId?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'resourceType' | 'resourceId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AuthorizationDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy` is specified. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Authorization Resource Options
   * @description The OPTIONS request allows you to check for the set of available operations that the currently
   * authenticated user can perform on the `/authorization` resource. Whether the user can perform an operation
   * or not may depend on various factors, including the users authorizations to interact with this
   * resource and the internal configuration of the process engine.
   */
  availableOperationsAuthorization: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Perform an Authorization Check
   * @description Performs an authorization check for the currently authenticated user.
   */
  isUserAuthorized: {
    parameters: {
      query: {
        /** @description String value representing the permission name to check for. */
        permissionName: string
        /** @description String value for the name of the resource to check permissions for. */
        resourceName: string
        /**
         * @description An integer representing the resource type to check permissions for.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
         * for a list of integer representations of resource types.
         */
        resourceType: number
        /**
         * @description The id of the resource to check permissions for. If left blank,
         * a check for global permissions on the resource is performed.
         */
        resourceId?: string
        /**
         * @description The id of the user to check permissions for. The currently authenticated
         * user must have a READ permission for the Authorization resource. If `userId` is
         * blank, a check for the currently authenticated user is performed.
         */
        userId?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AuthorizationCheckResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a permission
       * parameterName is not valid for the provided resourceType. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The user is not authenticated. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      401: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description When a `userId` is passed and the user does not possess a READ permission for the
       * Authorization resource. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Authorization with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Authorization Count
   * @description Queries for authorizations using a list of parameters and retrieves the count.
   */
  getAuthorizationCount: {
    parameters: {
      query?: {
        /** @description Filter by the id of the authorization. */
        id?: string
        /**
         * @description Filter by authorization type. (0=global, 1=grant, 2=revoke).
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#authorization-type)
         * for more information about authorization types.
         */
        type?: number
        /** @description Filter by a comma-separated list of userIds. */
        userIdIn?: string
        /** @description Filter by a comma-separated list of groupIds. */
        groupIdIn?: string
        /**
         * @description Filter by an integer representation of the resource type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/authorization-service/#resources)
         * for a list of integer representations of resource types.
         */
        resourceType?: number
        /** @description Filter by resource id. */
        resourceId?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy` is specified. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create a New Authorization
   * @description Creates a new authorization.
   */
  createAuthorization: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['AuthorizationCreateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AuthorizationDto']
        }
      }
      /**
       * @description Returned if some of the properties in the request body are invalid, for example if
       * a permission parameter is not valid for the provided resourceType.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The authenticated user is unauthorized to create an instance of this resource. See
       * the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The authorization could not be updated due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Authorization
   * @description Retrieves an authorization by id.
   */
  getAuthorization: {
    parameters: {
      path: {
        /** @description The id of the authorization to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AuthorizationDto']
        }
      }
      /**
       * @description Authorization with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update an Authorization
   * @description Updates an authorization by id.
   */
  updateAuthorization: {
    parameters: {
      path: {
        /** @description The id of the authorization to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AuthorizationUpdateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the properties in the request body are invalid, for example if
       * a permission parameter is not valid for the provided resourceType.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The authenticated user is unauthorized to update this resource. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description The authorization with the requested Id cannot be found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The authorization could not be updated due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Authorization
   * @description Deletes an authorization by id.
   */
  deleteAuthorization: {
    parameters: {
      path: {
        /** @description The id of the authorization to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description If the authenticated user is unauthorized to delete the resource instance. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Authorization cannot be found. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Authorization Resource Options
   * @description The OPTIONS request allows you to check for the set of available operations that the currently
   * authenticated user can perform on a given instance of the `/authorization` resource.
   * Whether the user can perform an operation or not may depend on various factors, including the users
   * authorizations to interact with this resource and the internal configuration of the process engine.
   */
  availableOperationsAuthorizationInstance: {
    parameters: {
      path: {
        /** @description The id of the authorization to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.
   * The size of the result set can be retrieved by using the
   * [Get Batch Count](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-query-count/) method.
   */
  getBatches: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'batchId' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /** @description Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include batches which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description A `Boolean` value which indicates whether only active or suspended batches should be included.
         * When the value is set to `true`, only suspended batches will be returned and
         * when the value is set to `false`, only active batches will be returned.
         */
        suspended?: boolean
        /** @description Only include batches that were started by this user id. */
        createdBy?: string
        /**
         * @description Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Only include batches having jobs with failures.
         * Value can only be `true`.
         */
        withFailures?: boolean
        /**
         * @description Only include batches having jobs without failures.
         * Value can only be `true`.
         */
        withoutFailures?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Requests the number of batches that fulfill the query criteria.
   * Takes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-query/) method.
   */
  getBatchesCount: {
    parameters: {
      query?: {
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /** @description Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include batches which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description A `Boolean` value which indicates whether only active or suspended batches should be included.
         * When the value is set to `true`, only suspended batches will be returned and
         * when the value is set to `false`, only active batches will be returned.
         */
        suspended?: boolean
        /** @description Only include batches that were started by this user id. */
        createdBy?: string
        /**
         * @description Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Only include batches having jobs with failures.
         * Value can only be `true`.
         */
        withFailures?: boolean
        /**
         * @description Only include batches having jobs without failures.
         * Value can only be `true`.
         */
        withoutFailures?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Statistics
   * @description Queries for batch statistics that fulfill given parameters.
   * Parameters may be the properties of batches, such as the id or type.
   * The size of the result set can be retrieved by using the
   * [Get Batch Statistics Count](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-statistics-query-count/) method.
   */
  getBatchStatistics: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'batchId' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /** @description Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include batches which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description A `Boolean` value which indicates whether only active or suspended batches should be included.
         * When the value is set to `true`, only suspended batches will be returned and
         * when the value is set to `false`, only active batches will be returned.
         */
        suspended?: boolean
        /** @description Only include batches that were started by this user id. */
        createdBy?: string
        /**
         * @description Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Only include batches having jobs with failures.
         * Value can only be `true`.
         */
        withFailures?: boolean
        /**
         * @description Only include batches having jobs without failures.
         * Value can only be `true`.
         */
        withoutFailures?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchStatisticsDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Statistics Count
   * @description Requests the number of batch statistics that fulfill the query criteria.
   * Takes the same filtering parameters as the
   * [Get Batch Statistics](https://docs.camunda.org/manual/7.20/reference/rest/batch/get-statistics-query/) method.
   */
  getBatchStatisticsCount: {
    parameters: {
      query?: {
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /** @description Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include batches which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description A `Boolean` value which indicates whether only active or suspended batches should be included.
         * When the value is set to `true`, only suspended batches will be returned and
         * when the value is set to `false`, only active batches will be returned.
         */
        suspended?: boolean
        /** @description Only include batches that were started by this user id. */
        createdBy?: string
        /**
         * @description Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Only include batches having jobs with failures.
         * Value can only be `true`.
         */
        withFailures?: boolean
        /**
         * @description Only include batches having jobs without failures.
         * Value can only be `true`.
         */
        withoutFailures?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a batch by id, according to the Batch interface in the engine.
   */
  getBatch: {
    parameters: {
      path: {
        /** @description The id of the batch to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Batch with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Deletes a batch by id, including all related jobs and job definitions.
   * Optionally also deletes the batch history.
   */
  deleteBatch: {
    parameters: {
      query?: {
        /** @description `true`, if the historic batch and historic job logs for this batch should also be deleted. */
        cascade?: boolean
      }
      path: {
        /** @description The id of the batch to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Batch with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend
   * @description Activates or suspends a batch by id.
   */
  updateBatchSuspensionState: {
    parameters: {
      path: {
        /** @description The id of the batch to activate or suspend. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the batch cannot be suspended or activated.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Evaluate
   * @description Triggers evaluation of conditions for conditional start event(s).
   * Internally this maps to the engines condition evaluation builder method ConditionEvaluationBuilder#evaluateStartConditions().
   * For more information see the [Conditional Start Events](https://docs.camunda.org/manual/7.20/reference/bpmn20/events/conditional-events/#conditional-start-event)
   * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
   */
  evaluateCondition: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['EvaluationConditionDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto'][]
        }
      }
      /** @description If both tenantId and withoutTenantId are supplied. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the user is not allowed to start the process instance of the process definition, which start condition was evaluated to `true`. */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for decision definitions that fulfill given parameters.
   * Parameters may be the properties of decision definitions, such as the name, key or version.
   * The size of the result set can be retrieved by using
   * the [Get Decision Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/decision-definition/get-query-count/) method.
   */
  getDecisionDefinitions: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'category'
          | 'decisionRequirementsDefinitionKey'
          | 'key'
          | 'id'
          | 'name'
          | 'version'
          | 'deploymentId'
          | 'deployTime'
          | 'versionTag'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by decision definition id. */
        decisionDefinitionId?: string
        /** @description Filter by decision definition ids. */
        decisionDefinitionIdIn?: string
        /** @description Filter by decision definition name. */
        name?: string
        /** @description Filter by decision definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Filter by the deploy time of the deployment the decision definition belongs to.
         * Only selects decision definitions that have been deployed after (exclusive) a specific time.
         */
        deployedAfter?: string
        /**
         * @description Filter by the deploy time of the deployment the decision definition belongs to.
         * Only selects decision definitions that have been deployed at a specific time (exact match).
         */
        deployedAt?: string
        /** @description Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. */
        key?: string
        /** @description Filter by decision definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by decision definition category. Exact match. */
        category?: string
        /** @description Filter by decision definition categories that the parameter is a substring of. */
        categoryLike?: string
        /** @description Filter by decision definition version. */
        version?: number
        /**
         * @description Only include those decision definitions that are latest versions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the decision definition resource. Exact match. */
        resourceName?: string
        /** @description Filter by names of those decision definition resources that the parameter is a substring of. */
        resourceNameLike?: string
        /** @description Filter by the id of the decision requirements definition this decision definition belongs to. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by the key of the decision requirements definition this decision definition belongs to. */
        decisionRequirementsDefinitionKey?: string
        /**
         * @description Only include decision definitions which does not belongs to any decision requirements definition.
         * Value may only be `true`, as `false` is the default behavior.
         */
        withoutDecisionRequirementsDefinition?: boolean
        /** @description Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include decision definitions which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include decision definitions which belong to no tenant.
         * Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeDecisionDefinitionsWithoutTenantId?: boolean
        /** @description Filter by the version tag. */
        versionTag?: string
        /** @description Filter by the version tags of those decision definition resources that the parameter is a substring of. */
        versionTagLike?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Requests the number of decision definitions that fulfill the query criteria.
   * Takes the same filtering parameters as the
   * [Get Decision Definition](https://docs.camunda.org/manual/7.20/reference/rest/decision-definition/get-query/) method.
   */
  getDecisionDefinitionsCount: {
    parameters: {
      query?: {
        /** @description Filter by decision definition id. */
        decisionDefinitionId?: string
        /** @description Filter by decision definition ids. */
        decisionDefinitionIdIn?: string
        /** @description Filter by decision definition name. */
        name?: string
        /** @description Filter by decision definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Filter by the deploy time of the deployment the decision definition belongs to.
         * Only selects decision definitions that have been deployed after (exclusive) a specific time.
         */
        deployedAfter?: string
        /**
         * @description Filter by the deploy time of the deployment the decision definition belongs to.
         * Only selects decision definitions that have been deployed at a specific time (exact match).
         */
        deployedAt?: string
        /** @description Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. */
        key?: string
        /** @description Filter by decision definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by decision definition category. Exact match. */
        category?: string
        /** @description Filter by decision definition categories that the parameter is a substring of. */
        categoryLike?: string
        /** @description Filter by decision definition version. */
        version?: number
        /**
         * @description Only include those decision definitions that are latest versions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the decision definition resource. Exact match. */
        resourceName?: string
        /** @description Filter by names of those decision definition resources that the parameter is a substring of. */
        resourceNameLike?: string
        /** @description Filter by the id of the decision requirements definition this decision definition belongs to. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by the key of the decision requirements definition this decision definition belongs to. */
        decisionRequirementsDefinitionKey?: string
        /**
         * @description Only include decision definitions which does not belongs to any decision requirements definition.
         * Value may only be `true`, as `false` is the default behavior.
         */
        withoutDecisionRequirementsDefinition?: boolean
        /** @description Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include decision definitions which belong to no tenant.
         * Value can effectively only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include decision definitions which belong to no tenant.
         * Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeDecisionDefinitionsWithoutTenantId?: boolean
        /** @description Filter by the version tag. */
        versionTag?: string
        /** @description Filter by the version tags of those decision definition resources that the parameter is a substring of. */
        versionTagLike?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Definition By Key
   * @description Retrieves the latest version of the decision definition which belongs to no tenant.
   */
  getDecisionDefinitionByKey: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram By Key
   * @description Returns the diagram for the latest version of the decision definition which belongs to no tenant
   */
  getDecisionDefinitionDiagramByKey: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The decision definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Decision definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Evaluate By Key
   * @description Evaluates the latest version of the decision definition which belongs to no tenant.
   * The input values of the decision have to be supplied in the request body.
   */
  evaluateDecisionByKey: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be evaluated. */
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EvaluateDecisionDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }[]
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live By Key
   * @description Updates the latest version of the decision definition which belongs to no tenant.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   */
  updateHistoryTimeToLiveByDecisionDefinitionKey: {
    parameters: {
      path: {
        /** @description The key of the decision definitions to change history time to live. */
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Definition By Key And Tenant Id
   * @description Retrieves the latest version of the decision definition for tenant
   */
  getDecisionDefinitionByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the decision definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram By Key And Tenant
   * @description Returns the XML of the latest version of the decision definition for tenant.
   */
  getDecisionDefinitionDiagramByKeyAndTenant: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the decision definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The decision definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Decision definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Evaluate By Key And Tenant
   * @description Evaluates the latest version of the decision definition for tenant.
   * The input values of the decision have to be supplied in the request body.
   */
  evaluateDecisionByKeyAndTenant: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof) to be evaluated. */
        key: string
        /** @description The id of the tenant the decision definition belongs to. */
        'tenant-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EvaluateDecisionDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }[]
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live By Key And Tenant
   * @description Updates the latest version of the decision definition for tenant.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
   * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
   * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
   */
  updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant: {
    parameters: {
      path: {
        /** @description The key of the decision definitions to change history time to live. */
        key: string
        /** @description The id of the tenant the decision definition belongs to. */
        'tenant-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML By Key and Tenant
   * @description Retrieves the XML of the latest version of the decision definition for tenant
   */
  getDecisionDefinitionDmnXmlByKeyAndTenant: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof). */
        key: string
        /** @description The id of the tenant the decision definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDiagramDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML By Key
   * @description Retrieves the XML for the latest version of the decision definition which belongs to no tenant.
   */
  getDecisionDefinitionDmnXmlByKey: {
    parameters: {
      path: {
        /** @description The key of the decision definition (the latest version thereof). */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDiagramDto']
        }
      }
      /**
       * @description Decision definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Definition By Id
   * @description Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.
   */
  getDecisionDefinitionById: {
    parameters: {
      path: {
        /** @description The id of the decision definition to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDto']
        }
      }
      /**
       * @description Decision definition with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram
   * @description Retrieves the diagram of a decision definition.
   */
  getDecisionDefinitionDiagram: {
    parameters: {
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The decision definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Decision definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Evaluate By Id
   * @description Evaluates a given decision and returns the result.
   * The input values of the decision have to be supplied in the request body.
   */
  evaluateDecisionById: {
    parameters: {
      path: {
        /** @description The id of the decision definition to be evaluated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EvaluateDecisionDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }[]
        }
      }
      /**
       * @description Decision definition with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live
   * @description Updates history time to live for decision definition.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   */
  updateHistoryTimeToLiveByDecisionDefinitionId: {
    parameters: {
      path: {
        /** @description The id of the decision definition to change history time to live. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Decision definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML By Id
   * @description Retrieves the DMN XML of a decision definition.
   */
  getDecisionDefinitionDmnXmlById: {
    parameters: {
      path: {
        /** @description The id of the decision definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionDefinitionDiagramDto']
        }
      }
      /**
       * @description Decision definition with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Definitions
   * @description Queries for decision requirements definitions that fulfill given parameters.
   * Parameters may be the properties of decision requirements definitions, such as the name,
   * key or version.  The size of the result set can be retrieved by using the
   * [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/decision-requirements-definition/get-query-count/)
   * method.
   */
  getDecisionRequirementsDefinitions: {
    parameters: {
      query?: {
        /** @description Filter by decision requirements definition id. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by decision requirements definition ids. */
        decisionRequirementsDefinitionIdIn?: string
        /** @description Filter by decision requirements definition name. */
        name?: string
        /** @description Filter by decision requirements definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the id of the deployment a decision requirement definition belongs to. */
        deploymentId?: string
        /**
         * @description Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact
         * match.
         */
        key?: string
        /** @description Filter by decision requirements definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by decision requirements definition category. Exact match. */
        category?: string
        /**
         * @description Filter by decision requirements definition categories that the parameter is a substring
         * of.
         */
        categoryLike?: string
        /** @description Filter by decision requirements definition version. */
        version?: number
        /**
         * @description Only include those decision requirements definitions that are latest versions. Value may
         * only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the decision requirements definition resource. Exact match. */
        resourceName?: string
        /**
         * @description Filter by names of those decision requirements definition resources that the parameter is
         * a substring of.
         */
        resourceNameLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A decision requirements definition must
         * have one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include decision requirements definitions which belong to no tenant. Value may only
         * be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include decision requirements definitions which belong to no tenant. Can be used in
         * combination with `tenantIdIn`. Value may only be `true`, as `false` is the
         * default behavior.
         */
        includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'id' | 'key' | 'name' | 'version' | 'deploymentId' | 'category' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if
       * a `sortOrder` parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Definition Count
   * @description Requests the number of decision requirements definitions that fulfill the query
   * criteria.
   * Takes the same filtering parameters as the
   * [Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.20/reference/rest/decision-requirements-definition/get-query/)
   * method.
   */
  getDecisionRequirementsDefinitionsCount: {
    parameters: {
      query?: {
        /** @description Filter by decision requirements definition id. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by decision requirements definition ids. */
        decisionRequirementsDefinitionIdIn?: string
        /** @description Filter by decision requirements definition name. */
        name?: string
        /** @description Filter by decision requirements definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the id of the deployment a decision requirement definition belongs to. */
        deploymentId?: string
        /**
         * @description Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact
         * match.
         */
        key?: string
        /** @description Filter by decision requirements definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by decision requirements definition category. Exact match. */
        category?: string
        /**
         * @description Filter by decision requirements definition categories that the parameter is a substring
         * of.
         */
        categoryLike?: string
        /** @description Filter by decision requirements definition version. */
        version?: number
        /**
         * @description Only include those decision requirements definitions that are latest versions. Value may
         * only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the decision requirements definition resource. Exact match. */
        resourceName?: string
        /**
         * @description Filter by names of those decision requirements definition resources that the parameter is
         * a substring of.
         */
        resourceNameLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A decision requirements definition must
         * have one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include decision requirements definitions which belong to no tenant. Value may only
         * be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include decision requirements definitions which belong to no tenant. Can be used in
         * combination with `tenantIdIn`. Value may only be `true`, as `false` is the
         * default behavior.
         */
        includeDecisionRequirementsDefinitionsWithoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if
       * a `sortOrder` parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Definition by Key
   * @description Retrieves a decision requirements definition according to the
   * `DecisionRequirementsDefinition` interface in the engine.
   * Returns the latest version of the decision requirements definition
   * which belongs to no tenant.
   */
  getDecisionRequirementsDefinitionByKey: {
    parameters: {
      path: {
        /** @description The key of the decision requirements definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionDto']
        }
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Diagram by Key
   * @description Retrieves the diagram of a decision requirements definition.
   * Returns the diagram for the latest version of the decision requirements
   * definition which belongs to no tenant.
   */
  getDecisionRequirementsDefinitionDiagramByKey: {
    parameters: {
      path: {
        /**
         * @description The key of the decision requirements definition (the latest version thereof) to be
         * retrieved.
         */
        key: string
      }
    }
    responses: {
      /** @description The image diagram of the decision requirements definition. */
      200: {
        content: {
          'image/*': string
          'application/octet-stream': string
        }
      }
      /**
       * @description The decision requirements definition doesn't have an associated diagram. This
       * method returns no content.
       */
      204: {
        content: never
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Definition by Key and Tenant ID
   * @description Retrieves a decision requirements definition according to the
   * `DecisionRequirementsDefinition` interface in the engine.
   * Returns the latest version of the decision requirements definition
   * for a tenant.
   */
  getDecisionRequirementsDefinitionByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the decision requirements definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant to which the decision requirements definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionDto']
        }
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Diagram by Key and Tenant ID
   * @description Retrieves the diagram of a decision requirements definition.
   * Returns the diagram of the latest version of the decision requirements
   * definition for a tenant.
   */
  getDecisionRequirementsDefinitionDiagramByKeyAndTenantId: {
    parameters: {
      path: {
        /**
         * @description The key of the decision requirements definition (the latest version thereof) to be
         * retrieved.
         */
        key: string
        /** @description The id of the tenant to which the decision requirements definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description The image diagram of the decision requirements definition. */
      200: {
        content: {
          'image/*': string
          'application/octet-stream': string
        }
      }
      /**
       * @description The decision requirements definition doesn't have an associated diagram. This
       * method returns no content.
       */
      204: {
        content: never
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get DMN XML by Key and Tenant ID
   * @description Retrieves the DMN XML of a decision requirements definition.
   * Returns the XML of the latest version of the decision requirements
   * definition for a tenant.
   */
  getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId: {
    parameters: {
      path: {
        /**
         * @description The key of the decision requirements definition (the latest version thereof) to be
         * retrieved.
         */
        key: string
        /** @description The id of the tenant to which the decision requirements definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionXmlDto']
        }
      }
      /**
       * @description
       * Decision requirements definition with given id or key does not
       * exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get DMN XML by Key
   * @description Retrieves the DMN XML of a decision requirements definition.
   * Returns the XML for the latest version of the decision requirements
   * definition which belongs to no tenant.
   */
  getDecisionRequirementsDefinitionDmnXmlByKey: {
    parameters: {
      path: {
        /**
         * @description The key of the decision requirements definition (the latest version thereof) to be
         * retrieved.
         */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionXmlDto']
        }
      }
      /**
       * @description
       * Decision requirements definition with given id or key does not
       * exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Definition by ID
   * @description Retrieves a decision requirements definition according to the
   * `DecisionRequirementsDefinition` interface in the engine.
   */
  getDecisionRequirementsDefinitionById: {
    parameters: {
      path: {
        /** @description The id of the decision requirements definition to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionDto']
        }
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Decision Requirements Diagram by ID
   * @description Retrieves the diagram of a decision requirements definition.
   */
  getDecisionRequirementsDefinitionDiagramById: {
    parameters: {
      path: {
        /** @description The id of the decision requirements definition. */
        id: string
      }
    }
    responses: {
      /** @description The image diagram of the decision requirements definition. */
      200: {
        content: {
          'image/*': string
          'application/octet-stream': string
        }
      }
      /**
       * @description The decision requirements definition doesn't have an associated diagram. This
       * method returns no content.
       */
      204: {
        content: never
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get DMN XML by ID
   * @description Retrieves the DMN XML of a decision requirements definition.
   */
  getDecisionRequirementsDefinitionDmnXmlById: {
    parameters: {
      path: {
        /** @description The id of the decision requirements definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DecisionRequirementsDefinitionXmlDto']
        }
      }
      /**
       * @description Decision requirements definition with given id or key does not
       * exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments,
   * such as the id or name or a range of the deployment time. The size of the result set can be retrieved by
   * using the [Get Deployment count](https://docs.camunda.org/manual/7.20/reference/rest/deployment/get-query-count/) method.
   */
  getDeployments: {
    parameters: {
      query?: {
        /** @description Filter by deployment id */
        id?: string
        /** @description Filter by the deployment name. Exact match. */
        name?: string
        /**
         * @description Filter by the deployment name that the parameter is a substring of. The parameter can include the
         * wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
         * (`%`name`%`).
         */
        nameLike?: string
        /** @description Filter by the deployment source. */
        source?: string
        /** @description Filter by the deployment source whereby source is equal to `null`. */
        withoutSource?: boolean
        /** @description Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
         * behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
         * only be `true`, as `false` is the default behavior.
         */
        includeDeploymentsWithoutTenantId?: boolean
        /**
         * @description Restricts to all deployments after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        after?: string
        /**
         * @description Restricts to all deployments before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        before?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'id' | 'name' | 'deploymentTime' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`, or if an invalid operator for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
   * [Get Deployments](https://docs.camunda.org/manual/7.20/reference/rest/deployment/get-query/) method.
   */
  getDeploymentsCount: {
    parameters: {
      query?: {
        /** @description Filter by deployment id */
        id?: string
        /** @description Filter by the deployment name. Exact match. */
        name?: string
        /**
         * @description Filter by the deployment name that the parameter is a substring of. The parameter can include the
         * wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains
         * (`%`name`%`).
         */
        nameLike?: string
        /** @description Filter by the deployment source. */
        source?: string
        /** @description Filter by the deployment source whereby source is equal to `null`. */
        withoutSource?: boolean
        /** @description Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default
         * behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may
         * only be `true`, as `false` is the default behavior.
         */
        includeDeploymentsWithoutTenantId?: boolean
        /**
         * @description Restricts to all deployments after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        after?: string
        /**
         * @description Restricts to all deployments before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        before?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
       * comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create
   * @description Creates a deployment.
   *
   * **Security Consideration**
   *
   * Deployments can contain custom code in form of scripts or EL expressions to customize process behavior.
   * This may be abused for remote execution of arbitrary code.
   */
  createDeployment: {
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormDeploymentDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentWithDefinitionsDto']
        }
      }
      /**
       * @description Bad Request. In case one of the bpmn resources cannot be parsed.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#parse-exceptions) for
       * the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ParseExceptionDto']
        }
      }
    }
  }
  /**
   * Get Registered Deployments
   * @description Queries the registered deployment IDs for the current application.
   */
  getRegisteredDeployments: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a deployment by id, according to the `Deployment` interface of the engine.
   */
  getDeployment: {
    parameters: {
      path: {
        /** @description The id of the deployment. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentDto']
        }
      }
      /**
       * @description Deployment with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Deletes a deployment by id.
   */
  deleteDeployment: {
    parameters: {
      query?: {
        /**
         * @description `true`, if all process instances, historic process instances and jobs for this deployment
         * should be deleted.
         */
        cascade?: boolean
        /** @description `true`, if only the built-in ExecutionListeners should be notified with the end event. */
        skipCustomListeners?: boolean
        /** @description `true`, if all input/output mappings should not be invoked. */
        skipIoMappings?: boolean
      }
      path: {
        /** @description The id of the deployment to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description A Deployment with the provided id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Redeploy
   * @description Re-deploys an existing deployment.
   *
   * The deployment resources to re-deploy can be restricted by using the properties `resourceIds` or
   * `resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the
   * given deployment are re-deployed.
   *
   * **Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize
   * process behavior. This may be abused for remote execution of arbitrary code. See the section on
   * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/) in
   * the user guide for details.
   */
  redeploy: {
    parameters: {
      path: {
        /** @description The id of the deployment to re-deploy. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RedeploymentDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentWithDefinitionsDto']
        }
      }
      /**
       * @description Deployment or a deployment resource for the given deployment does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Resources
   * @description Retrieves all deployment resources of a given deployment.
   */
  getDeploymentResources: {
    parameters: {
      path: {
        /** @description The id of the deployment to retrieve the deployment resources for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentResourceDto'][]
        }
      }
      /**
       * @description Deployment resources for the given deployment do not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Resource
   * @description Retrieves a deployment resource by resource id for the given deployment.
   */
  getDeploymentResource: {
    parameters: {
      path: {
        /** @description The id of the deployment */
        id: string
        /** @description The id of the deployment resource */
        resourceId: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DeploymentResourceDto']
        }
      }
      /**
       * @description Deployment Resource with given resource id or deployment id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Resource (Binary)
   * @description Retrieves the binary content of a deployment resource for the given deployment by id.
   */
  getDeploymentResourceData: {
    parameters: {
      path: {
        /** @description The id of the deployment. */
        id: string
        /** @description The id of the deployment resource. */
        resourceId: string
      }
    }
    responses: {
      /** @description Request successful. The media type of the response depends on the filename. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /**
       * @description Deployment Resource with given resource id or deployment id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Retrieves the names of all process engines available on your platform.
   * **Note**: You cannot prepend `/engine/{name}` to this method.
   */
  getProcessEngineNames: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessEngineDto'][]
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for event subscriptions that fulfill given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Event Subscriptions count](https://docs.camunda.org/manual/7.20/reference/rest/event-subscription/get-query-count/) method.
   */
  getEventSubscriptions: {
    parameters: {
      query?: {
        /** @description Only select subscription with the given id. */
        eventSubscriptionId?: string
        /** @description Only select subscriptions for events with the given name. */
        eventName?: string
        /**
         * @description Only select subscriptions for events with the given type.
         * Valid values: `message`, `signal`, `compensate` and `conditional`.
         */
        eventType?: 'message' | 'signal' | 'compensate' | 'conditional'
        /** @description Only select subscriptions that belong to an execution with the given id. */
        executionId?: string
        /** @description Only select subscriptions that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Only select subscriptions that belong to an activity with the given id. */
        activityId?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * Only select subscriptions that belong to one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only select subscriptions which have no tenant id.
         * Value may only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Select event subscriptions which have no tenant id.
         * Can be used in combination with tenantIdIn parameter.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeEventSubscriptionsWithoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'created' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['EventSubscriptionDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid,
       * for example if a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of event subscriptions that fulfill given parameters.
   * Takes the same parameters as the
   * [Get Event Subscriptions](https://docs.camunda.org/manual/7.20/reference/rest/event-subscription/get-query/) method.
   */
  getEventSubscriptionsCount: {
    parameters: {
      query?: {
        /** @description Only select subscription with the given id. */
        eventSubscriptionId?: string
        /** @description Only select subscriptions for events with the given name. */
        eventName?: string
        /**
         * @description Only select subscriptions for events with the given type.
         * Valid values: `message`, `signal`, `compensate` and `conditional`.
         */
        eventType?: 'message' | 'signal' | 'compensate' | 'conditional'
        /** @description Only select subscriptions that belong to an execution with the given id. */
        executionId?: string
        /** @description Only select subscriptions that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Only select subscriptions that belong to an activity with the given id. */
        activityId?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * Only select subscriptions that belong to one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only select subscriptions which have no tenant id.
         * Value may only be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Select event subscriptions which have no tenant id.
         * Can be used in combination with tenantIdIn parameter.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeEventSubscriptionsWithoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Executions
   * @description Queries for the executions that fulfill given parameters.
   * Parameters may be static as well as dynamic runtime properties of
   * executions.
   * The size of the result set can be retrieved by using the [Get
   * Execution Count](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query-count/)
   * method.
   */
  getExecutions: {
    parameters: {
      query?: {
        /** @description Filter by the business key of the process instances the executions belong to. */
        businessKey?: string
        /** @description Filter by the process definition the executions run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the executions run on. */
        processDefinitionKey?: string
        /** @description Filter by the id of the process instance the execution belongs to. */
        processInstanceId?: string
        /** @description Filter by the id of the activity the execution currently executes. */
        activityId?: string
        /** @description Select only those executions that expect a signal of the given name. */
        signalEventSubscriptionName?: string
        /** @description Select only those executions that expect a message of the given name. */
        messageEventSubscriptionName?: string
        /**
         * @description Only include active executions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended executions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        suspended?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /** @description Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. An execution must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include executions that have variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -
         * greater than;
         * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or
         * equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variables?: string
        /**
         * @description Only include executions that belong to a process instance with variables with certain
         * values.
         * Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to.
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Match all variable names provided in `variables` and `processVariables` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values provided in `variables` and `processVariables` case-
         * insensitively. If set to `true` **variableValue** and **variablevalue** are
         * treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'instanceId' | 'definitionKey' | 'definitionId' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ExecutionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Executions (POST)
   * @description Queries for executions that fulfill given parameters through a JSON object.
   * This method is slightly more powerful than the [Get
   * Executions](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query/) method
   * because it allows
   * to filter by multiple instance and execution variables of types
   * `String`, `Number` or `Boolean`.
   */
  queryExecutions: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExecutionQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ExecutionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Execution Count
   * @description Queries for the number of executions that fulfill given parameters.
   * Takes the same parameters as the [Get
   * Executions](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query/) method.
   */
  getExecutionsCount: {
    parameters: {
      query?: {
        /** @description Filter by the business key of the process instances the executions belong to. */
        businessKey?: string
        /** @description Filter by the process definition the executions run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the executions run on. */
        processDefinitionKey?: string
        /** @description Filter by the id of the process instance the execution belongs to. */
        processInstanceId?: string
        /** @description Filter by the id of the activity the execution currently executes. */
        activityId?: string
        /** @description Select only those executions that expect a signal of the given name. */
        signalEventSubscriptionName?: string
        /** @description Select only those executions that expect a message of the given name. */
        messageEventSubscriptionName?: string
        /**
         * @description Only include active executions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended executions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        suspended?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /** @description Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. An execution must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include executions that have variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -
         * greater than;
         * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or
         * equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variables?: string
        /**
         * @description Only include executions that belong to a process instance with variables with certain
         * values.
         * Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to.
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Match all variable names provided in `variables` and `processVariables` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values provided in `variables` and `processVariables` case-
         * insensitively. If set to `true` **variableValue** and **variablevalue** are
         * treated as equal.
         */
        variableValuesIgnoreCase?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Execution Count (POST)
   * @description Queries for the number of executions that fulfill given parameters. This method
   * takes the same message body as the [Get Executions
   * POST](https://docs.camunda.org/manual/7.20/reference/rest/execution/post-query/) method and
   * therefore it is slightly more powerful than the [Get Execution
   * Count](https://docs.camunda.org/manual/7.20/reference/rest/execution/get-query-count/) method.
   */
  queryExecutionsCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExecutionQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Execution
   * @description Retrieves an execution by id, according to the `Execution` interface in the
   * engine.
   */
  getExecution: {
    parameters: {
      path: {
        /** @description The id of the execution to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ExecutionDto']
        }
      }
      /**
       * @description Execution with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create Incident
   * @description Creates a custom incident with given properties.
   */
  createIncident: {
    parameters: {
      path: {
        /** @description The id of the execution to create a new incident for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateIncidentDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['IncidentDto']
        }
      }
      /**
       * @description Returned if the incident type is null, the execution does not exist or the
       * execution is not related to any activity.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Local Execution Variables
   * @description Retrieves all variables of a given execution by id.
   */
  getLocalExecutionVariables: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically
         * variables that store custom Java objects) should be deserialized
         * on server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on
         * server side and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean
         * property introspection feature. Note that this requires the Java
         * classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its
         * serialized format. For example, a variable that is serialized as
         * XML will be returned as a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of
         * backward compatibility, we recommend setting this parameter to
         * `false` when developing web applications that are independent of
         * the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the execution to retrieve the variables from. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. Returns A JSON object of variables key-value pairs. Each key is a variable name and each value a VariableValueDto */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description Execution with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update/Delete Local Execution Variables
   * @description Updates or deletes the variables in the context of an execution by id. The updates
   * do not propagate upwards in the execution hierarchy.
   * Updates precede deletions. So, if a variable is updated AND deleted,
   * the deletion overrides the update.
   */
  modifyLocalExecutionVariables: {
    parameters: {
      path: {
        /** @description The id of the execution to set variables for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchVariablesDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Update or delete could not be executed, for example because the execution does not
       * exist.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Local Execution Variable
   * @description Retrieves a variable from the context of a given execution by id. Does not traverse
   * the parent execution hierarchy.
   */
  getLocalExecutionVariable: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically
         * variables that store custom Java objects) should be deserialized
         * on server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on
         * server side and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean
         * property introspection feature. Note that this requires the Java
         * classes of the variable value to be on the REST API's classpath.
         * If set to `false`, a serializable variable will be returned in its
         * serialized format. For example, a variable that is serialized as
         * XML will be returned as a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of
         * backward compatibility, we recommend setting this parameter to
         * `false` when developing web applications that are independent of
         * the Java process applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the execution to retrieve the variable from. */
        id: string
        /** @description The name of the variable to get. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableValueDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Put Local Execution Variable
   * @description Sets a variable in the context of a given execution by id. Update does not
   * propagate upwards in the execution hierarchy.
   */
  putLocalExecutionVariable: {
    parameters: {
      path: {
        /** @description The id of the execution to set the variable for. */
        id: string
        /** @description The name of the variable to set. */
        varName: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableValueDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Local Execution Variable
   * @description Deletes a variable in the context of a given execution by id. Deletion does not
   * propagate upwards in the execution hierarchy.
   */
  deleteLocalExecutionVariable: {
    parameters: {
      path: {
        /** @description The id of the execution to delete the variable from. */
        id: string
        /** @description The name of the variable to delete. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
    }
  }
  /**
   * Get Local Execution Variable (Binary)
   * @description Retrieves a binary variable from the context of a given execution by id. Does not
   * traverse the parent execution hierarchy. Applicable for byte array and
   * file variables.
   */
  getLocalExecutionVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the execution to retrieve the variable from. */
        id: string
        /** @description The name of the variable to get. */
        varName: string
      }
    }
    responses: {
      /**
       * @description Request successful.
       *         For binary variables or files without any MIME type information, a byte stream is returned.
       *         File variables with MIME type information are returned as the saved type.
       *         Additionally, for file variables the Content-Disposition header will be set.
       */
      200: {
        content: {
          'application/octet-stream': string
          'text/plain': string
        }
      }
      /**
       * @description Variable instance with given id exists but is not a binary variable. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable instance with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Post Local Execution Variable (Binary)
   * @description Sets the serialized value for a binary variable or the binary value for a file
   * variable in the context of a given execution by id.
   */
  setLocalExecutionVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the execution to set the variable for. */
        id: string
        /** @description The name of the variable to set. */
        varName: string
      }
    }
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormVariableBinaryDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if no filename is set. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Message Event Subscription
   * @description Retrieves a message event subscription for a given execution by id and a message
   * name.
   */
  getMessageEventSubscription: {
    parameters: {
      path: {
        /** @description The id of the execution that holds the subscription. */
        id: string
        /** @description The name of the message that the subscription corresponds to. */
        messageName: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['EventSubscriptionDto']
        }
      }
      /**
       * @description A message subscription for the given name and execution does not exist.
       * This may either mean that the execution does not exist, or that
       * it is not subscribed on such a message.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Trigger Message Event Subscription
   * @description Delivers a message to a specific execution by id, to trigger an existing message
   * event subscription. Inject process variables as the message's
   * payload.
   */
  triggerEvent: {
    parameters: {
      path: {
        /** @description The id of the execution to submit the message to. */
        id: string
        /** @description The name of the message that the addressed subscription corresponds to. */
        messageName: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExecutionTriggerDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The addressed execution has no pending message subscriptions for the given message.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Trigger Execution
   * @description Signals an execution by id. Can for example be used to explicitly skip user tasks
   * or signal asynchronous continuations.
   */
  signalExecution: {
    parameters: {
      path: {
        /** @description The id of the execution to signal. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExecutionTriggerDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic
   * runtime properties of executions. The size of the result set can be retrieved by using the
   * [Get External Task Count](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query-count/) method.
   */
  getExternalTasks: {
    parameters: {
      query?: {
        /** @description Filter by an external task's id. */
        externalTaskId?: string
        /** @description Filter by the comma-separated list of external task ids. */
        externalTaskIdIn?: string
        /** @description Filter by an external task topic. */
        topicName?: string
        /** @description Filter by the id of the worker that the task was most recently locked by. */
        workerId?: string
        /**
         * @description Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        locked?: boolean
        /**
         * @description Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        notLocked?: boolean
        /**
         * @description Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
         * `true`, as `false` matches any external task.
         */
        withRetriesLeft?: boolean
        /**
         * @description Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
         * external task.
         */
        noRetriesLeft?: boolean
        /**
         * @description Restrict to external tasks that have a lock that expires after a given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        lockExpirationAfter?: string
        /**
         * @description Restrict to external tasks that have a lock that expires before a given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        lockExpirationBefore?: string
        /** @description Filter by the id of the activity that an external task is created for. */
        activityId?: string
        /** @description Filter by the comma-separated list of ids of the activities that an external task is created for. */
        activityIdIn?: string
        /** @description Filter by the id of the execution that an external task belongs to. */
        executionId?: string
        /** @description Filter by the id of the process instance that an external task belongs to. */
        processInstanceId?: string
        /** @description Filter by a comma-separated list of process instance ids that an external task may belong to. */
        processInstanceIdIn?: string
        /** @description Filter by the id of the process definition that an external task belongs to. */
        processDefinitionId?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * An external task must have one of the given tenant ids.
         */
        tenantIdIn?: string
        /** @description Only include active tasks. Value may only be `true`, as `false` matches any external task. */
        active?: boolean
        /** @description Only include suspended tasks. Value may only be `true`, as `false` matches any external task. */
        suspended?: boolean
        /**
         * @description Only include jobs with a priority higher than or equal to the given value.
         * Value must be a valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /**
         * @description Only include jobs with a priority lower than or equal to the given value.
         * Value must be a valid `long` value.
         */
        priorityLowerThanOrEquals?: number
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'id'
          | 'lockExpirationTime'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'taskPriority'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ExternalTaskDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for external tasks that fulfill given parameters in the form of a JSON object.
   *
   * This method is slightly more powerful than the
   * [Get External Tasks](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query/) method because it allows to
   * specify a hierarchical result sorting.
   */
  queryExternalTasks: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExternalTaskQueryDto']
      }
    }
    responses: {
      /** @description Request successful. The Response is a JSON array of external task objects. */
      200: {
        content: {
          'application/json': components['schemas']['ExternalTaskDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the
   * [Get External Tasks](https://docs.camunda.org/manual/7.20/reference/rest/external-task/get-query/) method.
   */
  getExternalTasksCount: {
    parameters: {
      query?: {
        /** @description Filter by an external task's id. */
        externalTaskId?: string
        /** @description Filter by the comma-separated list of external task ids. */
        externalTaskIdIn?: string
        /** @description Filter by an external task topic. */
        topicName?: string
        /** @description Filter by the id of the worker that the task was most recently locked by. */
        workerId?: string
        /**
         * @description Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        locked?: boolean
        /**
         * @description Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        notLocked?: boolean
        /**
         * @description Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
         * `true`, as `false` matches any external task.
         */
        withRetriesLeft?: boolean
        /**
         * @description Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any
         * external task.
         */
        noRetriesLeft?: boolean
        /**
         * @description Restrict to external tasks that have a lock that expires after a given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        lockExpirationAfter?: string
        /**
         * @description Restrict to external tasks that have a lock that expires before a given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        lockExpirationBefore?: string
        /** @description Filter by the id of the activity that an external task is created for. */
        activityId?: string
        /** @description Filter by the comma-separated list of ids of the activities that an external task is created for. */
        activityIdIn?: string
        /** @description Filter by the id of the execution that an external task belongs to. */
        executionId?: string
        /** @description Filter by the id of the process instance that an external task belongs to. */
        processInstanceId?: string
        /** @description Filter by a comma-separated list of process instance ids that an external task may belong to. */
        processInstanceIdIn?: string
        /** @description Filter by the id of the process definition that an external task belongs to. */
        processDefinitionId?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * An external task must have one of the given tenant ids.
         */
        tenantIdIn?: string
        /** @description Only include active tasks. Value may only be `true`, as `false` matches any external task. */
        active?: boolean
        /** @description Only include suspended tasks. Value may only be `true`, as `false` matches any external task. */
        suspended?: boolean
        /**
         * @description Only include jobs with a priority higher than or equal to the given value.
         * Value must be a valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /**
         * @description Only include jobs with a priority lower than or equal to the given value.
         * Value must be a valid `long` value.
         */
        priorityLowerThanOrEquals?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Queries for the number of external tasks that fulfill given parameters. This method takes the same message
   * body as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.20/reference/rest/external-task/post-query/) method.
   */
  queryExternalTasksCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExternalTaskQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Fetch and Lock
   * @description Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted
   * to specific task topics and for each task topic an individual lock time can be provided.
   */
  fetchAndLock: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['FetchExternalTasksDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['LockedExternalTaskDto'][]
        }
      }
      /**
       * @description Bad Request. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Retries Sync
   * @description Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0,
   * an incident is created.
   */
  setExternalTaskRetries: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetRetriesForExternalTasksDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description In case the number of retries is negative or null, an exception of type `InvalidRequestException` is
       * returned. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Retries Async
   * @description Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0,
   * an incident is created.
   */
  setExternalTaskRetriesAsyncOperation: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetRetriesForExternalTasksDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or
       * the number of retries is negative or null, an exception of type `InvalidRequestException` is returned.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Topic Names
   * @description Queries for distinct topic names of external tasks that fulfill given parameters.
   * Query can be restricted to only tasks with retries left, tasks that are locked, or tasks
   * that are unlocked. The parameters withLockedTasks and withUnlockedTasks are
   * exclusive. Setting them both to true will return an empty list.
   * Providing no parameters will return a list of all distinct topic names with external tasks.
   */
  getTopicNames: {
    parameters: {
      query?: {
        /**
         * @description Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        withLockedTasks?: boolean
        /**
         * @description Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).
         * Value may only be `true`, as `false` matches any external task.
         */
        withUnlockedTasks?: boolean
        /**
         * @description Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be
         * `true`, as `false` matches any external task.
         */
        withRetriesLeft?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** @description Returned if some of the query parameters are invalid. */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.
   */
  getExternalTask: {
    parameters: {
      path: {
        /** @description The id of the external task to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ExternalTaskDto']
        }
      }
      /**
       * @description External task with the given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Handle BPMN Error
   * @description Reports a business error in the context of a running external task by id. The error code must be specified
   * to identify the BPMN error handler.
   */
  handleExternalTaskBpmnError: {
    parameters: {
      path: {
        /** @description The id of the external task in which context a BPMN error is reported. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExternalTaskBpmnError']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task's most recent lock was not acquired by the provided worker.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the corresponding process instance could not be resumed successfully.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Complete
   * @description Completes an external task by id and updates process variables.
   */
  completeExternalTaskResource: {
    parameters: {
      path: {
        /** @description The id of the task to complete. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompleteExternalTaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task's most recent lock was not acquired by the provided worker. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the corresponding process instance could not be resumed successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Error Details
   * @description Retrieves the error details in the context of a running external task by id.
   */
  getExternalTaskErrorDetails: {
    parameters: {
      path: {
        /** @description The id of the external task for which the error details should be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'text/plain': string
        }
      }
      /** @description Request successful. In case the external task has no error details. */
      204: {
        content: never
      }
      /**
       * @description An external task with the given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Extend Lock
   * @description Extends the timeout of the lock by a given amount of time.
   */
  extendLock: {
    parameters: {
      path: {
        /** @description The id of the external task. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExtendLockOnExternalTaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description In case the new lock duration is negative or the external task is not locked by the given worker or not
       * locked at all, an exception of type `InvalidRequestException` is returned. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Handle Failure
   * @description Reports a failure to execute an external task by id. A number of retries and a timeout until the task can
   * be retried can be specified. If retries are set to 0, an incident for this task is created.
   */
  handleFailure: {
    parameters: {
      path: {
        /** @description The id of the external task to report a failure for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ExternalTaskFailureDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task's most recent lock was not acquired by the provided worker. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the corresponding process instance could not be resumed successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /** @description Lock an external task by a given id for a specified worker and amount of time. */
  lock: {
    parameters: {
      path: {
        /** @description The id of the external task. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['LockExternalTaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description In case the lock duration is negative or the external task is already locked by
       * a different worker, an exception of type `InvalidRequestException` is returned. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Priority
   * @description Sets the priority of an existing external task by id. The default value of a priority is 0.
   */
  setExternalTaskResourcePriority: {
    parameters: {
      path: {
        /** @description The id of the external task to set the priority for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PriorityDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Retries
   * @description Sets the number of retries left to execute an external task by id. If retries are set to 0, an
   * incident is created.
   */
  setExternalTaskResourceRetries: {
    parameters: {
      path: {
        /** @description The id of the external task to set the number of retries for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RetriesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case the number of retries is negative or null, an exception of type `InvalidRequestException`
       * is returned. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Unlock
   * @description Unlocks an external task by id. Clears the task's lock expiration time and worker id.
   */
  unlock: {
    parameters: {
      path: {
        /** @description The id of the external task to unlock. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,
       * e.g., due to a caught BPMN boundary event. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Filters
   * @description Queries for a list of filters using a list of parameters. The size of the result
   * set can be retrieved
   * by using the [Get Filter Count](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-query-count/) method.
   */
  getFilterList: {
    parameters: {
      query?: {
        /** @description Filter by the id of the filter. */
        filterId?: string
        /** @description Filter by the resource type of the filter, e.g., `Task`. */
        resourceType?: string
        /** @description Filter by the name of the filter. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the user id of the owner of the filter. */
        owner?: string
        /**
         * @description If set to `true`, each filter result will contain an `itemCount` property
         * with the number of items matched by the filter itself.
         */
        itemCount?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'filterId' | 'resourceType' | 'name' | 'owner'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FilterDto'][]
        }
      }
      /**
       * @description
       * Returned if some of the query parameters are invalid, for example if
       * a `sortOrder`
       * parameter is supplied, but no `sortBy` is specified. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Filter Resource Options
   * @description The OPTIONS request allows you to check for the set of available operations
   * that the currently authenticated user can perform on the `/filter` resource.
   * Whether the user can perform an operation or not may depend on various
   * factors, including the users authorizations to interact with this
   * resource and the internal configuration of the process engine.
   */
  filterResourceOptions: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Get Filter Count
   * @description Retrieves the number of filters that fulfill a provided query. Corresponds to the
   * size of the result set when using the
   * [Get Filters](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-query/) method.
   */
  getFilterCount: {
    parameters: {
      query?: {
        /** @description Filter by the id of the filter. */
        filterId?: string
        /** @description Filter by the resource type of the filter, e.g., `Task`. */
        resourceType?: string
        /** @description Filter by the name of the filter. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the user id of the owner of the filter. */
        owner?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description
       * Returned if some of the query parameters are invalid, for example if
       * a `sortOrder`parameter is supplied, but no `sortBy`, or if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create Filter
   * @description Creates a new filter.
   */
  createFilter: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateFilterDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FilterDto']
        }
      }
      /**
       * @description
       * Filter was invalid. See
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to create a new filter. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Single Filter
   * @description Retrieves a single filter by id, according to the `Filter` interface in the engine.
   */
  getSingleFilter: {
    parameters: {
      query?: {
        /**
         * @description If set to `true`, each filter result will contain an `itemCount`
         * property with the number of items matched by the filter itself.
         */
        itemCount?: boolean
      }
      path: {
        /** @description The id of the filter to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FilterDto']
        }
      }
      /**
       * @description The authenticated user is unauthorized to read this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Filter
   * @description Updates an existing filter.
   */
  updateFilter: {
    parameters: {
      path: {
        /** @description The id of the filter to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateFilterDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description
       * Filter was invalid. See
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to update this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter cannot be found. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Filter
   * @description Deletes a filter by id.
   */
  deleteFilter: {
    parameters: {
      path: {
        /** @description The id of the filter to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description
       * The authenticated user is unauthorized to delete this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter cannot be found. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Filter Resource Options
   * @description The OPTIONS request allows you to check for the set of available operations
   * that the currently authenticated user can perform on the `/filter` resource.
   * Whether the user can perform an operation or not may depend on various
   * factors, including the users authorizations to interact with this
   * resource and the internal configuration of the process engine.
   */
  filterResourceOptionsSingle: {
    parameters: {
      path: {
        /** @description The id of the filter to be checked. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Execute Filter Count
   * @description Executes the saved query of the filter by id and returns the count.
   */
  executeFilterCount: {
    parameters: {
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Filter Count (POST)
   * @description Executes the saved query of the filter by id and returns the count. This method is
   * slightly more powerful then the [Get Execute Filter Count](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-count/)
   * method because it allows to extend the saved query of the filter.
   */
  postExecuteFilterCount: {
    parameters: {
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    /** @description A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. */
    requestBody?: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description
       * The extending query was invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Filter List
   * @description Executes the saved query of the filter by id and returns the result list.
   */
  executeFilterList: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine. */
      200: {
        content: {
          'application/json': Record<string, never>[]
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Filter List (POST)
   * @description Executes the saved query of the filter by id and returns the result list. This
   * method is slightly more powerful then the
   * [Get Execute FilterList](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-list/) method
   * because it allows to extend the saved query of the filter.
   */
  postExecuteFilterList: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    /** @description A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. */
    requestBody?: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine. */
      200: {
        content: {
          'application/json': Record<string, never>[]
        }
      }
      /**
       * @description
       * The extending query was invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Filter Single Result
   * @description Executes the saved query of the filter by id and returns the single result.
   */
  executeFilterSingleResult: {
    parameters: {
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. A JSON object corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Request successful, but the result was empty. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description
       * The executed filter returned more than one single result. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Filter Single Result (POST)
   * @description Executes the saved query of the filter by id and returns the single result. This method is slightly more
   * powerful then the [Get Execute Filter Single Result](https://docs.camunda.org/manual/7.20/reference/rest/filter/get-execute-single-result/)
   * method because it allows to extend the saved query of the filter.
   */
  postExecuteFilterSingleResult: {
    parameters: {
      path: {
        /** @description The id of the filter to execute. */
        id: string
      }
    }
    /** @description A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource. */
    requestBody?: {
      content: {
        'application/json': Record<string, never>
      }
    }
    responses: {
      /** @description Request successful. A JSON object corresponding to the corresponding entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine. */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Request successful, but the result was empty. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description
       * The executed filter returned more than one single result or the
       * extending query was invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * The authenticated user is unauthorized to read this filter. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description
       * Filter with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for a list of groups using a list of parameters. The size of the result set can be retrieved
   * by using the [Get Group Count](https://docs.camunda.org/manual/7.20/reference/rest/group/get-query-count) method.
   */
  getQueryGroups: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'id' | 'name' | 'type'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by the id of the group. */
        id?: string
        /** @description Filter by a comma seperated list of group ids. */
        idIn?: string
        /** @description Filter by the name of the group. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the type of the group. */
        type?: string
        /** @description Only retrieve groups where the given user id is a member of. */
        member?: string
        /** @description Only retrieve groups which are members of the given tenant. */
        memberOfTenant?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['GroupDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for a list of groups using a list of parameters.
   * The size of the result set can be retrieved by using the
   * [Get Group Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/group/post-query-count/) method.
   */
  postQueryGroups: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['GroupQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['GroupDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Group Resource Options
   * @description The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for
   * individual group instances. The OPTIONS request allows checking for the set of available operations that
   * the currently authenticated user can perform on the `/group` resource. If the user can perform an operation
   * or not may depend on various things, including the users authorizations to interact with this resource and
   * the internal configuration of the process engine.
   */
  availableGroupOperations: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for groups using a list of parameters and retrieves the count.
   */
  getGroupCount: {
    parameters: {
      query?: {
        /** @description Filter by the id of the group. */
        id?: string
        /** @description Filter by a comma seperated list of group ids. */
        idIn?: string
        /** @description Filter by the name of the group. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the type of the group. */
        type?: string
        /** @description Only retrieve groups where the given user id is a member of. */
        member?: string
        /** @description Only retrieve groups which are members of the given tenant. */
        memberOfTenant?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response
       * format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Queries for groups using a list of parameters and retrieves the count.
   */
  queryGroupCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['GroupQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response
       * format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create Group
   * @description Creates a new group.
   */
  createGroup: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['GroupDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The group could not be created due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Group
   * @description Retrieves a group by id.
   */
  getGroup: {
    parameters: {
      path: {
        /** @description The id of the group to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['GroupDto']
        }
      }
      /**
       * @description Group with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Group
   * @description Updates a given group by id.
   */
  updateGroup: {
    parameters: {
      path: {
        /** @description The id of the group. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['GroupDto']
      }
    }
    responses: {
      /** @description Request successful. No content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the group with the requested Id cannot be found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The group could not be updated due to an internal server error.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error
       * response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Group
   * @description Deletes a group by id.
   */
  deleteGroup: {
    parameters: {
      path: {
        /** @description The id of the group to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Group cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for
       * the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Group Resource Instance Options
   * @description The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances.
   * The OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the
   * `/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations
   * to interact with this resource and the internal configuration of the process engine.
   */
  availableGroupInstanceOperations: {
    parameters: {
      path: {
        /** @description The id of the group. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Group Membership Resource Options
   * @description The OPTIONS request allows checking for the set of available operations that the currently authenticated
   * user can perform on the resource. If the user can perform an operation or not may depend on various
   * things, including the users authorizations to interact with this resource and the internal configuration
   * of the process engine.
   */
  availableGroupMembersOperations: {
    parameters: {
      path: {
        /** @description The id of the group. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Create Group Member
   * @description Adds a member to a group.
   */
  createGroupMember: {
    parameters: {
      path: {
        /** @description The id of the group. */
        id: string
        /** @description The id of user to add to the group. */
        userId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an internal error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete a Group Member
   * @description Removes a member from a group.
   */
  deleteGroupMember: {
    parameters: {
      path: {
        /** @description The id of the group. */
        id: string
        /** @description The id of user to remove from the group. */
        userId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for historic activity instances that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
   */
  getHistoricActivityInstances: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'activityInstanceId'
          | 'instanceId'
          | 'executionId'
          | 'activityId'
          | 'activityName'
          | 'activityType'
          | 'startTime'
          | 'endTime'
          | 'duration'
          | 'definitionId'
          | 'occurrence'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by activity instance id. */
        activityInstanceId?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by the id of the execution that executed the activity instance. */
        executionId?: string
        /** @description Filter by the activity id (according to BPMN 2.0 XML). */
        activityId?: string
        /** @description Filter by the activity name (according to BPMN 2.0 XML). */
        activityName?: string
        /** @description Filter by activity type. */
        activityType?: string
        /** @description Only include activity instances that are user tasks and assigned to a given user. */
        taskAssignee?: string
        /**
         * @description Only include finished activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        finished?: boolean
        /**
         * @description Only include unfinished activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        unfinished?: boolean
        /**
         * @description Only include canceled activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        canceled?: boolean
        /**
         * @description Only include activity instances which completed a scope.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        completeScope?: boolean
        /**
         * @description Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /** @description Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids. */
        tenantIdIn?: string
        /** @description Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricActivityInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for historic activity instances that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.
   */
  queryHistoricActivityInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricActivityInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricActivityInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of historic activity instances that fulfill the given parameters.
   * Takes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.20/reference/rest/history/activity-instance/get-activity-instance-query/)  method.
   */
  getHistoricActivityInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by activity instance id. */
        activityInstanceId?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by the id of the execution that executed the activity instance. */
        executionId?: string
        /** @description Filter by the activity id (according to BPMN 2.0 XML). */
        activityId?: string
        /** @description Filter by the activity name (according to BPMN 2.0 XML). */
        activityName?: string
        /** @description Filter by activity type. */
        activityType?: string
        /** @description Only include activity instances that are user tasks and assigned to a given user. */
        taskAssignee?: string
        /**
         * @description Only include finished activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        finished?: boolean
        /**
         * @description Only include unfinished activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        unfinished?: boolean
        /**
         * @description Only include canceled activity instances.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        canceled?: boolean
        /**
         * @description Only include activity instances which completed a scope.
         * Value may only be `true`, as `false` behaves the same as when the property is not set.
         */
        completeScope?: boolean
        /**
         * @description Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /** @description Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids. */
        tenantIdIn?: string
        /** @description Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Queries for the number of historic activity instances that fulfill the given parameters.
   */
  queryHistoricActivityInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricActivityInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.
   */
  getHistoricActivityInstance: {
    parameters: {
      path: {
        /** @description The id of the historic activity instance to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricActivityInstanceDto']
        }
      }
      /**
       * @description Not Found
       * Historic activity instance with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Batches
   * @description Queries for historic batches that fulfill given parameters. Parameters may be
   * the properties of batches, such as the id or type. The
   * size of the result set can be retrieved by using the
   * [Get Historic Batch Count](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-query-count/)
   * method.
   */
  getHistoricBatches: {
    parameters: {
      query?: {
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /**
         * @description
         * Filter completed or not completed batches. If the value is
         * `true`, only completed batches, i.e., end time is set, are
         * returned. Otherwise, if the value is `false`, only running
         * batches, i.e., end time is null, are returned.
         */
        completed?: boolean
        /**
         * @description Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /** @description Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'batchId' | 'startTime' | 'endTime' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricBatchDto'][]
        }
      }
      /**
       * @description
       * Returned if some of the query parameters are invalid, for example if
       * a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Batch Report
   * @description Retrieves a report about a historic batch operations relevant to history cleanup
   * (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)
   * ) so that you can tune the history time to live.
   * These reports include the count of the finished batches, cleanable
   * batches and type of the batch.
   * The size of the result set can be retrieved by using the
   * [Get Cleanable Batch Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-cleanable-batch-report-count/)
   * method.
   *
   * **Please note:**
   * The history time to live for batch operations does not support [Multi-Tenancy](https://docs.camunda.org/manual/7.20/user-guide/process-engine/multi-tenancy.md).
   * The report will return an information for all batch operations (for all tenants) if you have permissions
   * to see the history.
   */
  getCleanableHistoricBatchesReport: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'finished'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CleanableHistoricBatchReportResultDto'][]
        }
      }
      /**
       * @description See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Batch Report Count
   * @description Queries for the number of report results about a historic batch operations relevant
   * to history cleanup (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)
   * ).
   * Takes the same parameters as the
   * [Get Cleanable Batch Report](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-cleanable-batch-report/)
   * method.
   */
  getCleanableHistoricBatchesReportCount: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Batch Count
   * @description Requests the number of historic batches that fulfill the query criteria.
   * Takes the same filtering parameters as the
   * [Get Historic Batches](https://docs.camunda.org/manual/7.20/reference/rest/history/batch/get-query/)
   * method.
   */
  getHistoricBatchesCount: {
    parameters: {
      query?: {
        /** @description Filter by batch id. */
        batchId?: string
        /**
         * @description Filter by batch type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/batch/#creating-a-batch)
         * for more information about batch types.
         */
        type?: string
        /**
         * @description
         * Filter completed or not completed batches. If the value is
         * `true`, only completed batches, i.e., end time is set, are
         * returned. Otherwise, if the value is `false`, only running
         * batches, i.e., end time is null, are returned.
         */
        completed?: boolean
        /**
         * @description Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /** @description Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description
       * Returned if some of the query parameters are invalid, for example if
       * a `sortOrder` parameter is supplied, but no `sortBy`.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Removal Time Async (POST)
   * @description Sets the removal time to multiple historic batches asynchronously (batch).
   *
   * At least __historicBatchIds__ or __historicBatchQuery__ has to be
   * provided. If both are provided,
   * all instances matching query criterion and instances from the list
   * will be updated with a removal time.
   */
  setRemovalTimeAsyncHistoricBatch: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetRemovalTimeToHistoricBatchesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description
       * Request was unsuccessful due to a bad user request. This occurs if
       * some of the query parameters are invalid, e.g. if neither
       * historicBatchIds nor historicBatchQuery is present or if no mode is
       * specified.
       *
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Batch
   * @description Retrieves a historic batch by id, according to the `HistoricBatch` interface in the
   * engine.
   */
  getHistoricBatch: {
    parameters: {
      path: {
        /** @description The id of the historic batch to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricBatchDto']
        }
      }
      /**
       * @description
       * Historic batch with given id does not exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Historic Batch
   * @description Deletes a historic batch by id, including related historic job logs.
   */
  deleteHistoricBatch: {
    parameters: {
      path: {
        /** @description The id of the batch to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Historic batch with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Clean up history (POST)
   * @description Schedules asynchronous history cleanup (See
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   *
   * **Note:** This endpoint will return at most a single history cleanup job.
   * Since version `7.9.0` it is possible to configure multiple
   * [parallel history cleanup jobs](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#parallel-execution). Use
   * [`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.20/reference/rest/history/history-cleanup/get-history-cleanup-jobs)
   * to find all the available history cleanup jobs.
   */
  cleanupAsync: {
    parameters: {
      query?: {
        /**
         * @description When true the job will be scheduled for nearest future. When `false`, the job will be
         * scheduled for next batch window start time. Default is `true`.
         */
        immediatelyDue?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid or the engine
       * does not participate in history cleanup. See
       * [Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#cleanup-execution-participation-per-node).
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get History Cleanup Configuration
   * @description Retrieves history cleanup batch window configuration (See
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   */
  getHistoryCleanupConfiguration: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoryCleanupConfigurationDto']
        }
      }
    }
  }
  /**
   * Find clean up history job (GET)
   * @deprecated
   * @description **Deprecated!** Use `GET /history/cleanup/jobs` instead.
   *
   * Finds history cleanup job (See
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   */
  findCleanupJob: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto']
        }
      }
      /** @description History clean up job does not exist. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Find clean up history jobs (GET)
   * @description Finds history cleanup jobs (See
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   */
  findCleanupJobs: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto'][]
        }
      }
      /** @description History clean up jobs are empty. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Decision Instance Report
   * @description Retrieves a report about a decision definition and finished decision instances
   * relevant to history cleanup (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)),
   * so that you can tune the history time to live.
   * These reports include the count of the finished historic decision
   * instances, cleanable decision instances and basic decision definition
   * data - id, key, name and version.
   * The size of the result set can be retrieved by using the
   * [Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.
   */
  getCleanableHistoricDecisionInstanceReport: {
    parameters: {
      query?: {
        /** @description Filter by decision definition ids. Must be a comma-separated list of decision definition ids. */
        decisionDefinitionIdIn?: string
        /** @description Filter by decision definition keys. Must be a comma-separated list of decision definition keys. */
        decisionDefinitionKeyIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant
         * ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include decision definitions which belong to no tenant. Value may only be `true`, as `false`
         * is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include decision instances which have more than zero finished instances. Value may only be `true`,
         * as `false` is the default behavior.
         */
        compact?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'finished'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CleanableHistoricDecisionInstanceReportResultDto'][]
        }
      }
      /**
       * @description See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Decision Instance Report Count
   * @description Queries for the number of report results about a decision definition and finished
   * decision instances relevant to history cleanup (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   * Takes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/)
   * method.
   */
  getCleanableHistoricDecisionInstanceReportCount: {
    parameters: {
      query?: {
        /** @description Filter by decision definition ids. Must be a comma-separated list of decision definition ids. */
        decisionDefinitionIdIn?: string
        /** @description Filter by decision definition keys. Must be a comma-separated list of decision definition keys. */
        decisionDefinitionKeyIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant
         * ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include decision definitions which belong to no tenant. Value may only be `true`, as `false`
         * is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include decision instances which have more than zero finished instances. Value may only be `true`,
         * as `false` is the default behavior.
         */
        compact?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Decision Instances
   * @description Queries for historic decision instances that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-instance/get-decision-instance-query-count/)
   * method.
   */
  getHistoricDecisionInstances: {
    parameters: {
      query?: {
        /** @description Filter by decision instance id. */
        decisionInstanceId?: string
        /** @description Filter by decision instance ids. Must be a comma-separated list of decision instance ids. */
        decisionInstanceIdIn?: string
        /** @description Filter by the decision definition the instances belongs to. */
        decisionDefinitionId?: string
        /**
         * @description Filter by the decision definitions the instances belongs to. Must be a
         * comma-separated list of decision definition ids.
         */
        decisionDefinitionIdIn?: string
        /** @description Filter by the key of the decision definition the instances belongs to. */
        decisionDefinitionKey?: string
        /**
         * @description Filter by the keys of the decision definition the instances belongs to. Must be a comma-
         * separated list of decision definition keys.
         */
        decisionDefinitionKeyIn?: string
        /** @description Filter by the name of the decision definition the instances belongs to. */
        decisionDefinitionName?: string
        /**
         * @description Filter by the name of the decision definition the instances belongs to, that the parameter
         * is a substring of.
         */
        decisionDefinitionNameLike?: string
        /** @description Filter by the process definition the instances belongs to. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances belongs to. */
        processDefinitionKey?: string
        /** @description Filter by the process instance the instances belongs to. */
        processInstanceId?: string
        /** @description Filter by the case definition the instances belongs to. */
        caseDefinitionId?: string
        /** @description Filter by the key of the case definition the instances belongs to. */
        caseDefinitionKey?: string
        /** @description Filter by the case instance the instances belongs to. */
        caseInstanceId?: string
        /**
         * @description Filter by the activity ids the instances belongs to.
         * Must be a comma-separated list of acitvity ids.
         */
        activityIdIn?: string
        /**
         * @description Filter by the activity instance ids the instances belongs to.
         * Must be a comma-separated list of acitvity instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A historic decision instance must have one
         * of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic decision instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Restrict to instances that were evaluated before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
         * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        evaluatedBefore?: string
        /**
         * @description Restrict to instances that were evaluated after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
         * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        evaluatedAfter?: string
        /** @description Restrict to instances that were evaluated by the given user. */
        userId?: string
        /**
         * @description Restrict to instances that have a given root decision instance id.
         * This also includes the decision instance with the given id.
         */
        rootDecisionInstanceId?: string
        /**
         * @description Restrict to instances those are the root decision instance of an evaluation.
         * Value may only be `true`, as `false` is the default behavior.
         */
        rootDecisionInstancesOnly?: boolean
        /** @description Filter by the decision requirements definition the instances belongs to. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by the key of the decision requirements definition the instances belongs to. */
        decisionRequirementsDefinitionKey?: string
        /**
         * @description Include input values in the result.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeInputs?: boolean
        /**
         * @description Include output values in the result.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeOutputs?: boolean
        /**
         * @description Disables fetching of byte array input and output values.
         * Value may only be `true`, as `false` is the default behavior.
         */
        disableBinaryFetching?: boolean
        /**
         * @description Disables deserialization of input and output values that are custom objects.
         * Value may only be `true`, as `false` is the default behavior.
         */
        disableCustomObjectDeserialization?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'evaluationTime' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDecisionInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Decision Instance Count
   * @description Queries for the number of historic decision instances that fulfill the given parameters.
   * Takes the same parameters as the
   * [Get Historic Decision Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/decision-instance/get-decision-instance-query/)
   * method.
   */
  getHistoricDecisionInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by decision instance id. */
        decisionInstanceId?: string
        /** @description Filter by decision instance ids. Must be a comma-separated list of decision instance ids. */
        decisionInstanceIdIn?: string
        /** @description Filter by the decision definition the instances belongs to. */
        decisionDefinitionId?: string
        /**
         * @description Filter by the decision definitions the instances belongs to. Must be a
         * comma-separated list of decision definition ids.
         */
        decisionDefinitionIdIn?: string
        /** @description Filter by the key of the decision definition the instances belongs to. */
        decisionDefinitionKey?: string
        /**
         * @description Filter by the keys of the decision definition the instances belongs to. Must be a comma-
         * separated list of decision definition keys.
         */
        decisionDefinitionKeyIn?: string
        /** @description Filter by the name of the decision definition the instances belongs to. */
        decisionDefinitionName?: string
        /**
         * @description Filter by the name of the decision definition the instances belongs to, that the parameter
         * is a substring of.
         */
        decisionDefinitionNameLike?: string
        /** @description Filter by the process definition the instances belongs to. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances belongs to. */
        processDefinitionKey?: string
        /** @description Filter by the process instance the instances belongs to. */
        processInstanceId?: string
        /** @description Filter by the case definition the instances belongs to. */
        caseDefinitionId?: string
        /** @description Filter by the key of the case definition the instances belongs to. */
        caseDefinitionKey?: string
        /** @description Filter by the case instance the instances belongs to. */
        caseInstanceId?: string
        /**
         * @description Filter by the activity ids the instances belongs to.
         * Must be a comma-separated list of acitvity ids.
         */
        activityIdIn?: string
        /**
         * @description Filter by the activity instance ids the instances belongs to.
         * Must be a comma-separated list of acitvity instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A historic decision instance must have one
         * of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic decision instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Restrict to instances that were evaluated before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
         * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        evaluatedBefore?: string
        /**
         * @description Restrict to instances that were evaluated after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-
         * dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        evaluatedAfter?: string
        /** @description Restrict to instances that were evaluated by the given user. */
        userId?: string
        /**
         * @description Restrict to instances that have a given root decision instance id.
         * This also includes the decision instance with the given id.
         */
        rootDecisionInstanceId?: string
        /**
         * @description Restrict to instances those are the root decision instance of an evaluation.
         * Value may only be `true`, as `false` is the default behavior.
         */
        rootDecisionInstancesOnly?: boolean
        /** @description Filter by the decision requirements definition the instances belongs to. */
        decisionRequirementsDefinitionId?: string
        /** @description Filter by the key of the decision requirements definition the instances belongs to. */
        decisionRequirementsDefinitionKey?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Async (POST)
   * @description Delete multiple historic decision instances asynchronously (batch).
   * At least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery`
   * has to be provided. If both are provided then all instances matching query
   * criterion and instances from the list will be deleted.
   */
  deleteAsync: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeleteHistoricDecisionInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, i.e. neither
       * `historicDecisionInstanceIds` nor `historicDecisionInstanceQuery` is
       * present. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Removal Time Async (POST)
   * @description Sets the removal time to multiple historic decision instances asynchronously
   * (batch).
   *
   * At least `historicDecisionInstanceIds` or
   * `historicDecisionInstanceQuery` has to be provided. If both are
   * provided, all instances matching query criterion and instances from the list
   * will be updated with a removal time.
   */
  setRemovalTimeAsyncHistoricDecisionInstance: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetRemovalTimeToHistoricDecisionInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Request was unsuccessfull due to a bad user request. This occurs if
       * some of the query parameters are invalid, e. g. if neither
       * historicDecisionInstances nor historicDecisionInstanceQuery is
       * present or if no mode is specified.
       *
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Decision Instance
   * @description Retrieves a historic decision instance by id, according to the
   * `HistoricDecisionInstance` interface in the engine.
   */
  getHistoricDecisionInstance: {
    parameters: {
      query?: {
        /**
         * @description Include input values in the result.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeInputs?: boolean
        /**
         * @description Include output values in the result.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeOutputs?: boolean
        /**
         * @description Disables fetching of byte array input and output values.
         * Value may only be `true`, as `false` is the default behavior.
         */
        disableBinaryFetching?: boolean
        /**
         * @description Disables deserialization of input and output values that are custom objects.
         * Value may only be `true`, as `false` is the default behavior.
         */
        disableCustomObjectDeserialization?: boolean
      }
      path: {
        /** @description The id of the historic decision instance to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDecisionInstanceDto']
        }
      }
      /**
       * @description Historic decision instance with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get DRD Statistics
   * @description Retrieves evaluation statistics of a given decision requirements definition.
   */
  getDecisionStatistics: {
    parameters: {
      query?: {
        /**
         * @description Restrict query results to be based only on specific evaluation
         * instance of a given decision requirements definition.
         */
        decisionInstanceId?: string
      }
      path: {
        /** @description The id of the decision requirements definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDecisionInstanceStatisticsDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Details
   * @description Queries for historic details that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Historic Detail Count](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query-count/) method.
   */
  getHistoricDetails: {
    parameters: {
      query?: {
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Only include historic details which belong to one of the passed comma-separated process instance ids. */
        processInstanceIdIn?: string
        /** @description Filter by execution id. */
        executionId?: string
        /** @description Filter by task id. */
        taskId?: string
        /** @description Filter by activity instance id. */
        activityInstanceId?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by case execution id. */
        caseExecutionId?: string
        /** @description Filter by variable instance id. */
        variableInstanceId?: string
        /**
         * @description Only include historic details where the variable updates belong to one of the passed comma-separated
         * list of variable types. A list of all supported variable types can be found
         * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
         * **Note:** All non-primitive variables are associated with the type `serializable`.
         */
        variableTypeIn?: string
        /** @description Filter by a comma-separated list of tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic details that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Filter by a user operation id. */
        userOperationId?: string
        /** @description Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior. */
        formFields?: boolean
        /** @description Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior. */
        variableUpdates?: boolean
        /**
         * @description Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.
         * When this parameter is used together with `taskId`, this call is ignored and task details are not excluded.
         * Value may only be `true`, as `false` is the default behavior.
         */
        excludeTaskDetails?: boolean
        /**
         * @description Restrict to historic variable updates that contain only initial variable values.
         * Value may only be `true`, as `false` is the default behavior.
         */
        initial?: boolean
        /**
         * @description Restrict to historic details that occured before the given date (including the date).
         * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
         */
        occurredBefore?: string
        /**
         * @description Restrict to historic details that occured after the given date (including the date).
         * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
         */
        occurredAfter?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'processInstanceId'
          | 'variableName'
          | 'variableType'
          | 'variableRevision'
          | 'formPropertyId'
          | 'time'
          | 'occurrence'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDetailDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Details (POST)
   * @description Queries for historic details that fulfill the given parameters. This method is slightly more
   * powerful than the [Get Historic Details](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query/)
   * method because it allows sorting by multiple parameters. The size of the result set can be retrieved by
   * using the [Get Historic Detail Count](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query-count/)
   * method.
   */
  queryHistoricDetails: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricDetailQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDetailDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Detail Count
   * @description Queries for the number of historic details that fulfill the given parameters.
   * Takes the same parameters as the [Get Historic
   * Details](https://docs.camunda.org/manual/7.20/reference/rest/history/detail/get-detail-query/)
   * method.
   */
  getHistoricDetailsCount: {
    parameters: {
      query?: {
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Only include historic details which belong to one of the passed comma-separated process instance ids. */
        processInstanceIdIn?: string
        /** @description Filter by execution id. */
        executionId?: string
        /** @description Filter by task id. */
        taskId?: string
        /** @description Filter by activity instance id. */
        activityInstanceId?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by case execution id. */
        caseExecutionId?: string
        /** @description Filter by variable instance id. */
        variableInstanceId?: string
        /**
         * @description Only include historic details where the variable updates belong to one of the passed comma-separated
         * list of variable types. A list of all supported variable types can be found
         * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
         * **Note:** All non-primitive variables are associated with the type `serializable`.
         */
        variableTypeIn?: string
        /** @description Filter by a comma-separated list of tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic details that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Filter by a user operation id. */
        userOperationId?: string
        /** @description Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior. */
        formFields?: boolean
        /** @description Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior. */
        variableUpdates?: boolean
        /**
         * @description Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.
         * When this parameter is used together with `taskId`, this call is ignored and task details are not excluded.
         * Value may only be `true`, as `false` is the default behavior.
         */
        excludeTaskDetails?: boolean
        /**
         * @description Restrict to historic variable updates that contain only initial variable values.
         * Value may only be `true`, as `false` is the default behavior.
         */
        initial?: boolean
        /**
         * @description Restrict to historic details that occured before the given date (including the date).
         * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
         */
        occurredBefore?: string
        /**
         * @description Restrict to historic details that occured after the given date (including the date).
         * Default [format](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/)
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
         */
        occurredAfter?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /** @description Returned if some of the query parameters are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Detail
   * @description Retrieves a historic detail by id.
   */
  historicDetail: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically
         * variables that store custom Java objects) should be deserialized
         * on server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on
         * server side and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean
         * property introspection feature. Note that this requires the Java
         * classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its
         * serialized format. For example, a variable that is serialized as
         * XML will be returned as a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of
         * backward compatibility, we recommend setting this parameter to
         * `false` when developing web applications that are independent of
         * the Java process applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the detail. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricDetailDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Detail (Binary)
   * @description Retrieves the content of a historic variable update by id. Applicable for byte
   * array and file variables.
   */
  historicDetailBinary: {
    parameters: {
      path: {
        /** @description The id of the historic variable update. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /**
       * @description Detail with given id exists but is not a binary variable. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Detail with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Logs
   * @description Queries for historic external task logs that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get External Task Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query-count/)
   * method.
   */
  getHistoricExternalTaskLogs: {
    parameters: {
      query?: {
        /** @description Filter by historic external task log id. */
        logId?: string
        /** @description Filter by external task id. */
        externalTaskId?: string
        /** @description Filter by an external task topic. */
        topicName?: string
        /** @description Filter by the id of the worker that the task was most recently locked by. */
        workerId?: string
        /** @description Filter by external task exception message. */
        errorMessage?: string
        /** @description Only include historic external task logs which belong to one of the passed activity ids. */
        activityIdIn?: string
        /**
         * @description Only include historic external task logs which belong to one of the passed activity
         * instance ids.
         */
        activityInstanceIdIn?: string
        /** @description Only include historic external task logs which belong to one of the passed execution ids. */
        executionIdIn?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /**
         * @description Only include historic external task log entries which belong to one of the passed and
         * comma-separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic external task log entries that belong to no tenant. Value may only
         * be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include logs for which the associated external task had a priority lower than or
         * equal to the given value. Value must be a valid `long` value.
         */
        priorityLowerThanOrEquals?: number
        /**
         * @description Only include logs for which the associated external task had a priority higher than or
         * equal to the given value. Value must be a valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
        creationLog?: boolean
        /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
        failureLog?: boolean
        /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
        successLog?: boolean
        /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
        deletionLog?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'timestamp'
          | 'externalTaskId'
          | 'topicName'
          | 'workerId'
          | 'retries'
          | 'priority'
          | 'activityId'
          | 'activityInstanceId'
          | 'executionId'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricExternalTaskLogDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Logs (POST)
   * @description Queries for historic external task logs that fulfill the given parameters.
   * This method is slightly more powerful than the
   * [Get External Task Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query/)
   * method because it allows filtering by historic external task logs
   * values of the different types `String`, `Number` or `Boolean`.
   */
  queryHistoricExternalTaskLogs: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricExternalTaskLogQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricExternalTaskLogDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Log Count
   * @description Queries for the number of historic external task logs that fulfill the given
   * parameters.
   * Takes the same parameters as the
   * [Get External Task Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query/)
   * method.
   */
  getHistoricExternalTaskLogsCount: {
    parameters: {
      query?: {
        /** @description Filter by historic external task log id. */
        logId?: string
        /** @description Filter by external task id. */
        externalTaskId?: string
        /** @description Filter by an external task topic. */
        topicName?: string
        /** @description Filter by the id of the worker that the task was most recently locked by. */
        workerId?: string
        /** @description Filter by external task exception message. */
        errorMessage?: string
        /** @description Only include historic external task logs which belong to one of the passed activity ids. */
        activityIdIn?: string
        /**
         * @description Only include historic external task logs which belong to one of the passed activity
         * instance ids.
         */
        activityInstanceIdIn?: string
        /** @description Only include historic external task logs which belong to one of the passed execution ids. */
        executionIdIn?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /**
         * @description Only include historic external task log entries which belong to one of the passed and
         * comma-separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic external task log entries that belong to no tenant. Value may only
         * be `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include logs for which the associated external task had a priority lower than or
         * equal to the given value. Value must be a valid `long` value.
         */
        priorityLowerThanOrEquals?: number
        /**
         * @description Only include logs for which the associated external task had a priority higher than or
         * equal to the given value. Value must be a valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
        creationLog?: boolean
        /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
        failureLog?: boolean
        /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
        successLog?: boolean
        /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
        deletionLog?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /** @description Returned if some of the query parameters are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Log Count (POST)
   * @description Queries for the number of historic external task logs that fulfill the given
   * parameters.
   * This method takes the same message body as the
   * [Get External Task Logs (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/post-external-task-log-query/)
   * method and therefore it is slightly more powerful than the
   * [Get External Task Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/external-task-log/get-external-task-log-query-count/)
   * method.
   */
  queryHistoricExternalTaskLogsCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricExternalTaskLogQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Log
   * @description Retrieves a historic external task log by id.
   */
  getHistoricExternalTaskLog: {
    parameters: {
      path: {
        /** @description The id of the log entry. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricExternalTaskLogDto']
        }
      }
      /**
       * @description Historic external task log with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get External Task Log Error Details
   * @description Retrieves the corresponding error details of the passed historic external task log
   * by id.
   */
  getErrorDetailsHistoricExternalTaskLog: {
    parameters: {
      path: {
        /** @description The id of the historic external task log to get the error details for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'text/plain': unknown
        }
      }
      /**
       * @description Historic external task log with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Identity Link Logs
   * @description Queries for historic identity link logs that fulfill given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/identity-links/get-identity-link-query-count/)
   * method.
   */
  getHistoricIdentityLinks: {
    parameters: {
      query?: {
        /** @description Restricts to identity links that have the given type (candidate/assignee/owner). */
        type?: string
        /** @description Restricts to identity links that have the given user id. */
        userId?: string
        /** @description Restricts to identity links that have the given group id. */
        groupId?: string
        /** @description Restricts to identity links that have the time before the given time. */
        dateBefore?: string
        /** @description Restricts to identity links that have the time after the given time. */
        dateAfter?: string
        /** @description Restricts to identity links that have the given task id. */
        taskId?: string
        /** @description Restricts to identity links that have the given process definition id. */
        processDefinitionId?: string
        /** @description Restricts to identity links that have the given process definition key. */
        processDefinitionKey?: string
        /** @description Restricts to identity links that have the given operationType (add/delete). */
        operationType?: string
        /** @description Restricts to identity links that have the given assigner id. */
        assignerId?: string
        /** @description Filter by a comma-separated list of tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic identity links that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'time'
          | 'type'
          | 'userId'
          | 'groupId'
          | 'taskId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'operationType'
          | 'assignerId'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricIdentityLinkLogDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Identity Link Log Count
   * @description Queries for the number of historic identity link logs that fulfill the given
   * parameters. Takes the same parameters as the
   * [Get Identity-Link-Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/identity-links/get-identity-link-query/)
   * method.
   */
  getHistoricIdentityLinksCount: {
    parameters: {
      query?: {
        /** @description Restricts to identity links that have the given type (candidate/assignee/owner). */
        type?: string
        /** @description Restricts to identity links that have the given user id. */
        userId?: string
        /** @description Restricts to identity links that have the given group id. */
        groupId?: string
        /** @description Restricts to identity links that have the time before the given time. */
        dateBefore?: string
        /** @description Restricts to identity links that have the time after the given time. */
        dateAfter?: string
        /** @description Restricts to identity links that have the given task id. */
        taskId?: string
        /** @description Restricts to identity links that have the given process definition id. */
        processDefinitionId?: string
        /** @description Restricts to identity links that have the given process definition key. */
        processDefinitionKey?: string
        /** @description Restricts to identity links that have the given operationType (add/delete). */
        operationType?: string
        /** @description Restricts to identity links that have the given assigner id. */
        assignerId?: string
        /** @description Filter by a comma-separated list of tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic identity links that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Incidents
   * @description Queries for historic incidents that fulfill given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Incident Count](https://docs.camunda.org/manual/7.20/reference/rest/history/incident/get-incident-query-count/)
   * method.
   */
  getHistoricIncidents: {
    parameters: {
      query?: {
        /** @description Restricts to incidents that have the given id. */
        incidentId?: string
        /**
         * @description Restricts to incidents that belong to the given incident type. See the [User
         * Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Restricts to incidents that have the given incident message. */
        incidentMessage?: string
        /**
         * @description Restricts to incidents that incidents message is a substring of the given value.
         * The string can include the wildcard character '%' to express
         * like-strategy: starts with (string%), ends with (%string) or contains
         * (%string%).
         */
        incidentMessageLike?: string
        /** @description Restricts to incidents that belong to a process definition with the given id. */
        processDefinitionId?: string
        /** @description Restricts to incidents that have the given processDefinitionKey. */
        processDefinitionKey?: string
        /** @description Restricts to incidents that have one of the given process definition keys. */
        processDefinitionKeyIn?: string
        /** @description Restricts to incidents that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Restricts to incidents that belong to an execution with the given id. */
        executionId?: string
        /**
         * @description Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        createTimeBefore?: string
        /**
         * @description Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        createTimeAfter?: string
        /**
         * @description Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        endTimeBefore?: string
        /**
         * @description Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        endTimeAfter?: string
        /** @description Restricts to incidents that belong to an activity with the given id. */
        activityId?: string
        /**
         * @description Restricts to incidents that were created due to the failure of an activity with the given
         * id.
         */
        failedActivityId?: string
        /** @description Restricts to incidents that have the given incident id as cause incident. */
        causeIncidentId?: string
        /** @description Restricts to incidents that have the given incident id as root cause incident. */
        rootCauseIncidentId?: string
        /** @description Restricts to incidents that have the given parameter set as configuration. */
        configuration?: string
        /** @description Restricts to incidents that have the given parameter set as history configuration. */
        historyConfiguration?: string
        /** @description Restricts to incidents that are open. */
        open?: boolean
        /** @description Restricts to incidents that are resolved. */
        resolved?: boolean
        /** @description Restricts to incidents that are deleted. */
        deleted?: boolean
        /** @description Restricts to incidents that have one of the given comma-separated tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic incidents that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Restricts to incidents that have one of the given comma-separated job definition ids. */
        jobDefinitionIdIn?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'incidentId'
          | 'incidentMessage'
          | 'createTime'
          | 'endTime'
          | 'incidentType'
          | 'executionId'
          | 'activityId'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'causeIncidentId'
          | 'rootCauseIncidentId'
          | 'configuration'
          | 'historyConfiguration'
          | 'tenantId'
          | 'incidentState'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricIncidentDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Incident Count
   * @description Queries for the number of historic incidents that fulfill the given parameters.
   * Takes the same parameters as the
   * [Get Incidents](https://docs.camunda.org/manual/7.20/reference/rest/history/incident/get-incident-query/)
   * method.
   */
  getHistoricIncidentsCount: {
    parameters: {
      query?: {
        /** @description Restricts to incidents that have the given id. */
        incidentId?: string
        /**
         * @description Restricts to incidents that belong to the given incident type. See the [User
         * Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Restricts to incidents that have the given incident message. */
        incidentMessage?: string
        /**
         * @description Restricts to incidents that incidents message is a substring of the given value.
         * The string can include the wildcard character '%' to express
         * like-strategy: starts with (string%), ends with (%string) or contains
         * (%string%).
         */
        incidentMessageLike?: string
        /** @description Restricts to incidents that belong to a process definition with the given id. */
        processDefinitionId?: string
        /** @description Restricts to incidents that have the given processDefinitionKey. */
        processDefinitionKey?: string
        /** @description Restricts to incidents that have one of the given process definition keys. */
        processDefinitionKeyIn?: string
        /** @description Restricts to incidents that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Restricts to incidents that belong to an execution with the given id. */
        executionId?: string
        /**
         * @description Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        createTimeBefore?: string
        /**
         * @description Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        createTimeAfter?: string
        /**
         * @description Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        endTimeBefore?: string
        /**
         * @description Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format
         * `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        endTimeAfter?: string
        /** @description Restricts to incidents that belong to an activity with the given id. */
        activityId?: string
        /**
         * @description Restricts to incidents that were created due to the failure of an activity with the given
         * id.
         */
        failedActivityId?: string
        /** @description Restricts to incidents that have the given incident id as cause incident. */
        causeIncidentId?: string
        /** @description Restricts to incidents that have the given incident id as root cause incident. */
        rootCauseIncidentId?: string
        /** @description Restricts to incidents that have the given parameter set as configuration. */
        configuration?: string
        /** @description Restricts to incidents that have the given parameter set as history configuration. */
        historyConfiguration?: string
        /** @description Restricts to incidents that are open. */
        open?: boolean
        /** @description Restricts to incidents that are resolved. */
        resolved?: boolean
        /** @description Restricts to incidents that are deleted. */
        deleted?: boolean
        /** @description Restricts to incidents that have one of the given comma-separated tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include historic incidents that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Restricts to incidents that have one of the given comma-separated job definition ids. */
        jobDefinitionIdIn?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Logs
   * @description Queries for historic job logs that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Job Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query-count/)
   * method.
   */
  getHistoricJobLogs: {
    parameters: {
      query?: {
        /** @description Filter by historic job log id. */
        logId?: string
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by job exception message. */
        jobExceptionMessage?: string
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /**
         * @description Filter by job definition type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
         * for more information about job definition types.
         */
        jobDefinitionType?: string
        /** @description Filter by job definition configuration. */
        jobDefinitionConfiguration?: string
        /** @description Only include historic job logs which belong to one of the passed activity ids. */
        activityIdIn?: string
        /** @description Only include historic job logs which belong to failures of one of the passed activity ids. */
        failedActivityIdIn?: string
        /** @description Only include historic job logs which belong to one of the passed execution ids. */
        executionIdIn?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /** @description Filter by deployment id. */
        deploymentId?: string
        /**
         * @description Only include historic job log entries which belong to one of the passed and comma-
         * separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic job log entries that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Filter by hostname. */
        hostname?: string
        /**
         * @description Only include logs for which the associated job had a priority lower than or equal to the
         * given value. Value must be a valid `long` value.
         */
        jobPriorityLowerThanOrEquals?: number
        /**
         * @description Only include logs for which the associated job had a priority higher than or equal to the
         * given value. Value must be a valid `long` value.
         */
        jobPriorityHigherThanOrEquals?: number
        /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
        creationLog?: boolean
        /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
        failureLog?: boolean
        /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
        successLog?: boolean
        /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
        deletionLog?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'timestamp'
          | 'jobId'
          | 'jobDefinitionId'
          | 'jobDueDate'
          | 'jobRetries'
          | 'jobPriority'
          | 'activityId'
          | 'executionId'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'deploymentId'
          | 'hostname'
          | 'occurrence'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricJobLogDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Logs (POST)
   * @description Queries for historic job logs that fulfill the given parameters.
   * This method is slightly more powerful than the
   * [Get Job Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query/)
   * method because it allows filtering by historic job logs values of the
   * different types `String`, `Number` or `Boolean`.
   */
  queryHistoricJobLogs: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricJobLogQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricJobLogDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Log Count
   * @description Queries for the number of historic job logs that fulfill the given parameters.
   * Takes the same parameters as the
   * [Get Job Logs](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query/)
   * method.
   */
  getHistoricJobLogsCount: {
    parameters: {
      query?: {
        /** @description Filter by historic job log id. */
        logId?: string
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by job exception message. */
        jobExceptionMessage?: string
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /**
         * @description Filter by job definition type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
         * for more information about job definition types.
         */
        jobDefinitionType?: string
        /** @description Filter by job definition configuration. */
        jobDefinitionConfiguration?: string
        /** @description Only include historic job logs which belong to one of the passed activity ids. */
        activityIdIn?: string
        /** @description Only include historic job logs which belong to failures of one of the passed activity ids. */
        failedActivityIdIn?: string
        /** @description Only include historic job logs which belong to one of the passed execution ids. */
        executionIdIn?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /** @description Filter by deployment id. */
        deploymentId?: string
        /**
         * @description Only include historic job log entries which belong to one of the passed and comma-
         * separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic job log entries that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Filter by hostname. */
        hostname?: string
        /**
         * @description Only include logs for which the associated job had a priority lower than or equal to the
         * given value. Value must be a valid `long` value.
         */
        jobPriorityLowerThanOrEquals?: number
        /**
         * @description Only include logs for which the associated job had a priority higher than or equal to the
         * given value. Value must be a valid `long` value.
         */
        jobPriorityHigherThanOrEquals?: number
        /** @description Only include creation logs. Value may only be `true`, as `false` is the default behavior. */
        creationLog?: boolean
        /** @description Only include failure logs. Value may only be `true`, as `false` is the default behavior. */
        failureLog?: boolean
        /** @description Only include success logs. Value may only be `true`, as `false` is the default behavior. */
        successLog?: boolean
        /** @description Only include deletion logs. Value may only be `true`, as `false` is the default behavior. */
        deletionLog?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /** @description Returned if some of the query parameters are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Log Count (POST)
   * @description Queries for the number of historic job logs that fulfill the given parameters.
   * This method takes the same message body as the
   * [Get Job Logs (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/post-job-log-query/)
   * method and therefore it is slightly more powerful than the
   * [Get Job Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/job-log/get-job-log-query-count/)
   * method.
   */
  queryHistoricJobLogsCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricJobLogQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Log
   * @description Retrieves a historic job log by id.
   */
  getHistoricJobLog: {
    parameters: {
      path: {
        /** @description The id of the log entry. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricJobLogDto']
        }
      }
      /**
       * @description Historic job log with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Log Exception Stacktrace
   * @description Retrieves the corresponding exception stacktrace to the passed historic job log by
   * id.
   */
  getStacktraceHistoricJobLog: {
    parameters: {
      path: {
        /** @description The id of the historic job log to get the exception stacktrace for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'text/plain': unknown
        }
      }
      /**
       * @description Historic job log with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Process Instance Report
   * @description Retrieves a report about a process definition and finished process instances
   * relevant to history cleanup (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup))
   * so that you can tune the history time to live.
   * These reports include the count of the finished historic process
   * instances, cleanable process instances and basic process definition
   * data - id, key, name and version.
   * The size of the result set can be retrieved by using the
   * [Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/)
   * method.
   */
  getCleanableHistoricProcessInstanceReport: {
    parameters: {
      query?: {
        /** @description Filter by process definition ids. Must be a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by process definition keys. Must be a comma-separated list of process definition keys. */
        processDefinitionKeyIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A process definition must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include process definitions which belong to no tenant. Value may only be `true`, as
         * `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include process instances which have more than zero finished instances. Value may
         * only be `true`, as `false` is the default behavior.
         */
        compact?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'finished'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CleanableHistoricProcessInstanceReportResultDto'][]
        }
      }
      /**
       * @description See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Cleanable Process Instance Report Count
   * @description Queries for the number of report results about a process definition and finished
   * process instances relevant to history cleanup (see
   * [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup)).
   * Takes the same parameters as the
   * [Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.20/reference/rest/history/process-definition/get-cleanable-process-instance-report/)
   * method.
   */
  getCleanableHistoricProcessInstanceReportCount: {
    parameters: {
      query?: {
        /** @description Filter by process definition ids. Must be a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by process definition keys. Must be a comma-separated list of process definition keys. */
        processDefinitionKeyIn?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A process definition must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include process definitions which belong to no tenant. Value may only be `true`, as
         * `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include process instances which have more than zero finished instances. Value may
         * only be `true`, as `false` is the default behavior.
         */
        compact?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Historic Activity Statistics
   * @description Retrieves historic statistics of a given process definition, grouped by activities.
   * These statistics include the number of running activity instances and,
   * optionally, the number of canceled activity instances, finished
   * activity instances and activity instances which completed a scope
   * (i.e., in BPMN 2.0 manner: a scope is completed by an activity
   * instance when the activity instance consumed a token but did not emit
   * a new token).
   * **Note:** This only includes historic data.
   */
  getHistoricActivityStatistics: {
    parameters: {
      query?: {
        /**
         * @description Whether to include the number of canceled activity instances in the result or not. Valid
         * values are `true` or `false`. Default: `false`.
         */
        canceled?: boolean
        /**
         * @description Whether to include the number of finished activity instances in the result or not. Valid
         * values are `true` or `false`. Default: `false`.
         */
        finished?: boolean
        /**
         * @description Whether to include the number of activity instances which completed a scope in the result
         * or not. Valid values are `true` or `false`. Default: `false`.
         */
        completeScope?: boolean
        /** @description Whether to include the number of incidents. Valid values are `true` or `false`. Default: `false`. */
        incidents?: boolean
        /**
         * @description Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /**
         * @description Restrict to process instances with the given IDs. The IDs must be provided as a comma-
         * separated list.
         */
        processInstanceIdIn?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'activityId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
      }
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricActivityStatisticsDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for historic process instances that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Process Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query-count/) method.
   */
  getHistoricProcessInstances: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'instanceId'
          | 'definitionId'
          | 'definitionKey'
          | 'definitionName'
          | 'definitionVersion'
          | 'businessKey'
          | 'startTime'
          | 'endTime'
          | 'duration'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process instance ids. Filter by a comma-separated list of `Strings`. */
        processInstanceIds?: string
        /** @description Filter by the process definition the instances run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances run on. */
        processDefinitionKey?: string
        /** @description Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`. */
        processDefinitionKeyIn?: string
        /** @description Filter by the name of the process definition the instances run on. */
        processDefinitionName?: string
        /** @description Filter by process definition names that the parameter is a substring of. */
        processDefinitionNameLike?: string
        /** @description Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`. */
        processDefinitionKeyNotIn?: string
        /** @description Filter by process instance business key. */
        processInstanceBusinessKey?: string
        /** @description Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings` */
        processInstanceBusinessKeyIn?: string
        /** @description Filter by process instance business key that the parameter is a substring of. */
        processInstanceBusinessKeyLike?: string
        /** @description Restrict the query to all process instances that are top level process instances. */
        rootProcessInstances?: boolean
        /**
         * @description Only include finished process instances. This flag includes all process instances
         * that are completed or terminated. Value may only be `true`, as `false` is the default behavior.
         */
        finished?: boolean
        /** @description Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior. */
        unfinished?: boolean
        /** @description Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior. */
        withIncidents?: boolean
        /** @description Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior. */
        withRootIncidents?: boolean
        /** @description Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
        incidentType?: string
        /** @description Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. */
        incidentStatus?: 'open' | 'resolved'
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Restrict to instances that were started before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to instances that were started after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to instances that were finished before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to instances that were finished after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /**
         * @description Restrict to instances that executed an activity after the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedActivityAfter?: string
        /**
         * @description Restrict to instances that executed an activity before the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedActivityBefore?: string
        /**
         * @description Restrict to instances that executed an job after the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedJobAfter?: string
        /**
         * @description Restrict to instances that executed an job before the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedJobBefore?: string
        /** @description Only include process instances that were started by the given user. */
        startedBy?: string
        /** @description Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. */
        superProcessInstanceId?: string
        /** @description Restrict query to one process instance that has a sub process instance with the given id. */
        subProcessInstanceId?: string
        /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
        superCaseInstanceId?: string
        /** @description Restrict query to one process instance that has a sub case instance with the given id. */
        subCaseInstanceId?: string
        /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
        caseInstanceId?: string
        /** @description Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings` */
        tenantIdIn?: string
        /** @description Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
        /** @description Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings` */
        executedActivityIdIn?: string
        /** @description Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings` */
        activeActivityIdIn?: string
        /** @description Restrict to instances that are active. */
        active?: boolean
        /** @description Restrict to instances that are suspended. */
        suspended?: boolean
        /** @description Restrict to instances that are completed. */
        completed?: boolean
        /** @description Restrict to instances that are externallyTerminated. */
        externallyTerminated?: boolean
        /** @description Restrict to instances that are internallyTerminated. */
        internallyTerminated?: boolean
        /**
         * @description Only include process instances that have/had variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as follows:
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note:** Values are always treated as String objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
         *
         * Key and value may not contain underscore or comma characters.
         */
        variables?: string
        /** @description Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal. */
        variableNamesIgnoreCase?: boolean
        /** @description Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal. */
        variableValuesIgnoreCase?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricProcessInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for historic process instances that fulfill the given parameters.
   * This method is slightly more powerful than the
   * [Get Process Instance](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/)
   * because it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.
   */
  queryHistoricProcessInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricProcessInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricProcessInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of historic process instances that fulfill the given parameters.
   * Takes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/) method.
   */
  getHistoricProcessInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process instance ids. Filter by a comma-separated list of `Strings`. */
        processInstanceIds?: string
        /** @description Filter by the process definition the instances run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances run on. */
        processDefinitionKey?: string
        /** @description Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`. */
        processDefinitionKeyIn?: string
        /** @description Filter by the name of the process definition the instances run on. */
        processDefinitionName?: string
        /** @description Filter by process definition names that the parameter is a substring of. */
        processDefinitionNameLike?: string
        /** @description Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`. */
        processDefinitionKeyNotIn?: string
        /** @description Filter by process instance business key. */
        processInstanceBusinessKey?: string
        /** @description Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings` */
        processInstanceBusinessKeyIn?: string
        /** @description Filter by process instance business key that the parameter is a substring of. */
        processInstanceBusinessKeyLike?: string
        /** @description Restrict the query to all process instances that are top level process instances. */
        rootProcessInstances?: boolean
        /**
         * @description Only include finished process instances. This flag includes all process instances
         * that are completed or terminated. Value may only be `true`, as `false` is the default behavior.
         */
        finished?: boolean
        /** @description Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior. */
        unfinished?: boolean
        /** @description Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior. */
        withIncidents?: boolean
        /** @description Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior. */
        withRootIncidents?: boolean
        /** @description Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident types. */
        incidentType?: string
        /** @description Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. */
        incidentStatus?: 'open' | 'resolved'
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Restrict to instances that were started before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to instances that were started after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to instances that were finished before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to instances that were finished after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /**
         * @description Restrict to instances that executed an activity after the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedActivityAfter?: string
        /**
         * @description Restrict to instances that executed an activity before the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedActivityBefore?: string
        /**
         * @description Restrict to instances that executed an job after the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedJobAfter?: string
        /**
         * @description Restrict to instances that executed an job before the given date (inclusive).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        executedJobBefore?: string
        /** @description Only include process instances that were started by the given user. */
        startedBy?: string
        /** @description Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. */
        superProcessInstanceId?: string
        /** @description Restrict query to one process instance that has a sub process instance with the given id. */
        subProcessInstanceId?: string
        /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
        superCaseInstanceId?: string
        /** @description Restrict query to one process instance that has a sub case instance with the given id. */
        subCaseInstanceId?: string
        /** @description Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. */
        caseInstanceId?: string
        /** @description Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings` */
        tenantIdIn?: string
        /** @description Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior. */
        withoutTenantId?: boolean
        /** @description Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings` */
        executedActivityIdIn?: string
        /** @description Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings` */
        activeActivityIdIn?: string
        /** @description Restrict to instances that are active. */
        active?: boolean
        /** @description Restrict to instances that are suspended. */
        suspended?: boolean
        /** @description Restrict to instances that are completed. */
        completed?: boolean
        /** @description Restrict to instances that are externallyTerminated. */
        externallyTerminated?: boolean
        /** @description Restrict to instances that are internallyTerminated. */
        internallyTerminated?: boolean
        /**
         * @description Only include process instances that have/had variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as follows:
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note:** Values are always treated as String objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
         *
         * Key and value may not contain underscore or comma characters.
         */
        variables?: string
        /** @description Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal. */
        variableNamesIgnoreCase?: boolean
        /** @description Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal. */
        variableValuesIgnoreCase?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Queries for the number of historic process instances that fulfill the given parameters.
   * This method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/get-process-instance-query/) method and
   * therefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/process-instance/post-process-instance-query-count/) method.
   */
  queryHistoricProcessInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricProcessInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Async (POST)
   * @description Delete multiple historic process instances asynchronously (batch).
   * At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
   * If both are provided then all instances matching query criterion and instances from the list will be deleted.
   */
  deleteHistoricProcessInstancesAsync: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeleteHistoricProcessInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds,
       * nor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Duration Report
   * @description Retrieves a report about the duration of completed process instances, grouped by a period.
   * These reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.
   *
   * **Note:** This only includes historic data.
   */
  getHistoricProcessInstanceDurationReport: {
    parameters: {
      query: {
        /**
         * @description **Mandatory.** Specifies the type of the report to retrieve.
         * To retrieve a report about the duration of process instances, the value must be set to `duration`.
         */
        reportType: string
        /** @description **Mandatory.** Specifies the granularity of the report. Valid values are `month` and `quarter`. */
        periodUnit: 'month' | 'quarter'
        /** @description Filter by process definition ids. Must be a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by process definition keys. Must be a comma-separated list of process definition keys. */
        processDefinitionKeyIn?: string
        /**
         * @description Restrict to instances that were started before the given date.
         * By [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to instances that were started after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['DurationReportResultDto'][]
          'application/csv': unknown
          'text/csv': unknown
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid or mandatory parameters are not supplied.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the authenticated user is unauthorized to read the history.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Removal Time Async (POST)
   * @description Sets the removal time to multiple historic process instances asynchronously (batch).
   *
   * At least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.
   * If both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.
   */
  setRemovalTimeAsync: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetRemovalTimeToHistoricProcessInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Request was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid,
       * e. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.
   */
  getHistoricProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the historic process instance to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricProcessInstanceDto']
        }
      }
      /**
       * @description Not Found
       * Historic process instance with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Deletes a process instance from the history by id.
   */
  deleteHistoricProcessInstance: {
    parameters: {
      query?: {
        /** @description If set to `false`, the request will still be successful if the process id is not found. */
        failIfNotExists?: boolean
      }
      path: {
        /** @description The id of the historic process instance to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Not found
       * Historic process instance with given id does not exist.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Variable Instances
   * @description Deletes all variables of a process instance from the history by id.
   */
  deleteHistoricVariableInstancesOfHistoricProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the process instance for which all historic variables are to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Not found
       * Historic process instance with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#parse-exceptions) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Tasks (Historic)
   * @description Queries for historic tasks that fulfill the given parameters. The size of the result
   * set can be retrieved by using the
   * [Get Task Count](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query-count/)
   * method.
   */
  getHistoricTaskInstances: {
    parameters: {
      query?: {
        /** @description Filter by task id. */
        taskId?: string
        /** @description Filter by parent task id. */
        taskParentTaskId?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process instance business key. */
        processInstanceBusinessKey?: string
        /**
         * @description Filter by process instances with one of the give business keys.
         * The keys need to be in a comma-separated list.
         */
        processInstanceBusinessKeyIn?: string
        /** @description Filter by  process instance business key that has the parameter value as a substring. */
        processInstanceBusinessKeyLike?: string
        /** @description Filter by the id of the execution that executed the task. */
        executionId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Restrict to tasks that belong to a process definition with the given key. */
        processDefinitionKey?: string
        /** @description Restrict to tasks that belong to a process definition with the given name. */
        processDefinitionName?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by the id of the case execution that executed the task. */
        caseExecutionId?: string
        /** @description Filter by case definition id. */
        caseDefinitionId?: string
        /** @description Restrict to tasks that belong to a case definition with the given key. */
        caseDefinitionKey?: string
        /** @description Restrict to tasks that belong to a case definition with the given name. */
        caseDefinitionName?: string
        /** @description Only include tasks which belong to one of the passed comma-separated activity instance ids. */
        activityInstanceIdIn?: string
        /** @description Restrict to tasks that have the given name. */
        taskName?: string
        /** @description Restrict to tasks that have a name with the given parameter value as substring. */
        taskNameLike?: string
        /** @description Restrict to tasks that have the given description. */
        taskDescription?: string
        /** @description Restrict to tasks that have a description that has the parameter value as a substring. */
        taskDescriptionLike?: string
        /** @description Restrict to tasks that have the given key. */
        taskDefinitionKey?: string
        /** @description Restrict to tasks that have one of the passed comma-separated task definition keys. */
        taskDefinitionKeyIn?: string
        /** @description Restrict to tasks that have the given delete reason. */
        taskDeleteReason?: string
        /** @description Restrict to tasks that have a delete reason that has the parameter value as a substring. */
        taskDeleteReasonLike?: string
        /** @description Restrict to tasks that the given user is assigned to. */
        taskAssignee?: string
        /** @description Restrict to tasks that are assigned to users with the parameter value as a substring. */
        taskAssigneeLike?: string
        /** @description Restrict to tasks that the given user owns. */
        taskOwner?: string
        /** @description Restrict to tasks that are owned by users with the parameter value as a substring. */
        taskOwnerLike?: string
        /** @description Restrict to tasks that have the given priority. */
        taskPriority?: number
        /** @description If set to `true`, restricts the query to all tasks that are assigned. */
        assigned?: boolean
        /** @description If set to `true`, restricts the query to all tasks that are unassigned. */
        unassigned?: boolean
        /** @description Only include finished tasks. Value may only be `true`, as `false` is the default behavior. */
        finished?: boolean
        /**
         * @description Only include unfinished tasks. Value may only be `true`, as `false` is the default
         * behavior.
         */
        unfinished?: boolean
        /**
         * @description Only include tasks of finished processes. Value may only be `true`, as `false` is the
         * default behavior.
         */
        processFinished?: boolean
        /**
         * @description Only include tasks of unfinished processes. Value may only be `true`, as `false` is the
         * default behavior.
         */
        processUnfinished?: boolean
        /**
         * @description Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDate?: string
        /**
         * @description Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDateBefore?: string
        /**
         * @description Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDateAfter?: string
        /**
         * @description Only include tasks which have no due date. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withoutTaskDueDate?: boolean
        /**
         * @description Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDate?: string
        /**
         * @description Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDateBefore?: string
        /**
         * @description Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDateAfter?: string
        /**
         * @description Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A task instance must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic task instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include tasks that have variables with certain values. Variable filtering expressions are
         * comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         *
         * Valid operator values are:
         * * `eq` - equal to;
         * * `neq` - not equal to;
         * * `gt` - greater than;
         * * `gteq` - greater than or equal to;
         * * `lt` - lower than;
         * * `lteq` - lower than or equal to;
         * * `like`.
         *
         * `key` and `value` may not contain underscore or comma characters.
         */
        taskVariables?: string
        /**
         * @description Only include tasks that belong to process instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         *
         * Valid operator values are:
         * * `eq` - equal to;
         * * `neq` - not equal to;
         * * `gt` - greater than;
         * * `gteq` - greater than or equal to;
         * * `lt` - lower than;
         * * `lteq` - lower than or equal to;
         * * `like`;
         * * `notLike`.
         *
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Match the variable name provided in `taskVariables` and `processVariables` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match the variable value provided in `taskVariables` and `processVariables` case-
         * insensitively. If set to `true` **variableValue** and **variablevalue** are
         * treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Restrict to tasks with a historic identity link to the given user. */
        taskInvolvedUser?: string
        /** @description Restrict to tasks with a historic identity link to the given group. */
        taskInvolvedGroup?: string
        /** @description Restrict to tasks with a historic identity link to the given candidate user. */
        taskHadCandidateUser?: string
        /** @description Restrict to tasks with a historic identity link to the given candidate group. */
        taskHadCandidateGroup?: string
        /**
         * @description Only include tasks which have a candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateGroups?: boolean
        /**
         * @description Only include tasks which have no candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateGroups?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'taskId'
          | 'activityInstanceId'
          | 'processDefinitionId'
          | 'processInstanceId'
          | 'executionId'
          | 'duration'
          | 'endTime'
          | 'startTime'
          | 'taskName'
          | 'taskDescription'
          | 'assignee'
          | 'owner'
          | 'dueDate'
          | 'followUpDate'
          | 'deleteReason'
          | 'taskDefinitionKey'
          | 'priority'
          | 'caseDefinitionId'
          | 'caseInstanceId'
          | 'caseExecutionId'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricTaskInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Tasks (Historic) (POST)
   * @description Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful
   * than the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/) method because
   * it allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.
   * The size of the result set can be retrieved by using the
   * [Get Task Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/post-task-query-count/)
   * method.
   */
  queryHistoricTaskInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricTaskInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricTaskInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Count
   * @description Queries for the number of historic tasks that fulfill the given parameters.
   * Takes the same parameters as the
   * [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/)
   * method.
   */
  getHistoricTaskInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by task id. */
        taskId?: string
        /** @description Filter by parent task id. */
        taskParentTaskId?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by process instance business key. */
        processInstanceBusinessKey?: string
        /**
         * @description Filter by process instances with one of the give business keys.
         * The keys need to be in a comma-separated list.
         */
        processInstanceBusinessKeyIn?: string
        /** @description Filter by  process instance business key that has the parameter value as a substring. */
        processInstanceBusinessKeyLike?: string
        /** @description Filter by the id of the execution that executed the task. */
        executionId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Restrict to tasks that belong to a process definition with the given key. */
        processDefinitionKey?: string
        /** @description Restrict to tasks that belong to a process definition with the given name. */
        processDefinitionName?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by the id of the case execution that executed the task. */
        caseExecutionId?: string
        /** @description Filter by case definition id. */
        caseDefinitionId?: string
        /** @description Restrict to tasks that belong to a case definition with the given key. */
        caseDefinitionKey?: string
        /** @description Restrict to tasks that belong to a case definition with the given name. */
        caseDefinitionName?: string
        /** @description Only include tasks which belong to one of the passed comma-separated activity instance ids. */
        activityInstanceIdIn?: string
        /** @description Restrict to tasks that have the given name. */
        taskName?: string
        /** @description Restrict to tasks that have a name with the given parameter value as substring. */
        taskNameLike?: string
        /** @description Restrict to tasks that have the given description. */
        taskDescription?: string
        /** @description Restrict to tasks that have a description that has the parameter value as a substring. */
        taskDescriptionLike?: string
        /** @description Restrict to tasks that have the given key. */
        taskDefinitionKey?: string
        /** @description Restrict to tasks that have one of the passed comma-separated task definition keys. */
        taskDefinitionKeyIn?: string
        /** @description Restrict to tasks that have the given delete reason. */
        taskDeleteReason?: string
        /** @description Restrict to tasks that have a delete reason that has the parameter value as a substring. */
        taskDeleteReasonLike?: string
        /** @description Restrict to tasks that the given user is assigned to. */
        taskAssignee?: string
        /** @description Restrict to tasks that are assigned to users with the parameter value as a substring. */
        taskAssigneeLike?: string
        /** @description Restrict to tasks that the given user owns. */
        taskOwner?: string
        /** @description Restrict to tasks that are owned by users with the parameter value as a substring. */
        taskOwnerLike?: string
        /** @description Restrict to tasks that have the given priority. */
        taskPriority?: number
        /** @description If set to `true`, restricts the query to all tasks that are assigned. */
        assigned?: boolean
        /** @description If set to `true`, restricts the query to all tasks that are unassigned. */
        unassigned?: boolean
        /** @description Only include finished tasks. Value may only be `true`, as `false` is the default behavior. */
        finished?: boolean
        /**
         * @description Only include unfinished tasks. Value may only be `true`, as `false` is the default
         * behavior.
         */
        unfinished?: boolean
        /**
         * @description Only include tasks of finished processes. Value may only be `true`, as `false` is the
         * default behavior.
         */
        processFinished?: boolean
        /**
         * @description Only include tasks of unfinished processes. Value may only be `true`, as `false` is the
         * default behavior.
         */
        processUnfinished?: boolean
        /**
         * @description Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDate?: string
        /**
         * @description Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDateBefore?: string
        /**
         * @description Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskDueDateAfter?: string
        /**
         * @description Only include tasks which have no due date. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withoutTaskDueDate?: boolean
        /**
         * @description Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDate?: string
        /**
         * @description Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDateBefore?: string
        /**
         * @description Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        taskFollowUpDateAfter?: string
        /**
         * @description Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedBefore?: string
        /**
         * @description Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        startedAfter?: string
        /**
         * @description Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedBefore?: string
        /**
         * @description Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        finishedAfter?: string
        /**
         * @description Filter by a comma-separated list of tenant ids. A task instance must have one of the given
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic task instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Only include tasks that have variables with certain values. Variable filtering expressions are
         * comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         *
         * Valid operator values are:
         * * `eq` - equal to;
         * * `neq` - not equal to;
         * * `gt` - greater than;
         * * `gteq` - greater than or equal to;
         * * `lt` - lower than;
         * * `lteq` - lower than or equal to;
         * * `like`.
         *
         * `key` and `value` may not contain underscore or comma characters.
         */
        taskVariables?: string
        /**
         * @description Only include tasks that belong to process instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         * **Note:** Values are always treated as `String` objects on server side.
         *
         *
         * Valid operator values are:
         * * `eq` - equal to;
         * * `neq` - not equal to;
         * * `gt` - greater than;
         * * `gteq` - greater than or equal to;
         * * `lt` - lower than;
         * * `lteq` - lower than or equal to;
         * * `like`;
         * * `notLike`.
         *
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Match the variable name provided in `taskVariables` and `processVariables` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match the variable value provided in `taskVariables` and `processVariables` case-
         * insensitively. If set to `true` **variableValue** and **variablevalue** are
         * treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Restrict to tasks with a historic identity link to the given user. */
        taskInvolvedUser?: string
        /** @description Restrict to tasks with a historic identity link to the given group. */
        taskInvolvedGroup?: string
        /** @description Restrict to tasks with a historic identity link to the given candidate user. */
        taskHadCandidateUser?: string
        /** @description Restrict to tasks with a historic identity link to the given candidate group. */
        taskHadCandidateGroup?: string
        /**
         * @description Only include tasks which have a candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateGroups?: boolean
        /**
         * @description Only include tasks which have no candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateGroups?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Count (POST)
   * @description Queries for the number of historic tasks that fulfill the given parameters. Takes the
   * same parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/get-task-query/)
   * method. Corresponds to the size of the result set of the
   * [Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/task/post-task-query/)
   * method and takes the same parameters.
   */
  queryHistoricTaskInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricTaskInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Report (Historic)
   * @description Retrieves a report of completed tasks. When the report type is set to `count`, the
   * report contains a list of completed task counts where an entry contains the task name, the
   * definition key of the task, the process definition id, the process definition key, the process
   * definition name and the count of how many tasks were completed for the specified key in a given
   * period. When the report type is set to `duration`, the report contains a minimum, maximum and
   * average duration value of all completed task instances in a given period.
   */
  getHistoricTaskInstanceReport: {
    parameters: {
      query?: {
        /**
         * @description **Mandatory.** Specifies the kind of the report to execute. To retrieve a report
         * about the duration of process instances the value must be set to `duration`. For a
         * report of the completed tasks in a specific timespan the value must be set to `count`.
         */
        reportType?: 'duration' | 'count'
        /**
         * @description When the report type is set to `duration`, this parameter is **mandatory**.
         * Specifies the granularity of the report. Valid values are `month` and `quarter`.
         */
        periodUnit?: 'MONTH' | 'QUARTER'
        /**
         * @description Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        completedBefore?: string
        /**
         * @description Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/),
         * the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., `2013-01-23T14:42:45.000+0200`.
         */
        completedAfter?: string
        /**
         * @description When the report type is set to `count`, this parameter is **mandatory**. Groups the
         * tasks report by a given criterion. Valid values are `taskName` and `processDefinition`.
         */
        groupBy?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricTaskInstanceReportResultDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `completedAfter`
       * parameter is supplied, but the date format is wrong. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get User Operation Log (Historic)
   * @description Queries for user operation log entries that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get User Operation Log Count](https://docs.camunda.org/manual/7.20/reference/rest/history/user-operation-log/get-user-operation-log-query-count/)
   * method.
   *
   * Note that the properties of operation log entries are interpreted as
   * restrictions on the entities they apply to. That means, if a single
   * process instance is updated, the field `processInstanceId` is
   * populated. If a single operation updates all process instances of the
   * same process definition, the field `processInstanceId` is `null` (a
   * `null` restriction is viewed as a wildcard, i.e., matches a process
   * instance with any id) and the field `processDefinitionId` is
   * populated. This way, which entities were changed by a user operation
   * can easily be reconstructed.
   */
  queryUserOperationEntries: {
    parameters: {
      query?: {
        /** @description Filter by deployment id. */
        deploymentId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by execution id. */
        executionId?: string
        /** @description Filter by case definition id. */
        caseDefinitionId?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by case execution id. */
        caseExecutionId?: string
        /** @description Only include operations on this task. */
        taskId?: string
        /** @description Only include operations on this external task. */
        externalTaskId?: string
        /** @description Only include operations on this batch. */
        batchId?: string
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /** @description Only include operations of this user. */
        userId?: string
        /**
         * @description Filter by the id of the operation. This allows fetching of multiple entries which are part
         * of a composite operation.
         */
        operationId?: string
        /**
         * @description Filter by the type of the operation like `Claim` or `Delegate`. See the
         * [Javadoc](https://docs.camunda.org/manual/7.20/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html)
         * for a list of available operation types.
         */
        operationType?: string
        /**
         * @description Filter by the type of the entity that was affected by this operation, possible values are
         * `Task`, `Attachment` or `IdentityLink`.
         */
        entityType?: string
        /**
         * @description Filter by a comma-separated list of types of the entities that was affected by this operation,
         * possible values are `Task`, `Attachment` or `IdentityLink`.
         */
        entityTypeIn?: string
        /**
         * @description Filter by the category that this operation is associated with, possible values are
         * `TaskWorker`, `Admin` or `Operator`.
         */
        category?: string
        /**
         * @description Filter by a comma-separated list of categories that this operation is associated with, possible values are
         * `TaskWorker`, `Admin` or `Operator`.
         */
        categoryIn?: string
        /** @description Only include operations that changed this property, e.g., `owner` or `assignee`. */
        property?: string
        /**
         * @description Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., 2013-01-23T14:42:45.000+0200.
         */
        afterTimestamp?: string
        /**
         * @description Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., 2013-01-23T14:42:45.000+0200.
         */
        beforeTimestamp?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'timestamp'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['UserOperationLogEntryDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get User Operation Log Count
   * @description Queries for the number of user operation log entries that fulfill the given parameters.
   * Takes the same parameters as the
   * [Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.20/reference/rest/history/user-operation-log/get-user-operation-log-query/)
   * method.
   */
  queryUserOperationCount: {
    parameters: {
      query?: {
        /** @description Filter by deployment id. */
        deploymentId?: string
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by process definition key. */
        processDefinitionKey?: string
        /** @description Filter by process instance id. */
        processInstanceId?: string
        /** @description Filter by execution id. */
        executionId?: string
        /** @description Filter by case definition id. */
        caseDefinitionId?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by case execution id. */
        caseExecutionId?: string
        /** @description Only include operations on this task. */
        taskId?: string
        /** @description Only include operations on this external task. */
        externalTaskId?: string
        /** @description Only include operations on this batch. */
        batchId?: string
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /** @description Only include operations of this user. */
        userId?: string
        /**
         * @description Filter by the id of the operation. This allows fetching of multiple entries which are part
         * of a composite operation.
         */
        operationId?: string
        /**
         * @description Filter by the type of the operation like `Claim` or `Delegate`. See the
         * [Javadoc](https://docs.camunda.org/manual/7.20/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html)
         * for a list of available operation types.
         */
        operationType?: string
        /**
         * @description Filter by the type of the entity that was affected by this operation, possible values are
         * `Task`, `Attachment` or `IdentityLink`.
         */
        entityType?: string
        /**
         * @description Filter by a comma-separated list of types of the entities that was affected by this operation,
         * possible values are `Task`, `Attachment` or `IdentityLink`.
         */
        entityTypeIn?: string
        /**
         * @description Filter by the category that this operation is associated with, possible values are
         * `TaskWorker`, `Admin` or `Operator`.
         */
        category?: string
        /**
         * @description Filter by a comma-separated list of categories that this operation is associated with, possible values are
         * `TaskWorker`, `Admin` or `Operator`.
         */
        categoryIn?: string
        /** @description Only include operations that changed this property, e.g., `owner` or `assignee`. */
        property?: string
        /**
         * @description Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., 2013-01-23T14:42:45.000+0200.
         */
        afterTimestamp?: string
        /**
         * @description Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * timestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,
         * e.g., 2013-01-23T14:42:45.000+0200.
         */
        beforeTimestamp?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Clear Annotation of an User Operation Log (Historic)
   * @description Clear the annotation which was previously set for auditing reasons.
   */
  clearAnnotationUserOperationLog: {
    parameters: {
      path: {
        /** @description The operation id of the operation log to be updated. */
        operationId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid, for example if the
       * `operationId` path parameter value does not exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Annotation to an User Operation Log (Historic)
   * @description Set an annotation for auditing reasons.
   */
  setAnnotationUserOperationLog: {
    parameters: {
      path: {
        /** @description The operation id of the operation log to be updated. */
        operationId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AnnotationDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid, for example if the
       * `operationId` path parameter value does not exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instances
   * @description Queries for historic variable instances that fulfill the given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Variable Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query-count/)
   * method.
   */
  getHistoricVariableInstances: {
    parameters: {
      query?: {
        /** @description Filter by variable name. */
        variableName?: string
        /** @description Restrict to variables with a name like the parameter. */
        variableNameLike?: string
        /** @description Filter by variable value. Is treated as a `String` object on server side. */
        variableValue?: Record<string, never>
        /**
         * @description Match the variable name provided in `variableName` and `variableNameLike` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match the variable value provided in `variableValue` case-insensitively. If set to `true`
         * **variableValue** and **variablevalue** are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /**
         * @description Only include historic variable instances which belong to one of the passed and comma-
         * separated variable types. A list of all supported variable types can be found
         * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
         * **Note:** All non-primitive variables are associated with the type
         * 'serializable'.
         */
        variableTypeIn?: string
        /** @description Include variables that has already been deleted during the execution. */
        includeDeleted?: boolean
        /** @description Filter by the process instance the variable belongs to. */
        processInstanceId?: string
        /** @description Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. */
        processInstanceIdIn?: string
        /** @description Filter by the process definition the variable belongs to. */
        processDefinitionId?: string
        /** @description Filter by a key of the process definition the variable belongs to. */
        processDefinitionKey?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. */
        executionIdIn?: string
        /** @description Filter by the case instance the variable belongs to. */
        caseInstanceId?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. */
        caseExecutionIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. */
        caseActivityIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated task ids. */
        taskIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. */
        activityInstanceIdIn?: string
        /**
         * @description Only include historic variable instances which belong to one of the passed and comma-
         * separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic variable instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Only include historic variable instances which belong to one of the passed and comma-separated variable names. */
        variableNameIn?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'instanceId' | 'variableName' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricVariableInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instances (POST)
   * @description Queries for historic variable instances that fulfill the given parameters.
   * This method is slightly more powerful than the
   * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query/)
   * method because it allows filtering by variable values of the different
   * types `String`, `Number` or `Boolean`.
   */
  queryHistoricVariableInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricVariableInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricVariableInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance Count
   * @description Queries for the number of historic variable instances that fulfill the given
   * parameters.
   * Takes the same parameters as the
   * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query/)
   * method.
   */
  getHistoricVariableInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by variable name. */
        variableName?: string
        /** @description Restrict to variables with a name like the parameter. */
        variableNameLike?: string
        /** @description Filter by variable value. Is treated as a `String` object on server side. */
        variableValue?: Record<string, never>
        /**
         * @description Match the variable name provided in `variableName` and `variableNameLike` case-
         * insensitively. If set to `true` **variableName** and **variablename** are
         * treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match the variable value provided in `variableValue` case-insensitively. If set to `true`
         * **variableValue** and **variablevalue** are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /**
         * @description Only include historic variable instances which belong to one of the passed and comma-
         * separated variable types. A list of all supported variable types can be found
         * [here](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/#supported-variable-values).
         * **Note:** All non-primitive variables are associated with the type
         * 'serializable'.
         */
        variableTypeIn?: string
        /** @description Include variables that has already been deleted during the execution. */
        includeDeleted?: boolean
        /** @description Filter by the process instance the variable belongs to. */
        processInstanceId?: string
        /** @description Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. */
        processInstanceIdIn?: string
        /** @description Filter by the process definition the variable belongs to. */
        processDefinitionId?: string
        /** @description Filter by a key of the process definition the variable belongs to. */
        processDefinitionKey?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. */
        executionIdIn?: string
        /** @description Filter by the case instance the variable belongs to. */
        caseInstanceId?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. */
        caseExecutionIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. */
        caseActivityIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated task ids. */
        taskIdIn?: string
        /** @description Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. */
        activityInstanceIdIn?: string
        /**
         * @description Only include historic variable instances which belong to one of the passed and comma-
         * separated tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include historic variable instances that belong to no tenant. Value may only be
         * `true`, as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Only include historic variable instances which belong to one of the passed and comma-separated variable names. */
        variableNameIn?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance Count (POST)
   * @description Queries for historic variable instances that fulfill the given parameters.
   * This method takes the same message body as the
   * [Get Variable Instances (POST)](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/post-variable-instance-query/)
   * method and therefore it is more powerful regarding variable values
   * than the
   * [Get Variable Instance Count](https://docs.camunda.org/manual/7.20/reference/rest/history/variable-instance/get-variable-instance-query-count/)
   * method.
   */
  queryHistoricVariableInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoricVariableInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance
   * @description Retrieves a historic variable by id.
   */
  getHistoricVariableInstance: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the variable instance. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['HistoricVariableInstanceDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Variable Instance
   * @description Deletes a historic variable instance by id.
   */
  deleteHistoricVariableInstance: {
    parameters: {
      path: {
        /** @description The id of the variable instance. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance (Binary)
   * @description Retrieves the content of a historic variable by id. Applicable for variables that
   * are serialized as binary data.
   */
  getHistoricVariableInstanceBinary: {
    parameters: {
      path: {
        /** @description The id of the variable instance. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /**
       * @description Variable with given id exists but is not a binary variable. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get a User's Groups
   * @description Gets the groups of a user by id and includes all users that share a group with the
   * given user.
   */
  getGroupInfo: {
    parameters: {
      query: {
        /** @description The id of the user to get the groups for. */
        userId: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['IdentityServiceGroupInfoDto']
        }
      }
      /**
       * @description If the `userId` query parameter is missing. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Password Policy
   * @description A password policy consists of a list of rules that new passwords must follow to be
   * policy compliant. This end point returns a JSON representation of the
   * list of policy rules. More information on password policies in Camunda can be found in the password policy
   * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/password-policy/) and in
   * the [security instructions](https://docs.camunda.org/manual/7.20/user-guide/security/).
   */
  getPasswordPolicy: {
    responses: {
      /**
       * @description Request successful. This example uses the built-in password policy that enforces a minimum password length,
       * and some complexity rules.
       */
      200: {
        content: {
          'application/json': components['schemas']['PasswordPolicyDto']
        }
      }
      /** @description No password policy was found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Validate Password
   * @description A password policy consists of a list of rules that new passwords must follow to be
   * policy compliant. A password can be checked for compliancy via this
   * end point. More information on password policies in Camunda can be found in the password policy
   * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/password-policy/) and in
   * the [security instructions](https://docs.camunda.org/manual/7.20/user-guide/security/).
   */
  checkPassword: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['PasswordPolicyRequestDto']
      }
    }
    responses: {
      /**
       * @description Request successful. This example uses the built-in password policy that enforces a minimum password length, and
       * some complexity rules. The checked password is myPassword which is not complex enough to match all of
       * the policy rules.
       */
      200: {
        content: {
          'application/json': components['schemas']['CheckPasswordPolicyResultDto']
        }
      }
      /** @description No password policy was found to check the password against. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Verify User
   * @description Verifies that user credentials are valid.
   */
  verifyUser: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['BasicUserCredentialsDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AuthenticationResult']
        }
      }
      /** @description If body does not contain username or password. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using
   * the [Get Incident Count](https://docs.camunda.org/manual/7.20/reference/rest/incident/get-query-count/) method.
   */
  getIncidents: {
    parameters: {
      query?: {
        /** @description Restricts to incidents that have the given id. */
        incidentId?: string
        /**
         * @description Restricts to incidents that belong to the given incident type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident
         * types.
         */
        incidentType?: string
        /** @description Restricts to incidents that have the given incident message. */
        incidentMessage?: string
        /**
         * @description Restricts to incidents that incidents message is a substring of the given value. The string can include
         * the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
         * contains (`%string%`).
         */
        incidentMessageLike?: string
        /** @description Restricts to incidents that belong to a process definition with the given id. */
        processDefinitionId?: string
        /**
         * @description Restricts to incidents that belong to a process definition with the given keys. Must be a
         * comma-separated list.
         */
        processDefinitionKeyIn?: string
        /** @description Restricts to incidents that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Restricts to incidents that belong to an execution with the given id. */
        executionId?: string
        /**
         * @description Restricts to incidents that have an incidentTimestamp date before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        incidentTimestampBefore?: string
        /**
         * @description Restricts to incidents that have an incidentTimestamp date after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        incidentTimestampAfter?: string
        /** @description Restricts to incidents that belong to an activity with the given id. */
        activityId?: string
        /** @description Restricts to incidents that were created due to the failure of an activity with the given id. */
        failedActivityId?: string
        /** @description Restricts to incidents that have the given incident id as cause incident. */
        causeIncidentId?: string
        /** @description Restricts to incidents that have the given incident id as root cause incident. */
        rootCauseIncidentId?: string
        /** @description Restricts to incidents that have the given parameter set as configuration. */
        configuration?: string
        /** @description Restricts to incidents that have one of the given comma-separated tenant ids. */
        tenantIdIn?: string
        /** @description Restricts to incidents that have one of the given comma-separated job definition ids. */
        jobDefinitionIdIn?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'incidentId'
          | 'incidentMessage'
          | 'incidentTimestamp'
          | 'incidentType'
          | 'executionId'
          | 'activityId'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'causeIncidentId'
          | 'rootCauseIncidentId'
          | 'configuration'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['IncidentDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error
       * response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the
   * [Get Incidents](https://docs.camunda.org/manual/7.20/reference/rest/incident/get-query/) method.
   */
  getIncidentsCount: {
    parameters: {
      query?: {
        /** @description Restricts to incidents that have the given id. */
        incidentId?: string
        /**
         * @description Restricts to incidents that belong to the given incident type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) for a list of incident
         * types.
         */
        incidentType?: string
        /** @description Restricts to incidents that have the given incident message. */
        incidentMessage?: string
        /**
         * @description Restricts to incidents that incidents message is a substring of the given value. The string can include
         * the wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or
         * contains (`%string%`).
         */
        incidentMessageLike?: string
        /** @description Restricts to incidents that belong to a process definition with the given id. */
        processDefinitionId?: string
        /**
         * @description Restricts to incidents that belong to a process definition with the given keys. Must be a
         * comma-separated list.
         */
        processDefinitionKeyIn?: string
        /** @description Restricts to incidents that belong to a process instance with the given id. */
        processInstanceId?: string
        /** @description Restricts to incidents that belong to an execution with the given id. */
        executionId?: string
        /**
         * @description Restricts to incidents that have an incidentTimestamp date before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        incidentTimestampBefore?: string
        /**
         * @description Restricts to incidents that have an incidentTimestamp date after the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
         */
        incidentTimestampAfter?: string
        /** @description Restricts to incidents that belong to an activity with the given id. */
        activityId?: string
        /** @description Restricts to incidents that were created due to the failure of an activity with the given id. */
        failedActivityId?: string
        /** @description Restricts to incidents that have the given incident id as cause incident. */
        causeIncidentId?: string
        /** @description Restricts to incidents that have the given incident id as root cause incident. */
        rootCauseIncidentId?: string
        /** @description Restricts to incidents that have the given parameter set as configuration. */
        configuration?: string
        /** @description Restricts to incidents that have one of the given comma-separated tenant ids. */
        tenantIdIn?: string
        /** @description Restricts to incidents that have one of the given comma-separated job definition ids. */
        jobDefinitionIdIn?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error
       * response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Incident
   * @description Retrieves an incident by ID.
   */
  getIncident: {
    parameters: {
      path: {
        /** @description The id of the incident to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['IncidentDto']
        }
      }
      /** @description Returned if an incident with given id does not exist. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Resolve Incident
   * @description Resolves an incident with given id.
   */
  resolveIncident: {
    parameters: {
      path: {
        /** @description The id of the incident to be resolved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if an incident is not related to any execution or an incident is of type `failedJob` or
       * `failedExternalTask`. To resolve such an incident, please refer to the
       * [Incident Types](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types) section.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description Returned if an incident with given id does not exist. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Incident Annotation
   * @description Sets the annotation of an incident with given id.
   */
  setIncidentAnnotation: {
    parameters: {
      path: {
        /** @description The id of the incident to clear the annotation at. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['AnnotationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description Returned if no incident can be found for the given id. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Clear Incident Annotation
   * @description Clears the annotation of an incident with given id.
   */
  clearIncidentAnnotation: {
    parameters: {
      path: {
        /** @description The id of the incident to clear the annotation at. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description Returned if no incident can be found for the given id. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Jobs
   * @description Queries for jobs that fulfill given parameters.
   * The size of the result set can be retrieved by using the [Get Job
   * Count](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query-count/) method.
   */
  getJobs: {
    parameters: {
      query?: {
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by a comma-separated list of job ids. */
        jobIds?: string
        /** @description Only select jobs which exist for the given job definition. */
        jobDefinitionId?: string
        /** @description Only select jobs which exist for the given process instance. */
        processInstanceId?: string
        /** @description Only select jobs which exist for the given comma-separated list of process instance ids. */
        processInstanceIds?: string
        /** @description Only select jobs which exist for the given execution. */
        executionId?: string
        /** @description Filter by the id of the process definition the jobs run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the jobs run on. */
        processDefinitionKey?: string
        /** @description Only select jobs which exist for an activity with the given id. */
        activityId?: string
        /**
         * @description Only select jobs which have retries left. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withRetriesLeft?: boolean
        /**
         * @description Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due
         * date is in the past. Value may only be `true`, as `false` is the default
         * behavior.
         */
        executable?: boolean
        /**
         * @description Only select jobs that are timers. Cannot be used together with `messages`. Value may only
         * be `true`, as `false` is the default behavior.
         */
        timers?: boolean
        /**
         * @description Only select jobs that are messages. Cannot be used together with `timers`. Value may only
         * be `true`, as `false` is the default behavior.
         */
        messages?: boolean
        /**
         * @description Only select jobs where the due date is lower or higher than the given date.
         * Due date expressions are comma-separated and are structured as follows:
         *
         * A valid condition value has the form `operator_value`.
         * `operator` is the comparison operator to be used and `value` the date value
         * as string.
         *
         * Valid operator values are: `gt` - greater than; `lt` - lower than.
         * `value` may not contain underscore or comma characters.
         */
        dueDates?: string
        /**
         * @description Only select jobs created before or after the given date.
         *
         * Create time expressions are comma-separated and are structured as
         * follows:
         *
         * A valid condition value has the form `operator_value`.
         * `operator` is the comparison operator to be used and `value` the date value
         * as string.
         *
         * Valid operator values are: `gt` - greater than; `lt` - lower than.
         * `value` may not contain underscore or comma characters.
         */
        createTimes?: string
        /**
         * @description Only select jobs that failed due to an exception. Value may only be `true`, as `false` is
         * the default behavior.
         */
        withException?: boolean
        /** @description Only select jobs that failed due to an exception with the given message. */
        exceptionMessage?: string
        /** @description Only select jobs that failed due to an exception at an activity with the given id. */
        failedActivityId?: string
        /**
         * @description Only select jobs which have no retries left. Value may only be `true`, as `false` is the
         * default behavior.
         */
        noRetriesLeft?: boolean
        /** @description Only include active jobs. Value may only be `true`, as `false` is the default behavior. */
        active?: boolean
        /** @description Only include suspended jobs. Value may only be `true`, as `false` is the default behavior. */
        suspended?: boolean
        /**
         * @description Only include jobs with a priority lower than or equal to the given value. Value must be a
         * valid `long` value.
         */
        priorityLowerThanOrEquals?: number
        /**
         * @description Only include jobs with a priority higher than or equal to the given value. Value must be a
         * valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /** @description Only include jobs which belong to one of the passed comma-separated tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeJobsWithoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'jobId'
          | 'executionId'
          | 'processInstanceId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'jobPriority'
          | 'jobRetries'
          | 'jobDueDate'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for due date comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Jobs (POST)
   * @description Queries for jobs that fulfill given parameters. This method is slightly more
   * powerful than the [Get Jobs](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query/)
   * method because it allows filtering by multiple jobs of types `String`,
   * `Number` or `Boolean`.
   */
  queryJobs: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for due date comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Definitions
   * @description Queries for job definitions that fulfill given parameters.
   * The size of the result set can be retrieved by using the
   * [Get Job Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query-count/)
   * method.
   */
  getJobDefinitions: {
    parameters: {
      query?: {
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /** @description Only include job definitions which belong to one of the passed and comma-separated activity ids. */
        activityIdIn?: string
        /** @description Only include job definitions which exist for the given process definition id. */
        processDefinitionId?: string
        /** @description Only include job definitions which exist for the given process definition key. */
        processDefinitionKey?: string
        /**
         * @description Only include job definitions which exist for the given job type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
         * for more information about job types.
         */
        jobType?: string
        /**
         * @description Only include job definitions which exist for the given job configuration. For example: for
         * timer jobs it is the timer configuration.
         */
        jobConfiguration?: string
        /**
         * @description Only include active job definitions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended job definitions. Value may only be `true`, as `false` is the
         * default behavior.
         */
        suspended?: boolean
        /**
         * @description Only include job definitions that have an overriding job priority defined. The only
         * effective value is `true`. If set to `false`, this filter is not applied.
         */
        withOverridingJobPriority?: boolean
        /**
         * @description Only include job definitions which belong to one of the passed and comma-separated tenant
         * ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include job definitions which belong to no tenant. Value may only be `true`, as
         * `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include job definitions which belong to no tenant. Can be used in combination with
         * `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
         */
        includeJobDefinitionsWithoutTenantId?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'jobDefinitionId'
          | 'activityId'
          | 'processDefinitionId'
          | 'processDefinitionKey'
          | 'jobType'
          | 'jobConfiguration'
          | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDefinitionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Definitions (POST)
   * @description Queries for job definitions that fulfill given parameters. This method is slightly
   * more powerful than the
   * [Get Job Definitions](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query/)
   * method because it allows filtering by multiple job definitions of
   * types `String`, `Number` or `Boolean`.
   */
  queryJobDefinitions: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDefinitionQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDefinitionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Definition Count
   * @description Queries for the number of job definitions that fulfill given parameters.
   * Takes the same parameters as the
   * [Get Job Definitions](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query/)
   * method.
   */
  getJobDefinitionsCount: {
    parameters: {
      query?: {
        /** @description Filter by job definition id. */
        jobDefinitionId?: string
        /** @description Only include job definitions which belong to one of the passed and comma-separated activity ids. */
        activityIdIn?: string
        /** @description Only include job definitions which exist for the given process definition id. */
        processDefinitionId?: string
        /** @description Only include job definitions which exist for the given process definition key. */
        processDefinitionKey?: string
        /**
         * @description Only include job definitions which exist for the given job type. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#job-creation)
         * for more information about job types.
         */
        jobType?: string
        /**
         * @description Only include job definitions which exist for the given job configuration. For example: for
         * timer jobs it is the timer configuration.
         */
        jobConfiguration?: string
        /**
         * @description Only include active job definitions. Value may only be `true`, as `false` is the default
         * behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended job definitions. Value may only be `true`, as `false` is the
         * default behavior.
         */
        suspended?: boolean
        /**
         * @description Only include job definitions that have an overriding job priority defined. The only
         * effective value is `true`. If set to `false`, this filter is not applied.
         */
        withOverridingJobPriority?: boolean
        /**
         * @description Only include job definitions which belong to one of the passed and comma-separated tenant
         * ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include job definitions which belong to no tenant. Value may only be `true`, as
         * `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include job definitions which belong to no tenant. Can be used in combination with
         * `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
         */
        includeJobDefinitionsWithoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Definition Count (POST)
   * @description Queries for the number of job definitions that fulfill given parameters. This
   * method takes the same message body as the
   * [Get Job Definitions (POST)](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/post-query/)
   * method and therefore it is slightly more powerful than the
   * [Get Job Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/job-definition/get-query-count/)
   * method.
   */
  queryJobDefinitionsCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDefinitionQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend Job Definitions
   * @description Activates or suspends job definitions with the given process definition id or process definition key.
   */
  updateSuspensionStateJobDefinitions: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDefinitionsSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid, for example if the provided
       * `executionDate` parameter doesn't have the expected format. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Definition
   * @description Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.
   */
  getJobDefinition: {
    parameters: {
      path: {
        /** @description The id of the job definition to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDefinitionDto']
        }
      }
      /**
       * @description Job definition with given id does not exist.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Definition Priority by Id
   * @description Sets an overriding execution priority for jobs with the given definition id.
   * Optionally, the priorities of all the definitions' existing jobs are
   * updated accordingly. The priority can be reset by setting it to
   * `null`, meaning that a new job's priority will not be determined based
   * on its definition's priority any longer. See the
   * [user guide on job prioritization](https://docs.camunda.org/manual/7.20/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api)
   * for details.
   */
  setJobPriorityJobDefinition: {
    parameters: {
      path: {
        /** @description The id of the job definition to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDefinitionPriorityDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The retries could not be set successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Retries By Job Definition Id
   * @description Sets the number of retries of all **failed** jobs associated with the given job
   * definition id.
   */
  setJobRetriesJobDefinition: {
    parameters: {
      path: {
        /** @description The id of the job definition to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RetriesDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The retries could not be set successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend Job Definition By Id
   * @description Activates or suspends a given job definition by id.
   */
  updateSuspensionStateJobDefinition: {
    parameters: {
      path: {
        /** @description The id of the job definition to activate or suspend. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDefinitionSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid, for example if the provided
       * `executionDate` parameter doesn't have the expected format. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Count
   * @description Queries for the number of jobs that fulfill given parameters.
   * Takes the same parameters as the [Get
   * Jobs](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query/) method.
   */
  getJobsCount: {
    parameters: {
      query?: {
        /** @description Filter by job id. */
        jobId?: string
        /** @description Filter by a comma-separated list of job ids. */
        jobIds?: string
        /** @description Only select jobs which exist for the given job definition. */
        jobDefinitionId?: string
        /** @description Only select jobs which exist for the given process instance. */
        processInstanceId?: string
        /** @description Only select jobs which exist for the given comma-separated list of process instance ids. */
        processInstanceIds?: string
        /** @description Only select jobs which exist for the given execution. */
        executionId?: string
        /** @description Filter by the id of the process definition the jobs run on. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the jobs run on. */
        processDefinitionKey?: string
        /** @description Only select jobs which exist for an activity with the given id. */
        activityId?: string
        /**
         * @description Only select jobs which have retries left. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withRetriesLeft?: boolean
        /**
         * @description Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due
         * date is in the past. Value may only be `true`, as `false` is the default
         * behavior.
         */
        executable?: boolean
        /**
         * @description Only select jobs that are timers. Cannot be used together with `messages`. Value may only
         * be `true`, as `false` is the default behavior.
         */
        timers?: boolean
        /**
         * @description Only select jobs that are messages. Cannot be used together with `timers`. Value may only
         * be `true`, as `false` is the default behavior.
         */
        messages?: boolean
        /**
         * @description Only select jobs where the due date is lower or higher than the given date.
         * Due date expressions are comma-separated and are structured as follows:
         *
         * A valid condition value has the form `operator_value`.
         * `operator` is the comparison operator to be used and `value` the date value
         * as string.
         *
         * Valid operator values are: `gt` - greater than; `lt` - lower than.
         * `value` may not contain underscore or comma characters.
         */
        dueDates?: string
        /**
         * @description Only select jobs created before or after the given date.
         *
         * Create time expressions are comma-separated and are structured as
         * follows:
         *
         * A valid condition value has the form `operator_value`.
         * `operator` is the comparison operator to be used and `value` the date value
         * as string.
         *
         * Valid operator values are: `gt` - greater than; `lt` - lower than.
         * `value` may not contain underscore or comma characters.
         */
        createTimes?: string
        /**
         * @description Only select jobs that failed due to an exception. Value may only be `true`, as `false` is
         * the default behavior.
         */
        withException?: boolean
        /** @description Only select jobs that failed due to an exception with the given message. */
        exceptionMessage?: string
        /** @description Only select jobs that failed due to an exception at an activity with the given id. */
        failedActivityId?: string
        /**
         * @description Only select jobs which have no retries left. Value may only be `true`, as `false` is the
         * default behavior.
         */
        noRetriesLeft?: boolean
        /** @description Only include active jobs. Value may only be `true`, as `false` is the default behavior. */
        active?: boolean
        /** @description Only include suspended jobs. Value may only be `true`, as `false` is the default behavior. */
        suspended?: boolean
        /**
         * @description Only include jobs with a priority lower than or equal to the given value. Value must be a
         * valid `long` value.
         */
        priorityLowerThanOrEquals?: number
        /**
         * @description Only include jobs with a priority higher than or equal to the given value. Value must be a
         * valid `long` value.
         */
        priorityHigherThanOrEquals?: number
        /** @description Only include jobs which belong to one of the passed comma-separated tenant ids. */
        tenantIdIn?: string
        /**
         * @description Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the
         * default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeJobsWithoutTenantId?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example, if an invalid operator
       * for due date comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job Count (POST)
   * @description Queries for jobs that fulfill given parameters. This method takes the same message
   * body as the [Get Jobs POST](https://docs.camunda.org/manual/7.20/reference/rest/job/post-
   * query/) method and therefore it is slightly more powerful than the
   * [Get Job Count](https://docs.camunda.org/manual/7.20/reference/rest/job/get-query-count/)
   * method.
   */
  queryJobsCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example, if an invalid operator
       * for due date comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Retries Async (POST)
   * @description Create a batch to set retries of jobs asynchronously.
   */
  setJobRetriesAsyncOperation: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetJobRetriesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if neither
       * processInstanceIds nor processInstanceQuery is present. Or if the
       * retry count is not specified. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend Jobs
   * @description Activates or suspends jobs matching the given criterion.
   * This can only be on of:
   * * `jobDefinitionId`
   * * `processDefinitionId`
   * * `processInstanceId`
   * * `processDefinitionKey`
   */
  updateSuspensionStateBy: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Returned if the request parameters are invalid, for example, if `jobDefinitionId` and
       * `processDefinitionId` are both specified.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Job
   * @description Retrieves a job by id, according to the `Job` interface in the engine.
   */
  getJob: {
    parameters: {
      path: {
        /** @description The id of the job to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['JobDto']
        }
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Job
   * @description Deletes a job by id.
   */
  deleteJob: {
    parameters: {
      path: {
        /** @description The id of the job to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The job could not be deleted. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Due Date
   * @description Updates the due date of a job by id.
   */
  setJobDuedate: {
    parameters: {
      path: {
        /** @description The id of the job to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobDuedateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The due date could not be set successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Recalculate Job Due Date
   * @description Recalculates the due date of a job by id.
   */
  recalculateDuedate: {
    parameters: {
      query?: {
        /**
         * @description Recalculate the due date based on the creation date of the job or the current date.
         * Value may only be `false`, as `true` is the default behavior.
         */
        creationDateBased?: boolean
      }
      path: {
        /** @description The id of the job to be updated. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The due date could not be recalculated successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Job
   * @description Executes a job by id. **Note:** The execution of the job happens synchronously in
   * the same thread.
   */
  executeJob: {
    parameters: {
      path: {
        /** @description The id of the job to be executed. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The job could not be executed successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Priority
   * @description Sets the execution priority of a job by id.
   */
  setJobPriority: {
    parameters: {
      path: {
        /** @description The id of the job to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PriorityDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The priority could not be set successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Retries
   * @description Sets the retries of the job to the given number of retries by id.
   */
  setJobRetries: {
    parameters: {
      path: {
        /** @description The id of the job to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['JobRetriesDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The retries could not be set successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Exception Stacktrace
   * @description Retrieves the exception stacktrace corresponding to the passed job id.
   */
  getStacktrace: {
    parameters: {
      path: {
        /** @description The id of the job to get the exception stacktrace for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'text/plain': unknown
        }
      }
      /**
       * @description Job with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend Job By Id
   * @description Activates or suspends a given job by id.
   */
  updateJobSuspensionState: {
    parameters: {
      path: {
        /** @description The id of the job to activate or suspend. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
    }
  }
  /**
   * Correlate
   * @description Correlates a message to the process engine to either trigger a message start event or an intermediate message
   * catching event. Internally this maps to the engine's message correlation builder methods
   * `MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.
   * For more information about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.20/bpmn20/events/message-events/)
   * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
   */
  deliverMessage: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CorrelationMessageDto']
      }
    }
    responses: {
      /**
       * @description Request successful. The property `resultEnabled` in the request body was `true`.
       * The `variables` property is only returned, if the property variablesInResultEnable`
       * was set to `true` in the request.
       */
      200: {
        content: {
          'application/json': components['schemas']['MessageCorrelationResultWithVariableDto'][]
        }
      }
      /** @description Request successful. The property `resultEnabled` in the request body was `false` (Default). */
      204: {
        content: never
      }
      /**
       * @description Returned if:
       * * no `messageName` was supplied
       * * both `tenantId` and `withoutTenantId` are supplied
       * * the message has not been correlated to exactly one entity (execution or process definition)
       * * the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Metrics in Interval
   * @description Retrieves a list of metrics, aggregated for a given interval.
   */
  interval: {
    parameters: {
      query?: {
        /** @description The name of the metric. */
        name?:
          | 'activity-instance-start'
          | 'activity-instance-end'
          | 'decision-instances'
          | 'flow-node-instances'
          | 'job-acquisition-attempt'
          | 'job-acquired-success'
          | 'job-acquired-failure'
          | 'job-execution-rejected'
          | 'job-successful'
          | 'job-failed'
          | 'job-locked-exclusive'
          | 'executed-decision-elements'
          | 'history-cleanup-removed-process-instances'
          | 'history-cleanup-removed-case-instances'
          | 'history-cleanup-removed-decision-instances'
          | 'history-cleanup-removed-batch-operations'
          | 'history-cleanup-removed-task-metrics'
          | 'process-instances'
        /**
         * @description The name of the reporter (host), on which the metrics was logged. This will have
         * value provided by the [hostname configuration property](https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine/#hostname).
         */
        reporter?: string
        /** @description The start date (inclusive). */
        startDate?: string
        /** @description The end date (exclusive). */
        endDate?: string
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description The interval for which the metrics should be aggregated. Time unit is seconds.
         * Default: The interval is set to 15 minutes (900 seconds).
         */
        interval?: string
        /** @description Aggregate metrics by reporter. */
        aggregateByReporter?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['MetricsIntervalResultDto'][]
        }
      }
      /** @description Returned if some of the query parameters are invalid. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Task Worker Metrics
   * @description Deletes all task worker metrics prior to the given date or all if no date is provided.
   */
  deleteTaskMetrics: {
    parameters: {
      query?: {
        /** @description The date prior to which all task worker metrics should be deleted. */
        date?: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description If the user who performs the operation is not a <b>camunda-admin</b> user. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Sum
   * @description Retrieves the `sum` (count) for a given metric.
   */
  getMetrics: {
    parameters: {
      query?: {
        /** @description The start date (inclusive). */
        startDate?: string
        /** @description The end date (exclusive). */
        endDate?: string
      }
      path: {
        /** @description The name of the metric. */
        'metrics-name':
          | 'activity-instance-start'
          | 'activity-instance-end'
          | 'decision-instances'
          | 'flow-node-instances'
          | 'job-acquisition-attempt'
          | 'job-acquired-success'
          | 'job-acquired-failure'
          | 'job-execution-rejected'
          | 'job-successful'
          | 'job-failed'
          | 'job-locked-exclusive'
          | 'executed-decision-elements'
          | 'history-cleanup-removed-process-instances'
          | 'history-cleanup-removed-case-instances'
          | 'history-cleanup-removed-decision-instances'
          | 'history-cleanup-removed-batch-operations'
          | 'history-cleanup-removed-task-metrics'
          | 'unique-task-workers'
          | 'process-instances'
          | 'task-users'
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['MetricsResultDto']
        }
      }
    }
  }
  /**
   * Execute Migration Plan
   * @description Executes a migration plan synchronously for multiple process instances. To execute
   * a migration plan asynchronously, use the
   * [Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.20/reference/rest/migration/execute-migration-async/)
   * method.
   *
   * For more information about the difference between synchronous and asynchronous
   * execution of a migration plan, please refer to the related section of
   * [the user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
   */
  executeMigrationPlan: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['MigrationExecutionDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description The request is not valid if one or more of the following statements apply:
       *
       * * The provided migration plan is not valid, so an exception of type
       * `MigrationPlanValidationException` is returned.
       * * The provided migration plan is not valid for a specific process
       * instance it is applied to, so an exception of type
       * `MigratingProcessInstanceValidationException` is returned.
       * * In case additional parameters of the request are unexpected, an
       * exception of type `InvalidRequestException` is returned.
       *
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Migration Plan Async (Batch)
   * @description Executes a migration plan asynchronously (batch) for multiple process instances.
   * To execute a migration plan synchronously, use the
   * [Execute MigrationPlan](https://docs.camunda.org/manual/7.20/reference/rest/migration/execute-migration/)
   * method.
   *
   * For more information about the difference between synchronous and asynchronous
   * execution of a migration plan, please refer to the related section of
   * [the user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).
   */
  executeMigrationPlanAsync: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['MigrationExecutionDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description The request is not valid if one or more of the following statements apply:
       *
       * * The provided migration plan is not valid, so an exception of type
       * `MigrationPlanValidationException` is returned.
       * * In case additional parameters of the request are unexpected, an
       * exception of type `InvalidRequestException` is returned.
       *
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Generate Migration Plan
   * @description Generates a migration plan for two process definitions. The generated migration
   * plan contains migration instructions which map equal activities
   * between the
   * two process definitions.
   */
  generateMigrationPlan: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['MigrationPlanGenerationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['MigrationPlanDto']
        }
      }
      /**
       * @description
       * The requested migration was invalid. See
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Validate Migration Plan
   * @description Validates a migration plan statically without executing it. This
   * corresponds to the
   * [creation time validation](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration/#creation-time-validation)
   * described in the user guide.
   */
  validateMigrationPlan: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['MigrationPlanDto']
      }
    }
    responses: {
      /** @description Request successful. The validation report was returned. */
      200: {
        content: {
          'application/json': components['schemas']['MigrationPlanReportDto']
        }
      }
      /**
       * @description In case additional parameters of the request are unexpected, an
       * exception of type `InvalidRequestException` is returned. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Modification
   * @description Executes a modification synchronously for multiple process instances.
   * To modify a single process instance, use the
   * [Modify Process Instance Execution State](https://docs.camunda.org/manual/7.20/reference/rest/process-instance/post-modification/) method.
   * To execute a modification asynchronously, use the
   * [Execute Modification Async (Batch)](https://docs.camunda.org/manual/7.20/reference/rest/modification/post-modification-async/) method.
   *
   * For more information about the difference between synchronous and
   * asynchronous execution of a modification, please refer to the related
   * section of the
   * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).
   */
  executeModification: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ModificationDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /**
       * @description
       * In case following parameters are missing: instructions,
       * processDefinitionId, activityId or transitionId, processInstanceIds
       * or processInstanceQuery, an exception of type
       * `InvalidRequestException` is returned. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Execute Modification Async (Batch)
   * @description Executes a modification asynchronously for multiple process instances. To execute a
   * modification synchronously, use the
   * [Execute Modification](https://docs.camunda.org/manual/7.20/reference/rest/modification/post-modification-sync/) method.
   *
   * For more information about the difference between synchronous and
   * asynchronous execution of a modification, please refer to the related
   * section of the
   * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).
   */
  executeModificationAsync: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ModificationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description
       * In case following parameters are missing: instructions,
       * processDefinitionId, activityId or transitionId, processInstanceIds
       * or processInstanceQuery, an exception of type
       * `InvalidRequestException` is returned. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for process definitions that fulfill given parameters. Parameters may be the properties of
   * process definitions, such as the name, key or version. The size of the result set can be retrieved
   * by using the [Get Definition Count](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/get-query-count/) method.
   */
  getProcessDefinitions: {
    parameters: {
      query?: {
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by process definition name. */
        name?: string
        /** @description Filter by process definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Filter by the deploy time of the deployment the process definition belongs to.
         * Only selects process definitions that have been deployed after (exclusive) a specific time.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        deployedAfter?: string
        /**
         * @description Filter by the deploy time of the deployment the process definition belongs to.
         * Only selects process definitions that have been deployed at a specific time (exact match).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        deployedAt?: string
        /** @description Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. */
        key?: string
        /** @description Filter by a comma-separated list of process definition keys. */
        keysIn?: string
        /** @description Filter by process definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by process definition category. Exact match. */
        category?: string
        /** @description Filter by process definition categories that the parameter is a substring of. */
        categoryLike?: string
        /** @description Filter by process definition version. */
        version?: number
        /**
         * @description Only include those process definitions that are latest versions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the process definition resource. Exact match. */
        resourceName?: string
        /** @description Filter by names of those process definition resources that the parameter is a substring of. */
        resourceNameLike?: string
        /** @description Filter by a user name who is allowed to start the process. */
        startableBy?: string
        /**
         * @description Only include active process definitions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended process definitions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        suspended?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /**
         * @description Filter by the incident type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * A process definition must have one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include process definitions which belong to no tenant.
         * Value may only be true, as false is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeProcessDefinitionsWithoutTenantId?: boolean
        /** @description Filter by the version tag. */
        versionTag?: string
        /** @description Filter by the version tag that the parameter is a substring of. */
        versionTagLike?: string
        /** @description Only include process definitions without a `versionTag`. */
        withoutVersionTag?: boolean
        /** @description Filter by process definitions which are startable in Tasklist.. */
        startableInTasklist?: boolean
        /** @description Filter by process definitions which are not startable in Tasklist. */
        notStartableInTasklist?: boolean
        /**
         * @description Filter by process definitions which the user is allowed to start in Tasklist.
         * If the user doesn't have these permissions the result will be empty list.
         * The permissions are:
         * * `CREATE` permission for all Process instances
         * * `CREATE_INSTANCE` and `READ` permission on Process definition level
         */
        startablePermissionCheck?: boolean
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'category'
          | 'key'
          | 'id'
          | 'name'
          | 'version'
          | 'deploymentId'
          | 'deployTime'
          | 'tenantId '
          | 'versionTag'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Requests the number of process definitions that fulfill the query criteria.
   * Takes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/get-query/) method.
   */
  getProcessDefinitionsCount: {
    parameters: {
      query?: {
        /** @description Filter by process definition id. */
        processDefinitionId?: string
        /** @description Filter by a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by process definition name. */
        name?: string
        /** @description Filter by process definition names that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Filter by the deploy time of the deployment the process definition belongs to.
         * Only selects process definitions that have been deployed after (exclusive) a specific time.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        deployedAfter?: string
        /**
         * @description Filter by the deploy time of the deployment the process definition belongs to.
         * Only selects process definitions that have been deployed at a specific time (exact match).
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        deployedAt?: string
        /** @description Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match. */
        key?: string
        /** @description Filter by a comma-separated list of process definition keys. */
        keysIn?: string
        /** @description Filter by process definition keys that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by process definition category. Exact match. */
        category?: string
        /** @description Filter by process definition categories that the parameter is a substring of. */
        categoryLike?: string
        /** @description Filter by process definition version. */
        version?: number
        /**
         * @description Only include those process definitions that are latest versions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        latestVersion?: boolean
        /** @description Filter by the name of the process definition resource. Exact match. */
        resourceName?: string
        /** @description Filter by names of those process definition resources that the parameter is a substring of. */
        resourceNameLike?: string
        /** @description Filter by a user name who is allowed to start the process. */
        startableBy?: string
        /**
         * @description Only include active process definitions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended process definitions.
         * Value may only be `true`, as `false` is the default behavior.
         */
        suspended?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /**
         * @description Filter by the incident type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /**
         * @description Filter by a comma-separated list of tenant ids.
         * A process definition must have one of the given tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include process definitions which belong to no tenant.
         * Value may only be true, as false is the default behavior.
         */
        withoutTenantId?: boolean
        /**
         * @description Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.
         * Value may only be `true`, as `false` is the default behavior.
         */
        includeProcessDefinitionsWithoutTenantId?: boolean
        /** @description Filter by the version tag. */
        versionTag?: string
        /** @description Filter by the version tag that the parameter is a substring of. */
        versionTagLike?: string
        /** @description Only include process definitions without a `versionTag`. */
        withoutVersionTag?: boolean
        /** @description Filter by process definitions which are startable in Tasklist.. */
        startableInTasklist?: boolean
        /** @description Filter by process definitions which are not startable in Tasklist. */
        notStartableInTasklist?: boolean
        /**
         * @description Filter by process definitions which the user is allowed to start in Tasklist.
         * If the user doesn't have these permissions the result will be empty list.
         * The permissions are:
         * * `CREATE` permission for all Process instances
         * * `CREATE_INSTANCE` and `READ` permission on Process definition level
         */
        startablePermissionCheck?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.
   */
  getProcessDefinitionByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDto']
        }
      }
      /**
       * @description Process definition with given `key` does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete By Key
   * @description Deletes process definitions by a given key which belong to no tenant id.
   */
  deleteProcessDefinitionsByKey: {
    parameters: {
      query?: {
        /**
         * @description `true`, if all process instances, historic process instances and jobs
         * for this process definition should be deleted.
         */
        cascade?: boolean
        /** @description `true`, if only the built-in ExecutionListeners should be notified with the end event. */
        skipCustomListeners?: boolean
        /**
         * @description A boolean value to control whether input/output mappings should be executed during deletion.
         * `true`, if input/output mappings should not be invoked.
         */
        skipIoMappings?: boolean
      }
      path: {
        /** @description The key of the process definitions to be deleted. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Forbidden
       * The process definitions with the given `key` cannot be deleted due to missing permissions.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Not found
       * Process definition with given `key` does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Deployed Start Form
   * @description Retrieves the deployed form that can be referenced from a start event.
   * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
   */
  getDeployedStartFormByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description The form key has wrong format.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The deployed start form cannot be retrieved due to missing permissions on process definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description No deployed start form for a given process definition exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram
   * @description Retrieves the diagram for the latest version of the process definition which belongs to no tenant.
   *
   * If the process definition's deployment contains an image resource with the same file name
   * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
   * Example: `someProcess.bpmn` and `someProcess.png`.
   * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
   */
  getProcessDefinitionDiagramByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The process definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Variables
   * @description Retrieves the start form variables for the latest process definition which belongs to no tenant
   * (only if they are defined via the
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
   * The start form variables take form data specified on the start event into account.
   * If form fields are defined, the variable types and default values
   * of the form fields are taken into account.
   */
  getStartFormVariablesByKey: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of variable names. Allows restricting the list of requested
         * variables to the variable names in the list. It is best practice to restrict the
         * list of variables to the variables actually required by the form in order to
         * minimize fetching of data. If the query parameter is ommitted all variables are
         * fetched. If the query parameter contains non-existent variable names, the variable
         * names are ignored.
         */
        variableNames?: string
        /**
         * @description Determines whether serializable variable values (typically variables that store
         * custom Java objects) should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and
         * transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
         * property introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string
         * containing XML.
         *
         * **Note**: While true is the default value for reasons of backward compatibility, we
         * recommend setting this parameter to false when developing web applications that are
         * independent of the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. A JSON object containing a property for each variable returned. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description The key is null or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live
   * @description Updates history time to live for the latest version of the process definition which belongs to no tenant.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
   * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
   * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
   */
  updateHistoryTimeToLiveByProcessDefinitionKey: {
    parameters: {
      path: {
        /** @description The key of the process definition to change history time to live. */
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Rendered Start Form
   * @description Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant.
   * This method can be used to get the HTML rendering of a
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  getRenderedStartFormByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description Process definition has no form field metadata defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Start Instance
   * @description Instantiates a given process definition, starts the latest version of the process definition
   * which belongs to no tenant.
   * Process variables and business key may be supplied in the request body.
   */
  startProcessInstanceByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceWithVariablesDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Key
   * @description Retrieves the key of the start form for the latest version of the process definition
   * which belongs to no tenant.
   * The form key corresponds to the `FormData#formKey` property in the engine.
   */
  getStartFormByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) for which the form key is to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FormDto']
        }
      }
      /**
       * @description Process definition has no start form defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Activity Instance Statistics
   * @description Retrieves runtime statistics of the latest version of the given process definition
   * which belongs to no tenant, grouped by activities.
   * These statistics include the number of running activity instances, optionally the number of failed jobs
   * and also optionally the number of incidents either grouped by incident types or
   * for a specific incident type.
   * **Note**: This does not include historic data.
   */
  getActivityStatisticsByProcessDefinitionKey: {
    parameters: {
      query?: {
        /** @description Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`. */
        failedJobs?: boolean
        /**
         * @description Valid values for this property are `true` or `false`.
         * If this property has been set to `true` the result will include the corresponding number of incidents
         * for each occurred incident type.
         * If it is set to `false`, the incidents will not be included in the result.
         * Cannot be used in combination with `incidentsForType`.
         */
        incidents?: boolean
        /**
         * @description If this property has been set with any incident type (i.e., a string value) the result
         * will only include the number of incidents for the assigned incident type.
         * Cannot be used in combination with `incidents`.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentsForType?: string
      }
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ActivityStatisticsResultDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Submit Start Form
   * @description Starts the latest version of the process definition which belongs to no tenant
   * using a set of process variables and the business key.
   * If the start event has Form Field Metadata defined, the process engine will perform backend validation
   * for any form fields which have validators defined.
   * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  submitFormByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition to submit the form for. */
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceFormDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend by Id
   * @description Activates or suspends a given process definition by latest version of process definition key
   * which belongs to no tenant.
   */
  updateProcessDefinitionSuspensionStateByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be activated/suspended. */
        key: string
      }
    }
    /** @description **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessDefinitionSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if the provided `executionDate` parameter doesn't have the expected format or
       * if the `processDefinitionKey` parameter is `null`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves the latest version of the process definition for tenant according to
   * the `ProcessDefinition` interface in the engine.
   */
  getLatestProcessDefinitionByTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDto']
        }
      }
      /**
       * @description Process definition with given `key` does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete By Key
   * @description Deletes process definitions by a given key and which belong to a tenant id.
   */
  deleteProcessDefinitionsByKeyAndTenantId: {
    parameters: {
      query?: {
        /**
         * @description `true`, if all process instances, historic process instances and jobs
         * for this process definition should be deleted.
         */
        cascade?: boolean
        /** @description `true`, if only the built-in ExecutionListeners should be notified with the end event. */
        skipCustomListeners?: boolean
        /**
         * @description A boolean value to control whether input/output mappings should be executed during deletion.
         * `true`, if input/output mappings should not be invoked.
         */
        skipIoMappings?: boolean
      }
      path: {
        /** @description The key of the process definitions to be deleted. */
        key: string
        /** @description The id of the tenant the process definitions belong to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Forbidden
       * The process definitions with the given `key` cannot be deleted due to missing permissions.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Not found
       * Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Deployed Start Form
   * @description Retrieves the deployed form that can be referenced from a start event.
   * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
   */
  getDeployedStartFormByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definitions belong to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description The form key has wrong format.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The deployed start form cannot be retrieved due to missing permissions on process definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description No deployed start form for a given process definition exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram
   * @description Retrieves the diagram for the latest version of the process definition for tenant.
   *
   * If the process definition's deployment contains an image resource with the same file name
   * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
   * Example: `someProcess.bpmn` and `someProcess.png`.
   * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
   */
  getProcessDefinitionDiagramByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The process definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Variables
   * @description Retrieves the start form variables for the latest process definition for a tenant
   * (only if they are defined via the
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
   * The start form variables take form data specified on the start event into account.
   * If form fields are defined, the variable types and default values
   * of the form fields are taken into account.
   */
  getStartFormVariablesByKeyAndTenantId: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of variable names. Allows restricting the list of requested
         * variables to the variable names in the list. It is best practice to restrict the
         * list of variables to the variables actually required by the form in order to
         * minimize fetching of data. If the query parameter is ommitted all variables are
         * fetched. If the query parameter contains non-existent variable names, the variable
         * names are ignored.
         */
        variableNames?: string
        /**
         * @description Determines whether serializable variable values (typically variables that store
         * custom Java objects) should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and
         * transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
         * property introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string
         * containing XML.
         *
         * **Note**: While true is the default value for reasons of backward compatibility, we
         * recommend setting this parameter to false when developing web applications that are
         * independent of the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. A JSON object containing a property for each variable returned. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description The key is null or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live
   * @description Updates history time to live for the latest version of the process definition for a tenant.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   */
  updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition to change history time to live. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Rendered Start Form
   * @description Retrieves  the rendered form for the latest version of the process definition for a tenant.
   * This method can be used to get the HTML rendering of a
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  getRenderedStartFormByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description Process definition has no form field metadata defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Start Instance
   * @description Instantiates a given process definition, starts the latest version of the process definition for tenant.
   * Process variables and business key may be supplied in the request body.
   */
  startProcessInstanceByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceWithVariablesDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Key
   * @description Retrieves the key of the start form for the latest version of the process definition for a tenant.
   * The form key corresponds to the `FormData#formKey` property in the engine.
   */
  getStartFormByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) for which the form key is to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FormDto']
        }
      }
      /**
       * @description Process definition has no start form defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Activity Instance Statistics
   * @description Retrieves runtime statistics of the latest version of the given process definition for a tenant,
   * grouped by activities.
   * These statistics include the number of running activity instances, optionally the number of failed jobs
   * and also optionally the number of incidents either grouped by incident types or
   * for a specific incident type.
   * **Note**: This does not include historic data.
   */
  getActivityStatisticsByProcessDefinitionKeyAndTenantId: {
    parameters: {
      query?: {
        /** @description Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`. */
        failedJobs?: boolean
        /**
         * @description Valid values for this property are `true` or `false`.
         * If this property has been set to `true` the result will include the corresponding number of incidents
         * for each occurred incident type.
         * If it is set to `false`, the incidents will not be included in the result.
         * Cannot be used in combination with `incidentsForType`.
         */
        incidents?: boolean
        /**
         * @description If this property has been set with any incident type (i.e., a string value) the result
         * will only include the number of incidents for the assigned incident type.
         * Cannot be used in combination with `incidents`.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentsForType?: string
      }
      path: {
        /** @description The key of the process definition (the latest version thereof) to be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ActivityStatisticsResultDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Submit Start Form
   * @description Starts the latest version of the process definition for a tenant
   * using a set of process variables and the business key.
   * If the start event has Form Field Metadata defined, the process engine will perform backend validation
   * for any form fields which have validators defined.
   * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  submitFormByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition to submit the form for. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceFormDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend by Id
   * @description Activates or suspends a given process definition by the latest version of
   * the process definition for tenant.
   */
  updateProcessDefinitionSuspensionStateByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) to be activated/suspended. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    /** @description **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessDefinitionSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if the provided `executionDate` parameter doesn't have the expected format or
       * if the `processDefinitionKey` parameter is `null`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML
   * @description Retrieves latest version the BPMN 2.0 XML of a process definition.
   * Returns the XML for the latest version of the process definition for tenant.
   */
  getProcessDefinitionBpmn20XmlByKeyAndTenantId: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) whose XML should be retrieved. */
        key: string
        /** @description The id of the tenant the process definition belongs to. */
        'tenant-id': string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDiagramDto']
        }
      }
      /**
       * @description The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML
   * @description Retrieves latest version the BPMN 2.0 XML of a process definition.
   */
  getProcessDefinitionBpmn20XmlByKey: {
    parameters: {
      path: {
        /** @description The key of the process definition (the latest version thereof) whose XML should be retrieved. */
        key: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDiagramDto']
        }
      }
      /**
       * @description The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Process Instance Statistics
   * @description Retrieves runtime statistics of the process engine, grouped by process definitions.
   * These statistics include the number of running process instances, optionally the number of failed jobs
   * and also optionally the number of incidents either grouped by incident types or
   * for a specific incident type.
   * **Note**: This does not include historic data.
   */
  getProcessDefinitionStatistics: {
    parameters: {
      query?: {
        /** @description Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`. */
        failedJobs?: boolean
        /**
         * @description Valid values for this property are `true` or `false`.
         * If this property has been set to `true` the result will include the corresponding number of incidents
         * for each occurred incident type.
         * If it is set to `false`, the incidents will not be included in the result.
         * Cannot be used in combination with `incidentsForType`.
         */
        incidents?: boolean
        /**
         * @description If this property has been set with any incident type (i.e., a string value) the result
         * will only include the number of incidents for the assigned incident type.
         * Cannot be used in combination with `incidents`.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentsForType?: string
        /**
         * @description Valid values for this property are `true` or `false`.
         * If this property has been set to `true` the result will include the corresponding number of
         * root incidents for each occurred incident type.
         * If it is set to `false`, the incidents will not be included in the result.
         * Cannot be used in combination with `incidentsForType` or `incidents`.
         */
        rootIncidents?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionStatisticsResultDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend By Key
   * @description Activates or suspends process definitions with the given process definition key.
   */
  updateProcessDefinitionSuspensionState: {
    /** @description **Note**: Unallowed property is `processDefinitionId`. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessDefinitionSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if the provided `executionDate` parameter doesn't have the expected format or
       * if the `processDefinitionKey` parameter is `null`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a process definition according to the `ProcessDefinition` interface in the engine.
   */
  getProcessDefinition: {
    parameters: {
      path: {
        /** @description The id of the process definition to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDto']
        }
      }
      /**
       * @description Process definition with given `id` does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Deletes a running process instance by id.
   */
  deleteProcessDefinition: {
    parameters: {
      query?: {
        /**
         * @description `true`, if all process instances, historic process instances and jobs
         * for this process definition should be deleted.
         */
        cascade?: boolean
        /** @description `true`, if only the built-in ExecutionListeners should be notified with the end event. */
        skipCustomListeners?: boolean
        /**
         * @description A boolean value to control whether input/output mappings should be executed during deletion.
         * `true`, if input/output mappings should not be invoked.
         */
        skipIoMappings?: boolean
      }
      path: {
        /** @description The id of the process definition to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Not found
       * Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Deployed Start Form
   * @description Retrieves the deployed form that can be referenced from a start event.
   * For further information please refer to [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
   */
  getDeployedStartForm: {
    parameters: {
      path: {
        /** @description The id of the process definition to get the deployed start form for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
          'application/json': string
        }
      }
      /**
       * @description The form key has wrong format.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The deployed start form cannot be retrieved due to missing permissions on process definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description No deployed start form for a given process definition exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Diagram
   * @description Retrieves the diagram of a process definition.
   *
   * If the process definition's deployment contains an image resource with the same file name
   * as the process definition, the deployed image will be returned by the Get Diagram endpoint.
   * Example: `someProcess.bpmn` and `someProcess.png`.
   * Supported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.
   */
  getProcessDefinitionDiagram: {
    parameters: {
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. The image diagram of this process. */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /** @description The process definition doesn't have an associated diagram. */
      204: {
        content: never
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Variables
   * @description Retrieves the start form variables for a process definition
   * (only if they are defined via the
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms) approach).
   * The start form variables take form data specified on the start event into account.
   * If form fields are defined, the variable types and default values
   * of the form fields are taken into account.
   */
  getStartFormVariables: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of variable names. Allows restricting the list of requested
         * variables to the variable names in the list. It is best practice to restrict the
         * list of variables to the variables actually required by the form in order to
         * minimize fetching of data. If the query parameter is ommitted all variables are
         * fetched. If the query parameter contains non-existent variable names, the variable
         * names are ignored.
         */
        variableNames?: string
        /**
         * @description Determines whether serializable variable values (typically variables that store
         * custom Java objects) should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and
         * transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
         * property introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string
         * containing XML.
         *
         * **Note**: While true is the default value for reasons of backward compatibility, we
         * recommend setting this parameter to false when developing web applications that are
         * independent of the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the process definition to retrieve the variables for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. A JSON object containing a property for each variable returned. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description The id is null or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update History Time to Live
   * @description Updates history time to live for process definition.
   * The field is used within [History cleanup](https://docs.camunda.org/manual/7.20/user-guide/process-engine/history/#history-cleanup).
   * The value of the update is mandatory by default and does not allow `null` values. To enable them, please
   * set the feature flag `enforceHistoryTimeToLive` to `false`. Read more in [Configuration Properties]
   * (https://docs.camunda.org/manual/7.20/reference/deployment-descriptors/tags/process-engine#configuration-properties)
   */
  updateHistoryTimeToLiveByProcessDefinitionId: {
    parameters: {
      path: {
        /** @description The id of the process definition to change history time to live. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['HistoryTimeToLiveDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the request parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Rendered Start Form
   * @description Retrieves the rendered form for a process definition.
   * This method can be used to get the HTML rendering of a
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  getRenderedStartForm: {
    parameters: {
      path: {
        /** @description The id of the process definition to get the rendered start form for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description Process definition has no form field metadata defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Restart Process Instance
   * @description Restarts process instances that were canceled or terminated synchronously.
   * Can also restart completed process instances.
   * It will create a new instance using the original instance information.
   * To execute the restart asynchronously, use the
   * [Restart Process Instance Async](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/post-restart-process-instance-async/) method.
   *
   * For more information about the difference between synchronous and asynchronous execution,
   * please refer to the related section of the
   * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-restart/#execution).
   */
  restartProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the process definition of the process instances to restart. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RestartProcessInstanceDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description In case following parameters are missing: `instructions`, `activityId` or `transitionId`,
       * `processInstanceIds` or `historicProcessInstanceQuery`, an exception of type `InvalidRequestException` is returned.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Restart Process Instance Async
   * @description Restarts process instances that were canceled or terminated asynchronously.
   * Can also restart completed process instances.
   * It will create a new instance using the original instance information.
   * To execute the restart asynchronously, use the
   * [Restart Process Instance](https://docs.camunda.org/manual/7.20/reference/rest/process-definition/post-restart-process-instance-sync/) method.
   *
   * For more information about the difference between synchronous and asynchronous execution,
   * please refer to the related section of the
   * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-restart/#execution).
   */
  restartProcessInstanceAsyncOperation: {
    parameters: {
      path: {
        /** @description The id of the process definition of the process instances to restart. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['RestartProcessInstanceDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description In case following parameters are missing: `instructions`, `activityId` or `transitionId`,
       * `processInstanceIds` or `historicProcessInstanceQuery`,
       * an exception of type `InvalidRequestException` is returned.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Start Instance
   * @description Instantiates a given process definition.
   * Process variables and business key may be supplied in the request body.
   */
  startProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the process definition to be retrieved. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceWithVariablesDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Start Form Key
   * @description Retrieves the key of the start form for a process definition.
   * The form key corresponds to the `FormData#formKey` property in the engine.
   */
  getStartForm: {
    parameters: {
      path: {
        /** @description The id of the process definition to get the start form key for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FormDto']
        }
      }
      /**
       * @description Process definition has no start form defined. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist.  See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Static Called Process Definitions
   * @description For the given process, returns a list of called process definitions corresponding
   * to
   * the `CalledProcessDefinition` interface in the engine. The list
   * contains all process definitions
   * that are referenced statically by call activities in the given
   * process. This endpoint does not
   * resolve process definitions that are referenced with expressions. Each
   * called process definition
   * contains a list of call activity ids, which specifies the call
   * activities that are calling that
   * process. This endpoint does not resolve references to case
   * definitions.
   */
  getStaticCalledProcessDefinitions: {
    parameters: {
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CalledProcessDefinitionDto'][]
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Activity Instance Statistics
   * @description Retrieves runtime statistics of a given process definition, grouped by activities.
   * These statistics include the number of running activity instances, optionally the number of failed jobs
   * and also optionally the number of incidents either grouped by incident types or for a specific incident type.
   * **Note**: This does not include historic data.
   */
  getActivityStatistics: {
    parameters: {
      query?: {
        /** @description Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`. */
        failedJobs?: boolean
        /**
         * @description Valid values for this property are `true` or `false`.
         * If this property has been set to `true` the result will include the corresponding number of incidents
         * for each occurred incident type.
         * If it is set to `false`, the incidents will not be included in the result.
         * Cannot be used in combination with `incidentsForType`.
         */
        incidents?: boolean
        /**
         * @description If this property has been set with any incident type (i.e., a string value) the result
         * will only include the number of incidents for the assigned incident type.
         * Cannot be used in combination with `incidents`.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentsForType?: string
      }
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ActivityStatisticsResultDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Submit Start Form
   * @description Starts a process instance using a set of process variables and the business key.
   * If the start event has Form Field Metadata defined, the process engine will perform backend validation
   * for any form fields which have validators defined.
   * See [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  submitForm: {
    parameters: {
      path: {
        /** @description The id of the process definition to submit the form for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['StartProcessInstanceFormDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto']
        }
      }
      /**
       * @description The instance could not be created due to an invalid variable value,
       * for example if the value could not be parsed to an `Integer` value or
       * the passed variable type is not supported.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The instance could not be created successfully.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend By Id
   * @description Activates or suspends a given process definition by id.
   */
  updateProcessDefinitionSuspensionStateById: {
    parameters: {
      path: {
        /** @description The id of the process definition to activate or suspend. */
        id: string
      }
    }
    /** @description **Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessDefinitionSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if some of the query parameters are invalid,
       * for example if the provided `executionDate` parameter doesn't have the expected format or
       * if the `processDefinitionKey` parameter is `null`. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Process definition with given key does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get XML
   * @description Retrieves the BPMN 2.0 XML of a process definition.
   */
  getProcessDefinitionBpmn20Xml: {
    parameters: {
      path: {
        /** @description The id of the process definition. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionDiagramDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Process definition with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for process instances that fulfill given parameters.
   * Parameters may be static as well as dynamic runtime properties of process instances.
   * The size of the result set can be retrieved by using the Get Instance Count method.
   */
  getProcessInstances: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'instanceId' | 'definitionKey' | 'definitionId' | 'tenantId' | 'businessKey'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by a comma-separated list of process instance ids. */
        processInstanceIds?: string
        /** @description Filter by process instance business key. */
        businessKey?: string
        /** @description Filter by process instance business key that the parameter is a substring of. */
        businessKeyLike?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by the deployment the id belongs to. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances run on. */
        processDefinitionKey?: string
        /**
         * @description Filter by a comma-separated list of process definition keys.
         * A process instance must have one of the given process definition keys.
         */
        processDefinitionKeyIn?: string
        /**
         * @description Exclude instances by a comma-separated list of process definition keys.
         * A process instance must not have one of the given process definition keys.
         */
        processDefinitionKeyNotIn?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Restrict query to all process instances that are sub process instances of the given process instance.
         * Takes a process instance id.
         */
        superProcessInstance?: string
        /**
         * @description Restrict query to all process instances that have the given process instance as a sub process instance.
         * Takes a process instance id.
         */
        subProcessInstance?: string
        /**
         * @description Restrict query to all process instances that are sub process instances of the given case instance.
         * Takes a case instance id.
         */
        superCaseInstance?: string
        /**
         * @description Restrict query to all process instances that have the given case instance as a sub case instance.
         * Takes a case instance id.
         */
        subCaseInstance?: string
        /**
         * @description Only include active process instances. Value may only be true,
         * as false is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended process instances. Value may only be true,
         * as false is the default behavior.
         */
        suspended?: boolean
        /** @description Filter by presence of incidents. Selects only process instances that have an incident. */
        withIncident?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /**
         * @description Filter by the incident type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /** @description Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. */
        tenantIdIn?: string
        /** @description Only include process instances which belong to no tenant. */
        withoutTenantId?: boolean
        /** @description Only include process instances which process definition has no tenant id. */
        processDefinitionWithoutTenantId?: boolean
        /**
         * @description Filter by a comma-separated list of activity ids.
         * A process instance must currently wait in a leaf activity with one of the given activity ids.
         */
        activityIdIn?: string
        /** @description Restrict the query to all process instances that are top level process instances. */
        rootProcessInstances?: boolean
        /** @description Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). */
        leafProcessInstances?: boolean
        /**
         * @description Only include process instances that have variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variables?: string
        /**
         * @description Match all variable names in this query case-insensitively.
         * If set to true variableName and variablename are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values in this query case-insensitively.
         * If set to true variableValue and variablevalue are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid,
       * for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for process instances that fulfill given parameters through a JSON object.
   * This method is slightly more powerful than the Get Instances method because
   * it allows filtering by multiple process variables of types `string`, `number` or `boolean`.
   */
  queryProcessInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto'][]
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid,
       * for example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of process instances that fulfill given parameters.
   */
  getProcessInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by a comma-separated list of process instance ids. */
        processInstanceIds?: string
        /** @description Filter by process instance business key. */
        businessKey?: string
        /** @description Filter by process instance business key that the parameter is a substring of. */
        businessKeyLike?: string
        /** @description Filter by case instance id. */
        caseInstanceId?: string
        /** @description Filter by the deployment the id belongs to. */
        processDefinitionId?: string
        /** @description Filter by the key of the process definition the instances run on. */
        processDefinitionKey?: string
        /**
         * @description Filter by a comma-separated list of process definition keys.
         * A process instance must have one of the given process definition keys.
         */
        processDefinitionKeyIn?: string
        /**
         * @description Exclude instances by a comma-separated list of process definition keys.
         * A process instance must not have one of the given process definition keys.
         */
        processDefinitionKeyNotIn?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /**
         * @description Restrict query to all process instances that are sub process instances of the given process instance.
         * Takes a process instance id.
         */
        superProcessInstance?: string
        /**
         * @description Restrict query to all process instances that have the given process instance as a sub process instance.
         * Takes a process instance id.
         */
        subProcessInstance?: string
        /**
         * @description Restrict query to all process instances that are sub process instances of the given case instance.
         * Takes a case instance id.
         */
        superCaseInstance?: string
        /**
         * @description Restrict query to all process instances that have the given case instance as a sub case instance.
         * Takes a case instance id.
         */
        subCaseInstance?: string
        /**
         * @description Only include active process instances. Value may only be true,
         * as false is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended process instances. Value may only be true,
         * as false is the default behavior.
         */
        suspended?: boolean
        /** @description Filter by presence of incidents. Selects only process instances that have an incident. */
        withIncident?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /**
         * @description Filter by the incident type.
         * See the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/incidents/#incident-types)
         * for a list of incident types.
         */
        incidentType?: string
        /** @description Filter by the incident message. Exact match. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /** @description Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. */
        tenantIdIn?: string
        /** @description Only include process instances which belong to no tenant. */
        withoutTenantId?: boolean
        /** @description Only include process instances which process definition has no tenant id. */
        processDefinitionWithoutTenantId?: boolean
        /**
         * @description Filter by a comma-separated list of activity ids.
         * A process instance must currently wait in a leaf activity with one of the given activity ids.
         */
        activityIdIn?: string
        /** @description Restrict the query to all process instances that are top level process instances. */
        rootProcessInstances?: boolean
        /** @description Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances). */
        leafProcessInstances?: boolean
        /**
         * @description Only include process instances that have variables with certain values.
         * Variable filtering expressions are comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variables?: string
        /**
         * @description Match all variable names in this query case-insensitively.
         * If set to true variableName and variablename are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values in this query case-insensitively.
         * If set to true variableValue and variablevalue are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example an invalid operator for variable comparison is used.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Queries for the number of process instances that fulfill the given parameters.
   * This method takes the same message body as the Get Instances (POST) method and
   * therefore it is slightly more powerful than the Get Instance Count method.
   */
  queryProcessInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Async (POST)
   * @description Deletes multiple process instances asynchronously (batch).
   */
  deleteProcessInstancesAsyncOperation: {
    /** @description **Unallowed property**: `historicProcessInstanceQuery` */
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeleteProcessInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Async Historic Query Based (POST)
   * @description Deletes a set of process instances asynchronously (batch) based on a historic process instance query.
   */
  deleteAsyncHistoricQueryBased: {
    /** @description **Unallowed property**: `processInstanceQuery` */
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeleteProcessInstancesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor historicProcessInstanceQuery is present
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Retries Async (POST)
   * @description Create a batch to set retries of jobs associated with given processes asynchronously.
   */
  setRetriesByProcess: {
    /**
     * @description Please note that if both processInstances and processInstanceQuery are provided,
     * then the resulting execution will be performed on the union of these sets.
     * **Unallowed property**: `historicProcessInstanceQuery`
     */
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetJobRetriesByProcessDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present.
       * Or if the retry count is not specified.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Job Retries Async Historic Query Based (POST)
   * @description Create a batch to set retries of jobs asynchronously based on a historic process instance query.
   */
  setRetriesByProcessHistoricQueryBased: {
    /**
     * @description Please note that if both processInstances and historicProcessInstanceQuery are provided,
     * then the resulting execution will be performed on the union of these sets.
     * **Unallowed property**: `processInstanceQuery`
     */
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetJobRetriesByProcessDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the query parameters are invalid, for example if neither processInstanceIds, nor historicProcessInstanceQuery is present.
       * Or if the retry count is not specified.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Correlate Message Async (POST)
   * @description Correlates a message asynchronously to executions that are waiting for this message.
   * Messages will not be correlated to process definition-level start message events to start process instances.
   */
  correlateMessageAsyncOperation: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CorrelationMessageAsyncDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * * If none of `processInstanceIds`, `processInstanceQuery`, and `historicProcessInstanceQuery` is given
       * * If no process instance ids where found
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the user is not allowed to create the batch.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend In Group
   * @description Activates or suspends process instances by providing certain criteria:
   *
   * # Activate/Suspend Process Instance By Process Definition Id
   * * `suspend`
   * * `processDefinitionId`
   *
   * # Activate/Suspend Process Instance By Process Definition Key
   *
   * * `suspend`
   * * `processDefinitionKey`
   * * `processDefinitionTenantId`
   * * `processDefinitionWithoutTenantId`
   *
   * # Activate/Suspend Process Instance In Group
   * * `suspend`
   * * `processInstanceIds`
   * * `processInstanceQuery`
   * * `historicProcessInstanceQuery`
   */
  updateSuspensionState: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceSuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Bad Request
       * Returned if some of the request parameters are invalid,
       * for example if the provided processDefinitionId or processDefinitionKey parameter is null.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend In Batch
   * @description Activates or suspends process instances asynchronously with a list of process instance ids,
   * a process instance query, and/or a historical process instance query.
   */
  updateSuspensionStateAsyncOperation: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceSuspensionStateAsyncDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * Returned if some of the request parameters are invalid,
       * for example if the provided processDefinitionId or processDefinitionKey parameter is null.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Variables Async (POST)
   * @description Update or create runtime process variables in the root scope of process instances.
   */
  setVariablesAsyncOperation: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SetVariablesAsyncDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
       * the passed variable type is not supported
       * * If none of `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery` is given
       * * If no or an empty array of `variables` is given
       * * If no process instance ids where found
       * * If a transient variable is set
       * * If the engine config flag `javaSerializationFormatEnabled` is `false` and a Java serialized variable is given
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the user is not allowed to create the batch.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
    }
  }
  /**
   * Get Process Instance
   * @description Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.
   */
  getProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the process instance to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceDto']
        }
      }
      /**
       * @description Process instance with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Deletes a running process instance by id.
   */
  deleteProcessInstance: {
    parameters: {
      query?: {
        /** @description If set to true, the custom listeners will be skipped. */
        skipCustomListeners?: boolean
        /** @description If set to true, the input/output mappings will be skipped. */
        skipIoMappings?: boolean
        /** @description If set to true, subprocesses related to deleted processes will be skipped. */
        skipSubprocesses?: boolean
        /** @description If set to false, the request will still be successful if the process id is not found. */
        failIfNotExists?: boolean
      }
      path: {
        /** @description The id of the process instance to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Not found
       * Process instance with given id does not exist.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Activity Instance
   * @description Retrieves an Activity Instance (Tree) for a given process instance by id.
   */
  getActivityInstanceTree: {
    parameters: {
      path: {
        /** @description The id of the process instance for which the activity instance should be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ActivityInstanceDto']
        }
      }
      /** @description Process instance with given id does not exist. */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Process Instance Comments
   * @description Gets the comments for a process instance by id.
   */
  getProcessInstanceComments: {
    parameters: {
      path: {
        /** @description The id of the process instance to retrieve the comments for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CommentDto'][]
        }
      }
      /**
       * @description No process instance exists for the given process instance id. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Modify Process Instance Execution State
   * @description Submits a list of modification instructions to change a process instance's execution state.
   * A modification instruction is one of the following:
   *
   * * Starting execution before an activity
   * * Starting execution after an activity on its single outgoing sequence flow
   * * Starting execution on a specific sequence flow
   * * Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity
   *
   * Instructions are executed immediately and in the order they are provided in this request's body.
   * Variables can be provided with every starting instruction.
   *
   * The exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).
   */
  modifyProcessInstance: {
    parameters: {
      path: {
        /** @description The id of the process instance to modify. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceModificationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description At least one modification instruction misses required parameters. */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description The modification cannot be performed, for example because it starts a failing activity. */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Modify Process Instance Execution State Async
   * @description Submits a list of modification instructions to change a process instance's execution state async.
   * A modification instruction is one of the following:
   *
   * * Starting execution before an activity
   * * Starting execution after an activity on its single outgoing sequence flow
   * * Starting execution on a specific sequence flow
   * * Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity
   *
   * Instructions are executed asynchronous and in the order they are provided in this request's body.
   * Variables can be provided with every starting instruction.
   *
   * The exact semantics of modification can be read about in the
   * [User guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/process-instance-modification/).
   */
  modifyProcessInstanceAsyncOperation: {
    parameters: {
      path: {
        /** @description The id of the process instance to modify. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ProcessInstanceModificationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['BatchDto']
        }
      }
      /**
       * @description Bad Request
       * At least one modification instruction misses required parameters.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Forbidden
       * If the user is not allowed to execute batches. See the Introduction for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /** @description The modification cannot be performed, for example because it starts a failing activity. */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Activate/Suspend Process Instance By Id
   * @description Activates or suspends a given process instance by id.
   */
  updateSuspensionStateById: {
    parameters: {
      path: {
        /** @description The id of the process instance to activate or suspend. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SuspensionStateDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
    }
  }
  /**
   * Get Process Variables
   * @description Retrieves all variables of a given process instance by id.
   */
  getProcessInstanceVariables: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
         * when developing web applications that are independent of the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the process instance to retrieve the variables from. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /** @description Process instance with given id does not exist. */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update/Delete Process Variables
   * @description Updates or deletes the variables of a process instance by id. Updates precede deletions.
   * So, if a variable is updated AND deleted, the deletion overrides the update.
   */
  modifyProcessInstanceVariables: {
    parameters: {
      path: {
        /** @description The id of the process instance to set variables for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchVariablesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Bad Request
       * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
       * the passed variable type is not supported.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description Update or delete could not be executed, for example because the process instance does not exist. */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Process Variable
   * @description Retrieves a variable of a given process instance by id.
   */
  getProcessInstanceVariable: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false
         * when developing web applications that are independent of the Java process applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the process instance to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableValueDto']
        }
      }
      /**
       * @description Bad Request
       * Variable with given id does not exist.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Process Variable
   * @description Sets a variable of a given process instance by id.
   */
  setProcessInstanceVariable: {
    parameters: {
      path: {
        /** @description The id of the process instance to set the variable for. */
        id: string
        /** @description The name of the variable to set. */
        varName: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableValueDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Bad Request
       * The variable value or type is invalid, for example if the value could not be parsed to an Integer value or
       * the passed variable type is not supported.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Process Variable
   * @description Deletes a variable of a process instance by id.
   */
  deleteProcessInstanceVariable: {
    parameters: {
      path: {
        /** @description The id of the process instance to delete the variable from. */
        id: string
        /** @description The name of the variable to delete. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
    }
  }
  /**
   * Get Process Variable (Binary)
   * @description Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.
   * Applicable for byte array or file Process Variables.
   */
  getProcessInstanceVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the process instance to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    responses: {
      /**
       * @description Request successful.
       *         For binary variables or files without any MIME type information, a byte stream is returned.
       *         File variables with MIME type information are returned as the saved type.
       *         Additionally, for file variables the Content-Disposition header will be set.
       */
      200: {
        content: {
          'application/octet-stream': string
          'text/plain': string
        }
      }
      /**
       * @description Bad Request
       * A Process Variable with the given id exists but does not serialize as binary data.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Not Found
       * A Process Variable with the given id does not exist.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Process Variable (Binary)
   * @description Sets the serialized value for a binary variable or the binary value for a file variable.
   */
  setProcessInstanceVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the process instance to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    /** @description For binary variables a multipart form submit with the following parts: */
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormVariableBinaryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Bad Request
       * The variable value or type is invalid, for example if no filename is set.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for schema log entries that fulfill given parameters.
   */
  getSchemaLog: {
    parameters: {
      query?: {
        /** @description Only return schema log entries with a specific version. */
        version?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'timestamp'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /**
       * @description Request successful.
       * **Note**: In order to get any results a user of group `camunda-admin` must
       * be authenticated.
       */
      200: {
        content: {
          'application/json': components['schemas']['SchemaLogEntryDto'][]
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for schema log entries that fulfill given parameters.
   */
  querySchemaLog: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['SchemaLogQueryDto']
      }
    }
    responses: {
      /**
       * @description Request successful.
       * **Note**: In order to get any results a user of group camunda-admin must be
       * authenticated.
       */
      200: {
        content: {
          'application/json': components['schemas']['SchemaLogEntryDto'][]
        }
      }
    }
  }
  /**
   * Event
   * @description A signal is an event of global scope (broadcast semantics) and is delivered to all
   * active handlers. Internally this maps to the engine's signal event received builder
   * method `RuntimeService#createSignalEvent()`. For more information about the signal
   * behavior, see the [Signal Events](https://docs.camunda.org/manual/7.20/reference/bpmn20/events/signal-events/)
   * section of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.20/reference/bpmn20/).
   */
  throwSignal: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SignalDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if:
       *
       * * no name was given
       * * the variable value or type is invalid, for example if the value could not be
       * parsed to an integer value or the passed variable type is not supported
       * * a tenant id and an execution id is specified.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Returned if the user is not allowed to throw a signal event.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Returned if a single execution is specified and no such execution exists or has not
       * subscribed to the signal.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the
       * error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Queries for tasks that fulfill a given filter. The size of the result set can be
   * retrieved by using the Get Task Count method.
   *
   * **Security Consideration:** There are several query parameters (such as
   * assigneeExpression) for specifying an EL expression. These are disabled by default to
   * prevent remote code execution. See the section on
   * [security considerations](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
   * for custom code in the user guide for details.
   */
  getTasks: {
    parameters: {
      query?: {
        /** @description Restrict to task with the given id. */
        taskId?: string
        /** @description Restrict to tasks with any of the given ids. */
        taskIdIn?: string
        /** @description Restrict to tasks that belong to process instances with the given id. */
        processInstanceId?: string
        /** @description Restrict to tasks that belong to process instances with the given ids. */
        processInstanceIdIn?: string
        /** @description Restrict to tasks that belong to process instances with the given business key. */
        processInstanceBusinessKey?: string
        /**
         * @description Restrict to tasks that belong to process instances with the given business key which
         * is described by an expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        processInstanceBusinessKeyExpression?: string
        /**
         * @description Restrict to tasks that belong to process instances with one of the give business keys.
         * The keys need to be in a comma-separated list.
         */
        processInstanceBusinessKeyIn?: string
        /**
         * @description Restrict to tasks that have a process instance business key that has the parameter
         * value as a substring.
         */
        processInstanceBusinessKeyLike?: string
        /**
         * @description Restrict to tasks that have a process instance business key that has the parameter
         * value as a substring and is described by an expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        processInstanceBusinessKeyLikeExpression?: string
        /** @description Restrict to tasks that belong to a process definition with the given id. */
        processDefinitionId?: string
        /** @description Restrict to tasks that belong to a process definition with the given key. */
        processDefinitionKey?: string
        /**
         * @description Restrict to tasks that belong to a process definition with one of the given keys. The
         * keys need to be in a comma-separated list.
         */
        processDefinitionKeyIn?: string
        /** @description Restrict to tasks that belong to a process definition with the given name. */
        processDefinitionName?: string
        /**
         * @description Restrict to tasks that have a process definition name that has the parameter value as
         * a substring.
         */
        processDefinitionNameLike?: string
        /** @description Restrict to tasks that belong to an execution with the given id. */
        executionId?: string
        /** @description Restrict to tasks that belong to case instances with the given id. */
        caseInstanceId?: string
        /** @description Restrict to tasks that belong to case instances with the given business key. */
        caseInstanceBusinessKey?: string
        /**
         * @description Restrict to tasks that have a case instance business key that has the parameter value
         * as a substring.
         */
        caseInstanceBusinessKeyLike?: string
        /** @description Restrict to tasks that belong to a case definition with the given id. */
        caseDefinitionId?: string
        /** @description Restrict to tasks that belong to a case definition with the given key. */
        caseDefinitionKey?: string
        /** @description Restrict to tasks that belong to a case definition with the given name. */
        caseDefinitionName?: string
        /**
         * @description Restrict to tasks that have a case definition name that has the parameter value as a
         * substring.
         */
        caseDefinitionNameLike?: string
        /** @description Restrict to tasks that belong to a case execution with the given id. */
        caseExecutionId?: string
        /**
         * @description Only include tasks which belong to one of the passed and comma-separated activity
         * instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Only include tasks which belong to one of the passed and comma-separated
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include tasks which belong to no tenant. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Restrict to tasks that the given user is assigned to. */
        assignee?: string
        /**
         * @description Restrict to tasks that the user described by the given expression is assigned to.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        assigneeExpression?: string
        /**
         * @description Restrict to tasks that have an assignee that has the parameter
         * value as a substring.
         */
        assigneeLike?: string
        /**
         * @description Restrict to tasks that have an assignee that has the parameter value described by the
         * given expression as a substring. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        assigneeLikeExpression?: string
        /**
         * @description Only include tasks which are assigned to one of the passed and
         * comma-separated user ids.
         */
        assigneeIn?: string
        /**
         * @description Only include tasks which are not assigned to one of the passed and
         * comma-separated user ids.
         */
        assigneeNotIn?: string
        /** @description Restrict to tasks that the given user owns. */
        owner?: string
        /**
         * @description Restrict to tasks that the user described by the given expression owns. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        ownerExpression?: string
        /** @description Only include tasks that are offered to the given group. */
        candidateGroup?: string
        /**
         * @description Only include tasks that are offered to the group described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        candidateGroupExpression?: string
        /** @description Only include tasks that are offered to the given user or to one of his groups. */
        candidateUser?: string
        /**
         * @description Only include tasks that are offered to the user described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        candidateUserExpression?: string
        /**
         * @description Also include tasks that are assigned to users in candidate queries. Default is to only
         * include tasks that are not assigned to any user if you query by candidate user or
         * group(s).
         */
        includeAssignedTasks?: boolean
        /**
         * @description Only include tasks that the given user is involved in. A user is involved in a task if
         * an identity link exists between task and user (e.g., the user is the assignee).
         */
        involvedUser?: string
        /**
         * @description Only include tasks that the user described by the given expression is involved in.
         * A user is involved in a task if an identity link exists between task and user
         * (e.g., the user is the assignee). See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        involvedUserExpression?: string
        /** @description If set to `true`, restricts the query to all tasks that are assigned. */
        assigned?: boolean
        /** @description If set to `true`, restricts the query to all tasks that are unassigned. */
        unassigned?: boolean
        /** @description Restrict to tasks that have the given key. */
        taskDefinitionKey?: string
        /**
         * @description Restrict to tasks that have one of the given keys. The keys need to be in a
         * comma-separated list.
         */
        taskDefinitionKeyIn?: string
        /** @description Restrict to tasks that have a key that has the parameter value as a substring. */
        taskDefinitionKeyLike?: string
        /** @description Restrict to tasks that have the given name. */
        name?: string
        /** @description Restrict to tasks that do not have the given name. */
        nameNotEqual?: string
        /** @description Restrict to tasks that have a name with the given parameter value as substring. */
        nameLike?: string
        /**
         * @description Restrict to tasks that do not have a name with the given parameter
         * value as substring.
         */
        nameNotLike?: string
        /** @description Restrict to tasks that have the given description. */
        description?: string
        /**
         * @description Restrict to tasks that have a description that has the parameter
         * value as a substring.
         */
        descriptionLike?: string
        /** @description Restrict to tasks that have the given priority. */
        priority?: number
        /** @description Restrict to tasks that have a lower or equal priority. */
        maxPriority?: number
        /** @description Restrict to tasks that have a higher or equal priority. */
        minPriority?: number
        /**
         * @description Restrict to tasks that are due on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        dueDate?: string
        /**
         * @description Restrict to tasks that are due on the date described by the given expression. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueDateExpression?: string
        /**
         * @description Restrict to tasks that are due after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.435+0200`.
         */
        dueAfter?: string
        /**
         * @description Restrict to tasks that are due after the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueAfterExpression?: string
        /**
         * @description Restrict to tasks that are due before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.243+0200`.
         */
        dueBefore?: string
        /**
         * @description Restrict to tasks that are due before the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueBeforeExpression?: string
        /**
         * @description Only include tasks which have no due date. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutDueDate?: boolean
        /**
         * @description Restrict to tasks that have a followUp date on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.342+0200`.
         */
        followUpDate?: string
        /**
         * @description Restrict to tasks that have a followUp date on the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpDateExpression?: string
        /**
         * @description Restrict to tasks that have a followUp date after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.542+0200`.
         */
        followUpAfter?: string
        /**
         * @description Restrict to tasks that have a followUp date after the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpAfterExpression?: string
        /**
         * @description Restrict to tasks that have a followUp date before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.234+0200`.
         */
        followUpBefore?: string
        /**
         * @description Restrict to tasks that have a followUp date before the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpBeforeExpression?: string
        /**
         * @description Restrict to tasks that have no followUp date or a followUp date before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
         * typical use case is to query all `active` tasks for a user for a given date.
         */
        followUpBeforeOrNotExistent?: string
        /**
         * @description Restrict to tasks that have no followUp date or a followUp date before the date
         * described by the given expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpBeforeOrNotExistentExpression?: string
        /**
         * @description Restrict to tasks that were created on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
         */
        createdOn?: string
        /**
         * @description Restrict to tasks that were created on the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdOnExpression?: string
        /**
         * @description Restrict to tasks that were created after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
         */
        createdAfter?: string
        /**
         * @description Restrict to tasks that were created after the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdAfterExpression?: string
        /**
         * @description Restrict to tasks that were created before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
         */
        createdBefore?: string
        /**
         * @description Restrict to tasks that were created before the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdBeforeExpression?: string
        /**
         * @description Restrict to tasks that were updated after the given date. Every action that fires
         * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must
         * have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
         */
        updatedAfter?: string
        /**
         * @description Restrict to tasks that were updated after the date described by the given expression. Every action that fires
         * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        updatedAfterExpression?: string
        /**
         * @description Restrict to tasks that are in the given delegation state. Valid values are
         * `PENDING` and `RESOLVED`.
         */
        delegationState?: 'PENDING' | 'RESOLVED'
        /**
         * @description Restrict to tasks that are offered to any of the given candidate groups. Takes a
         * comma-separated list of group names, so for example `developers,support,sales`.
         */
        candidateGroups?: string
        /**
         * @description Restrict to tasks that are offered to any of the candidate groups described by the
         * given expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to
         * `java.util.List` of Strings.
         */
        candidateGroupsExpression?: string
        /**
         * @description Only include tasks which have a candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateGroups?: boolean
        /**
         * @description Only include tasks which have no candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateGroups?: boolean
        /**
         * @description Only include tasks which have a candidate user. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateUsers?: boolean
        /**
         * @description Only include tasks which have no candidate users. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateUsers?: boolean
        /**
         * @description Only include active tasks. Value may only be `true`, as `false`
         * is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended tasks. Value may only be `true`, as
         * `false` is the default behavior.
         */
        suspended?: boolean
        /**
         * @description Only include tasks that have variables with certain values. Variable filtering
         * expressions are comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        taskVariables?: string
        /**
         * @description Only include tasks that belong to process instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`;
         * `notLike`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Only include tasks that belong to case instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        caseInstanceVariables?: string
        /**
         * @description Match all variable names in this query case-insensitively. If set
         * `variableName` and `variablename` are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values in this query case-insensitively. If set
         * `variableValue` and `variablevalue` are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Restrict query to all tasks that are sub tasks of the given task. Takes a task id. */
        parentTaskId?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?:
          | 'instanceId'
          | 'caseInstanceId'
          | 'dueDate'
          | 'executionId'
          | 'caseExecutionId'
          | 'assignee'
          | 'created'
          | 'lastUpdated'
          | 'description'
          | 'id'
          | 'name'
          | 'nameCaseInsensitive'
          | 'priority'
          | 'processVariable'
          | 'executionVariable'
          | 'taskVariable'
          | 'caseExecutionVariable'
          | 'caseInstanceVariable'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TaskDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator for variable
       * comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List (POST)
   * @description Queries for tasks that fulfill a given filter. This method is slightly more powerful
   * than the [Get Tasks](https://docs.camunda.org/manual/7.20/reference/rest/task/get-query/) method because it
   * allows filtering by multiple process or task variables of types `String`, `Number`
   * or `Boolean`. The size of the result set can be retrieved by using the
   * [Get Task Count (POST)](https://docs.camunda.org/manual/7.20/reference/rest/task/post-query-count/) method.
   *
   * **Security Consideration**:
   * There are several parameters (such as `assigneeExpression`) for specifying an EL
   * expression. These are disabled by default to prevent remote code execution. See the
   * section on
   * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
   * in the user guide for details.
   */
  queryTasks: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TaskDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator for variable
       * comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size
   * of the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.20/reference/rest/task/) method.
   *
   * **Security Consideration:** There are several query parameters (such as
   * assigneeExpression) for specifying an EL expression. These are disabled by default to
   * prevent remote code execution. See the section on
   * [security considerations](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
   * for custom code in the user guide for details.
   */
  getTasksCount: {
    parameters: {
      query?: {
        /** @description Restrict to task with the given id. */
        taskId?: string
        /** @description Restrict to tasks with any of the given ids. */
        taskIdIn?: string
        /** @description Restrict to tasks that belong to process instances with the given id. */
        processInstanceId?: string
        /** @description Restrict to tasks that belong to process instances with the given ids. */
        processInstanceIdIn?: string
        /** @description Restrict to tasks that belong to process instances with the given business key. */
        processInstanceBusinessKey?: string
        /**
         * @description Restrict to tasks that belong to process instances with the given business key which
         * is described by an expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        processInstanceBusinessKeyExpression?: string
        /**
         * @description Restrict to tasks that belong to process instances with one of the give business keys.
         * The keys need to be in a comma-separated list.
         */
        processInstanceBusinessKeyIn?: string
        /**
         * @description Restrict to tasks that have a process instance business key that has the parameter
         * value as a substring.
         */
        processInstanceBusinessKeyLike?: string
        /**
         * @description Restrict to tasks that have a process instance business key that has the parameter
         * value as a substring and is described by an expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        processInstanceBusinessKeyLikeExpression?: string
        /** @description Restrict to tasks that belong to a process definition with the given id. */
        processDefinitionId?: string
        /** @description Restrict to tasks that belong to a process definition with the given key. */
        processDefinitionKey?: string
        /**
         * @description Restrict to tasks that belong to a process definition with one of the given keys. The
         * keys need to be in a comma-separated list.
         */
        processDefinitionKeyIn?: string
        /** @description Restrict to tasks that belong to a process definition with the given name. */
        processDefinitionName?: string
        /**
         * @description Restrict to tasks that have a process definition name that has the parameter value as
         * a substring.
         */
        processDefinitionNameLike?: string
        /** @description Restrict to tasks that belong to an execution with the given id. */
        executionId?: string
        /** @description Restrict to tasks that belong to case instances with the given id. */
        caseInstanceId?: string
        /** @description Restrict to tasks that belong to case instances with the given business key. */
        caseInstanceBusinessKey?: string
        /**
         * @description Restrict to tasks that have a case instance business key that has the parameter value
         * as a substring.
         */
        caseInstanceBusinessKeyLike?: string
        /** @description Restrict to tasks that belong to a case definition with the given id. */
        caseDefinitionId?: string
        /** @description Restrict to tasks that belong to a case definition with the given key. */
        caseDefinitionKey?: string
        /** @description Restrict to tasks that belong to a case definition with the given name. */
        caseDefinitionName?: string
        /**
         * @description Restrict to tasks that have a case definition name that has the parameter value as a
         * substring.
         */
        caseDefinitionNameLike?: string
        /** @description Restrict to tasks that belong to a case execution with the given id. */
        caseExecutionId?: string
        /**
         * @description Only include tasks which belong to one of the passed and comma-separated activity
         * instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Only include tasks which belong to one of the passed and comma-separated
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include tasks which belong to no tenant. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutTenantId?: boolean
        /** @description Restrict to tasks that the given user is assigned to. */
        assignee?: string
        /**
         * @description Restrict to tasks that the user described by the given expression is assigned to.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        assigneeExpression?: string
        /**
         * @description Restrict to tasks that have an assignee that has the parameter
         * value as a substring.
         */
        assigneeLike?: string
        /**
         * @description Restrict to tasks that have an assignee that has the parameter value described by the
         * given expression as a substring. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        assigneeLikeExpression?: string
        /**
         * @description Only include tasks which are assigned to one of the passed and
         * comma-separated user ids.
         */
        assigneeIn?: string
        /**
         * @description Only include tasks which are not assigned to one of the passed and
         * comma-separated user ids.
         */
        assigneeNotIn?: string
        /** @description Restrict to tasks that the given user owns. */
        owner?: string
        /**
         * @description Restrict to tasks that the user described by the given expression owns. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        ownerExpression?: string
        /** @description Only include tasks that are offered to the given group. */
        candidateGroup?: string
        /**
         * @description Only include tasks that are offered to the group described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        candidateGroupExpression?: string
        /** @description Only include tasks that are offered to the given user or to one of his groups. */
        candidateUser?: string
        /**
         * @description Only include tasks that are offered to the user described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        candidateUserExpression?: string
        /**
         * @description Also include tasks that are assigned to users in candidate queries. Default is to only
         * include tasks that are not assigned to any user if you query by candidate user or
         * group(s).
         */
        includeAssignedTasks?: boolean
        /**
         * @description Only include tasks that the given user is involved in. A user is involved in a task if
         * an identity link exists between task and user (e.g., the user is the assignee).
         */
        involvedUser?: string
        /**
         * @description Only include tasks that the user described by the given expression is involved in.
         * A user is involved in a task if an identity link exists between task and user
         * (e.g., the user is the assignee). See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions.
         */
        involvedUserExpression?: string
        /** @description If set to `true`, restricts the query to all tasks that are assigned. */
        assigned?: boolean
        /** @description If set to `true`, restricts the query to all tasks that are unassigned. */
        unassigned?: boolean
        /** @description Restrict to tasks that have the given key. */
        taskDefinitionKey?: string
        /**
         * @description Restrict to tasks that have one of the given keys. The keys need to be in a
         * comma-separated list.
         */
        taskDefinitionKeyIn?: string
        /** @description Restrict to tasks that have a key that has the parameter value as a substring. */
        taskDefinitionKeyLike?: string
        /** @description Restrict to tasks that have the given name. */
        name?: string
        /** @description Restrict to tasks that do not have the given name. */
        nameNotEqual?: string
        /** @description Restrict to tasks that have a name with the given parameter value as substring. */
        nameLike?: string
        /**
         * @description Restrict to tasks that do not have a name with the given parameter
         * value as substring.
         */
        nameNotLike?: string
        /** @description Restrict to tasks that have the given description. */
        description?: string
        /**
         * @description Restrict to tasks that have a description that has the parameter
         * value as a substring.
         */
        descriptionLike?: string
        /** @description Restrict to tasks that have the given priority. */
        priority?: number
        /** @description Restrict to tasks that have a lower or equal priority. */
        maxPriority?: number
        /** @description Restrict to tasks that have a higher or equal priority. */
        minPriority?: number
        /**
         * @description Restrict to tasks that are due on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.546+0200`.
         */
        dueDate?: string
        /**
         * @description Restrict to tasks that are due on the date described by the given expression. See the
         * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueDateExpression?: string
        /**
         * @description Restrict to tasks that are due after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.435+0200`.
         */
        dueAfter?: string
        /**
         * @description Restrict to tasks that are due after the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueAfterExpression?: string
        /**
         * @description Restrict to tasks that are due before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.243+0200`.
         */
        dueBefore?: string
        /**
         * @description Restrict to tasks that are due before the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        dueBeforeExpression?: string
        /**
         * @description Only include tasks which have no due date. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutDueDate?: boolean
        /**
         * @description Restrict to tasks that have a followUp date on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date
         * must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.342+0200`.
         */
        followUpDate?: string
        /**
         * @description Restrict to tasks that have a followUp date on the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpDateExpression?: string
        /**
         * @description Restrict to tasks that have a followUp date after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.542+0200`.
         */
        followUpAfter?: string
        /**
         * @description Restrict to tasks that have a followUp date after the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpAfterExpression?: string
        /**
         * @description Restrict to tasks that have a followUp date before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the
         * date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,
         * `2013-01-23T14:42:45.234+0200`.
         */
        followUpBefore?: string
        /**
         * @description Restrict to tasks that have a followUp date before the date described by the given
         * expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpBeforeExpression?: string
        /**
         * @description Restrict to tasks that have no followUp date or a followUp date before the given date.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The
         * typical use case is to query all `active` tasks for a user for a given date.
         */
        followUpBeforeOrNotExistent?: string
        /**
         * @description Restrict to tasks that have no followUp date or a followUp date before the date
         * described by the given expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        followUpBeforeOrNotExistentExpression?: string
        /**
         * @description Restrict to tasks that were created on the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have
         * the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
         */
        createdOn?: string
        /**
         * @description Restrict to tasks that were created on the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdOnExpression?: string
        /**
         * @description Restrict to tasks that were created after the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
         */
        createdAfter?: string
        /**
         * @description Restrict to tasks that were created after the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdAfterExpression?: string
        /**
         * @description Restrict to tasks that were created before the given date. By
         * [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must have the
         * format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
         */
        createdBefore?: string
        /**
         * @description Restrict to tasks that were created before the date described by the given expression.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        createdBeforeExpression?: string
        /**
         * @description Restrict to tasks that were updated after the given date. Every action that fires
         * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
         * By [default](https://docs.camunda.org/manual/7.20/reference/rest/overview/date-format/), the date must
         * have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
         */
        updatedAfter?: string
        /**
         * @description Restrict to tasks that were updated after the date described by the given expression. Every action that fires
         * a [task update event](https://docs.camunda.org/manual/7.20/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.
         * See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to a
         * `java.util.Date` or `org.joda.time.DateTime` object.
         */
        updatedAfterExpression?: string
        /**
         * @description Restrict to tasks that are in the given delegation state. Valid values are
         * `PENDING` and `RESOLVED`.
         */
        delegationState?: 'PENDING' | 'RESOLVED'
        /**
         * @description Restrict to tasks that are offered to any of the given candidate groups. Takes a
         * comma-separated list of group names, so for example `developers,support,sales`.
         */
        candidateGroups?: string
        /**
         * @description Restrict to tasks that are offered to any of the candidate groups described by the
         * given expression. See the
         * [user guide](https://docs.camunda.org/manual/7.20/user-guide/process-engine/expression-language/#internal-context-functions)
         * for more information on available functions. The expression must evaluate to
         * `java.util.List` of Strings.
         */
        candidateGroupsExpression?: string
        /**
         * @description Only include tasks which have a candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateGroups?: boolean
        /**
         * @description Only include tasks which have no candidate group. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateGroups?: boolean
        /**
         * @description Only include tasks which have a candidate user. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withCandidateUsers?: boolean
        /**
         * @description Only include tasks which have no candidate users. Value may only be `true`,
         * as `false` is the default behavior.
         */
        withoutCandidateUsers?: boolean
        /**
         * @description Only include active tasks. Value may only be `true`, as `false`
         * is the default behavior.
         */
        active?: boolean
        /**
         * @description Only include suspended tasks. Value may only be `true`, as
         * `false` is the default behavior.
         */
        suspended?: boolean
        /**
         * @description Only include tasks that have variables with certain values. Variable filtering
         * expressions are comma-separated and are structured as follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        taskVariables?: string
        /**
         * @description Only include tasks that belong to process instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`;
         * `notLike`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        processVariables?: string
        /**
         * @description Only include tasks that belong to case instances that have variables with certain
         * values. Variable filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`. `key` is the variable name,
         * `operator` is the comparison operator to be used and `value` the variable value.
         *
         * **Note**: Values are always treated as String objects on server side.
         *
         * Valid `operator` values are:
         * `eq` - equal to;
         * `neq` - not equal to;
         * `gt` - greater than;
         * `gteq` - greater than or equal to;
         * `lt` - lower than;
         * `lteq` - lower than or equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        caseInstanceVariables?: string
        /**
         * @description Match all variable names in this query case-insensitively. If set
         * `variableName` and `variablename` are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values in this query case-insensitively. If set
         * `variableValue` and `variablevalue` are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Restrict query to all tasks that are sub tasks of the given task. Takes a task id. */
        parentTaskId?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List Count (POST)
   * @description Retrieves the number of tasks that fulfill the given filter. Corresponds to the size
   * of the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.20/reference/rest/task/post-query/)
   * method and takes the same parameters.
   *
   * **Security Consideration**:
   * There are several parameters (such as `assigneeExpression`) for specifying an EL
   * expression. These are disabled by default to prevent remote code execution. See the
   * section on
   * [security considerations for custom code](https://docs.camunda.org/manual/7.20/user-guide/process-engine/securing-custom-code/)
   * in the user guide for details.
   */
  queryTasksCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create
   * @description Creates a new task.
   */
  createTask: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if a not valid `delegationState` is supplied. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Count By Candidate Group
   * @description Retrieves the number of tasks for each candidate group.
   */
  getTaskCountByCandidateGroup: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TaskCountByCandidateGroupResultDto'][]
          'application/csv': unknown
          'text/csv': unknown
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the authenticated user is unauthorized to read the history. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a task by id.
   */
  getTask: {
    parameters: {
      path: {
        /** @description The id of the task to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TaskDto']
        }
      }
      /**
       * @description Task with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update
   * @description Updates a task.
   */
  updateTask: {
    parameters: {
      path: {
        /** @description The id of the task to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if a not valid `delegationState` is supplied. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the corresponding task cannot be found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Removes a task by id.
   */
  deleteTask: {
    parameters: {
      path: {
        /** @description The id of the task to be removed. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Bad Request. The Task with the given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The Task with the given id cannot be deleted because it is part of a running process or case instance.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for
       * the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Set Assignee
   * @description Changes the assignee of a task to a specific user.
   *
   * **Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.20/reference/rest/task/post-claim/)
   * method is that this method does not check if the task already has a user
   * assigned to it.
   */
  setAssignee: {
    parameters: {
      path: {
        /** @description The id of the task to set the assignee for. */
        id: string
      }
    }
    /** @description Provide the id of the user that will be the assignee of the task. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserIdDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task with given id does not exist or setting the assignee was not successful.
       * See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Gets the attachments for a task.
   */
  getAttachments: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the attachments for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AttachmentDto'][]
        }
      }
      /**
       * @description No task exists for the given task id. See the [Introduction](/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create
   * @description Creates an attachment for a task.
   */
  addAttachment: {
    parameters: {
      path: {
        /** @description The id of the task to add the attachment to. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormAttachmentDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AttachmentDto']
        }
      }
      /**
       * @description The task does not exists or task id is null. No content or url to remote content exists. See the
       * [Introduction](/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a task attachment by task id and attachment id.
   */
  getAttachment: {
    parameters: {
      path: {
        /** @description The id of the task. */
        id: string
        /** @description The id of the attachment to be retrieved. */
        attachmentId: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['AttachmentDto']
        }
      }
      /**
       * @description The attachment for the given task and attachment id does not exist or the history of the engine is
       * disabled.
       *
       * See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Removes an attachment from a task by id.
   */
  deleteAttachment: {
    parameters: {
      path: {
        /** @description The id of the task. */
        id: string
        /** @description The id of the attachment to be removed. */
        attachmentId: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description A Task Attachment for the given task id and attachment id does not exist. See the
       * [Introduction](/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get (Binary)
   * @description Retrieves the binary content of a task attachment by task id and attachment id.
   */
  getAttachmentData: {
    parameters: {
      path: {
        /** @description The id of the task. */
        id: string
        /** @description The id of the attachment to be retrieved. */
        attachmentId: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/octet-stream': string
          'text/plain': string
        }
      }
      /**
       * @description The attachment content for the given task id and attachment id does not exist, or the history of the
       * engine is disabled.
       *
       * See the [Introduction](/reference/rest/overview/#error-handling) for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Handle BPMN Error
   * @description Reports a business error in the context of a running task by id. The error code must
   * be specified to identify the BPMN error handler. See the documentation for
   * [Reporting Bpmn Error](https://docs.camunda.org/manual/7.20/reference/bpmn20/tasks/user-task/#reporting-bpmn-error)
   * in User Tasks.
   */
  handleBpmnError: {
    parameters: {
      path: {
        /** @description The id of the task a BPMN error is reported for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskBpmnErrorDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the `errorCode` or `id` are not present in the request. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the authenticated user is unauthorized to update the task. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Handle BPMN Escalation
   * @description Reports an escalation in the context of a running task by id. The escalation code must
   * be specified to identify the escalation handler. See the documentation for
   * [Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.20/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation)
   * in User Tasks.
   */
  handleEscalation: {
    parameters: {
      path: {
        /** @description The id of the task in which context a BPMN escalation is reported. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['TaskEscalationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Returned if the <code>escalationCode</code> is not provided in
       * the request. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the authenticated user is unauthorized to update the process instance. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description Returned if the task does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Claim
   * @description Claims a task for a specific user.
   *
   * **Note:** The difference with the
   * [Set Assignee](https://docs.camunda.org/manual/7.20/reference/rest/task/post-assignee/)
   * method is that here a check is performed to see if the task already has a user
   * assigned to it.
   */
  claim: {
    parameters: {
      path: {
        /** @description The id of the task to claim. */
        id: string
      }
    }
    /** @description Provide the id of the user that claims the task. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserIdDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task with given id does not exist or claiming was not successful. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Gets the comments for a task by id.
   */
  getComments: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the comments for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CommentDto'][]
        }
      }
      /**
       * @description No task exists for the given task id. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create
   * @description Creates a comment for a task by id.
   */
  createComment: {
    parameters: {
      path: {
        /** @description The id of the task to add the comment to. */
        id: string
      }
    }
    /** @description **Note:** Only the `message` and `processInstanceId` properties will be used. Every other property passed to this endpoint will be ignored. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['CommentDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CommentDto']
        }
      }
      /**
       * @description The task does not exist or no comment message was submitted. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The history of the engine is disabled. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
    }
  }
  /**
   * Get
   * @description Retrieves a task comment by task id and comment id.
   */
  getComment: {
    parameters: {
      path: {
        /** @description The id of the task. */
        id: string
        /** @description The id of the comment to be retrieved. */
        commentId: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CommentDto']
        }
      }
      /**
       * @description The task or comment with given task and comment id does not exist, or the history of
       * the engine is disabled. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Complete
   * @description Completes a task and updates process variables.
   */
  complete: {
    parameters: {
      path: {
        /** @description The id of the task to complete. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompleteTaskDto']
      }
    }
    responses: {
      /** @description Request successful. The response contains the process variables. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /** @description Request successful. The response contains no variables. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the task does not exist or the corresponding process instance could not be
       * resumed successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delegate
   * @description Delegates a task to another user.
   */
  delegateTask: {
    parameters: {
      path: {
        /** @description The id of the task to delegate. */
        id: string
      }
    }
    /** @description Provide the id of the user that the task should be delegated to. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserIdDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description If the task does not exist or delegation was not successful. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Deployed Form
   * @description Retrieves the deployed form that is referenced from a given task. For further
   * information please refer to the
   * [User Guide](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#embedded-task-forms).
   */
  getDeployedForm: {
    parameters: {
      path: {
        /** @description The id of the task to get the deployed form for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
          'application/json': string
        }
      }
      /**
       * @description The form key has wrong format. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The deployed form cannot be retrieved due to missing permissions on task resource.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      403: {
        content: {
          'application/json': components['schemas']['AuthorizationExceptionDto']
        }
      }
      /**
       * @description No deployed form for a given task exists. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Form Key
   * @description Retrieves the form key for a task. The form key corresponds to the `FormData#formKey`
   * property in the engine. This key can be used to do task-specific form rendering in
   * client applications. Additionally, the context path of the containing process
   * application is returned.
   */
  getForm: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the form for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['FormDto']
        }
      }
      /**
       * @description Task with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Form Variables
   * @description Retrieves the form variables for a task. The form variables take form data specified
   * on the task into account. If form fields are defined, the variable types and default
   * values of the form fields are taken into account.
   */
  getFormVariables: {
    parameters: {
      query?: {
        /**
         * @description A comma-separated list of variable names. Allows restricting the list of requested
         * variables to the variable names in the list. It is best practice to restrict the
         * list of variables to the variables actually required by the form in order to
         * minimize fetching of data. If the query parameter is ommitted all variables are
         * fetched. If the query parameter contains non-existent variable names, the variable
         * names are ignored.
         */
        variableNames?: string
        /**
         * @description Determines whether serializable variable values (typically variables that store
         * custom Java objects) should be deserialized on server side (default true).
         *
         * If set to true, a serializable variable will be deserialized on server side and
         * transformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean
         * property introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to false, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string
         * containing XML.
         *
         * Note: While true is the default value for reasons of backward compatibility, we
         * recommend setting this parameter to false when developing web applications that are
         * independent of the Java process applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the task to retrieve the variables for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. A JSON object containing a property for each variable returned. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description  id is null or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Gets the identity links for a task by id, which are the users and groups that are in
   * *some* relation to it (including assignee and owner).
   */
  getIdentityLinks: {
    parameters: {
      query?: {
        /** @description Filter by the type of links to include. */
        type?: string
      }
      path: {
        /** @description The id of the task to retrieve the identity links for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['IdentityLinkDto'][]
        }
      }
      /**
       * @description Task with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Add
   * @description Adds an identity link to a task by id. Can be used to link any user or group to a task
   * and specify a relation.
   */
  addIdentityLink: {
    parameters: {
      path: {
        /** @description The id of the task to add a link to. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['IdentityLinkDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete
   * @description Removes an identity link from a task by id
   */
  deleteIdentityLink: {
    parameters: {
      path: {
        /** @description The id of the task to remove a link from. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['IdentityLinkDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task with given id does not exist.
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for
       * the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Local Task Variables
   * @description Retrieves all variables of a given task by id.
   */
  getTaskLocalVariables: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on the server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this
         * parameter to `false` when developing web applications that are independent of the Java process
         * applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the task to retrieve the variables from. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update/Delete Local Task Variables
   * @description Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is
   * updated AND deleted, the deletion overrides the update.
   */
  modifyTaskLocalVariables: {
    parameters: {
      path: {
        /** @description The id of the task to set variables for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchVariablesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
       * or the passed variable type is not supported. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Update or delete could not be executed because the task is `null` or does not exist.. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Local Task Variable
   * @description Retrieves a variable from the context of a given task by id.
   */
  getTaskLocalVariable: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on the server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
         * parameter to `false` when developing web applications that are independent of the Java process
         * applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the task to retrieve the variable from. */
        id: string
        /** @description The name of the variable to get */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableValueDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Local Task Variable
   * @description Sets a variable in the context of a given task.
   */
  putTaskLocalVariable: {
    parameters: {
      path: {
        /** @description The id of the task to set the variable for. */
        id: string
        /** @description The name of the variable to set. */
        varName: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableValueDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
       * value or the passed variable type is not supported or a new transient variable has the name that is
       * already persisted. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The variable name is `null`, or the Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Local Task Variable
   * @description Removes a local variable from a task by id.
   */
  deleteTaskLocalVariable: {
    parameters: {
      path: {
        /** @description The id of the task to delete the variable from. */
        id: string
        /** @description The name of the variable to be removed. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Local Task Variable (Binary)
   * @description Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file
   * variables.
   */
  getTaskLocalVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    responses: {
      /**
       * @description Request successful.
       *         For binary variables or files without any MIME type information, a byte stream is returned.
       *         File variables with MIME type information are returned as the saved type.
       *         Additionally, for file variables the Content-Disposition header will be set.
       */
      200: {
        content: {
          'application/octet-stream': string
          'text/plain': string
        }
      }
      /**
       * @description Variable with given id exists but is not a binary variable.See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Local Task Variable (Binary)
   * @description Sets the serialized value for a binary variable or the binary value for a file variable.
   */
  setBinaryTaskLocalVariable: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    /** @description For binary variables a multipart form submit with the following parts: */
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormVariableBinaryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if no filename is set. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable name is `null`, or the Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Rendered Form
   * @description Retrieves the rendered form for a task. This method can be used to get the HTML
   * rendering of a
   * [Generated Task Form](https://docs.camunda.org/manual/7.20/user-guide/task-forms/#generated-task-forms).
   */
  getRenderedForm: {
    parameters: {
      path: {
        /** @description The id of the task to get the rendered form for. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/xhtml+xml': string
        }
      }
      /**
       * @description The task with the given id does not exist or has no form field metadata defined for
       * this task. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Resolve
   * @description Resolves a task and updates execution variables.
   *
   * Resolving a task marks that the assignee is done with the task delegated to them, and
   * that it can be sent back to the owner. Can only be executed when the task has been
   * delegated. The assignee will be set to the owner, who performed the delegation.
   */
  resolve: {
    parameters: {
      path: {
        /** @description The id of the task to resolve. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompleteTaskDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed
       * to an Integer value or the passed variable type is not supported. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the task does not exist or the corresponding process instance could not be
       * resumed successfully. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Submit Form
   * @description Completes a task and updates process variables using a form submit. There are two
   * difference between this method and the `complete` method:
   *
   * * If the task is in state `PENDING` - i.e., has been delegated before, it is not
   * completed but resolved. Otherwise it will be completed.
   * * If the task has Form Field Metadata defined, the process engine will perform backend
   * validation for any form fields which have validators defined.
   * See the
   * [Generated Task Forms](https://docs.camunda.org/manual/7.20/user-guide/task-forms/_index/#generated-task-forms)
   * section of the [User Guide](https://docs.camunda.org/manual/7.20/user-guide/) for more information.
   */
  submit: {
    parameters: {
      path: {
        /** @description The id of the task to submit the form for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompleteTaskDto']
      }
    }
    responses: {
      /** @description Request successful. The response contains the process variables. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /** @description Request successful. The response contains no variables. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if the value could not be parsed to an Integer value
       * or the passed variable type is not supported.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for
       * the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description If the task does not exist or the corresponding process instance could not be resumed successfully.
       *
       * See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling) for
       * the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Unclaim
   * @description Resets a task's assignee. If successful, the task is not assigned to a user.
   */
  unclaim: {
    parameters: {
      path: {
        /** @description The id of the task to unclaim. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The Task with the given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Variables
   * @description Retrieves all variables visible from the task. A variable is visible from the task if it is a local task
   * variable or declared in a parent scope of the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  getTaskVariables: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on the server side (default `true`).
         * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
         * parameter to `false` when developing web applications that are independent of the Java process
         * applications deployed to the engine.
         */
        deserializeValues?: boolean
      }
      path: {
        /** @description The id of the task to retrieve the variables from. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueDto']
          }
        }
      }
      /**
       * @description Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update/Delete Task Variables
   * @description Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is
   * updated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a
   * local task variable or declared in a parent scope of the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  modifyTaskVariables: {
    parameters: {
      path: {
        /** @description The id of the task to set variables for. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchVariablesDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid. For example the value could not be parsed to an `Integer` value
       * or the passed variable type is not supported. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Update or delete could not be executed because the task is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Variable
   * @description Retrieves a variable from the context of a given task.
   * The variable must be visible from the task. It is visible from the task if it is a local task variable or
   * declared in a parent scope of the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  getTaskVariable: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on the server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * Note: While `true` is the default value for reasons of backward compatibility, we recommend setting this
         * parameter to `false` when developing web applications that are independent of the Java process
         * applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the task to retrieve the variable from. */
        id: string
        /** @description The name of the variable to get. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableValueDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Task Variable
   * @description Updates a process variable that is visible from the Task scope. A variable is visible from the task if it
   * is a local task variable, or declared in a parent scope of the task. See the documentation on
   * [variable scopes and visibility](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).
   *
   * **Note**: If a variable doesn't exist, the variable is created in the top-most scope
   * visible from the task.
   */
  putTaskVariable: {
    parameters: {
      path: {
        /** @description The id of the task to set the variable for. */
        id: string
        /** @description The name of the variable to set. */
        varName: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableValueDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`
       * value or the passed variable type is not supported or a new transient variable has the name that is
       * already persisted. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The variable name is `null`, or the Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Task Variable
   * @description Removes a variable that is visible to a task. A variable is visible to a task if it is a local task
   * variable or declared in a parent scope of the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  deleteTaskVariable: {
    parameters: {
      path: {
        /** @description The id of the task to delete the variable from. */
        id: string
        /** @description The name of the variable to be removed. */
        varName: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description Task id is null or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Task Variable (Binary)
   * @description Retrieves a binary variable from the context of a given task. Applicable for byte array and file
   * variables. The variable must be visible from the task. It is visible from the task if it is a local task
   * variable or declared in a parent scope of the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  getTaskVariableBinary: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    responses: {
      /**
       * @description Request successful.
       *         For binary variables or files without any MIME type information, a byte stream is returned.
       *         File variables with MIME type information are returned as the saved type.
       *         Additionally, for file variables the Content-Disposition header will be set.
       */
      200: {
        content: {
          'application/octet-stream': string
          'text/plain': string
        }
      }
      /**
       * @description Variable with given id exists but is not a binary variable.See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Task Variable (Binary)
   * @description Sets the serialized value for a binary variable or the binary value for a file variable visible from the
   * task. A variable is visible from the task if it is a local task variable or declared in a parent scope of
   * the task. See documentation on
   * [visiblity of variables](https://docs.camunda.org/manual/7.20/user-guide/process-engine/variables/).
   */
  setBinaryTaskVariable: {
    parameters: {
      path: {
        /** @description The id of the task to retrieve the variable for. */
        id: string
        /** @description The name of the variable to retrieve. */
        varName: string
      }
    }
    /** @description For binary variables a multipart form submit with the following parts: */
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['MultiFormVariableBinaryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /**
       * @description The variable value or type is invalid, for example if no filename is set. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable name is `null`, or the Task id is `null` or does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Fetch Telemetry Configuration
   * @description Fetches Telemetry Configuration.
   */
  getTelemetryConfiguration: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TelemetryConfigurationDto']
        }
      }
      /** @description If the user who perform the operation is not a <b>camunda-admin</b> user. */
      401: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Configure Telemetry
   * @description Configures whether Camunda receives data collection of the process engine setup and usage.
   */
  configureTelemetry: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['TelemetryConfigurationDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description If the user who perform the operation is not a <b>camunda-admin</b> user. */
      401: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Fetch Telemetry Data
   * @description Fetches Telemetry Data.
   */
  getTelemetryData: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TelemetryDataDto']
        }
      }
    }
  }
  /**
   * Get Tenants
   * @description Query for a list of tenants using a list of parameters. The size of the result set
   * can be retrieved by using the [Get Tenant
   * Count](https://docs.camunda.org/manual/7.20/reference/rest/tenant/get-query-count/) method.
   */
  queryTenants: {
    parameters: {
      query?: {
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'id' | 'name'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /** @description Filter by the id of the tenant. */
        id?: string
        /** @description Filter by the name of the tenant. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Select only tenants where the given user is a member of. */
        userMember?: string
        /** @description Select only tenants where the given group is a member of. */
        groupMember?: string
        /**
         * @description Select only tenants where the user or one of his groups is a member of.
         * Can only be used in combination with the `userMember` parameter. Value may only be `true`,
         * as `false` is the default behavior.
         */
        includingGroupsOfUser?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TenantDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy` is specified. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Tenant Resource Options
   * @description The `/tenant` resource supports two custom OPTIONS requests, this one for the resource
   * as such and one for individual tenant instances. The OPTIONS request
   * allows checking for the set of available operations that the currently
   * authenticated user can perform on the `/tenant` resource. If the user
   * can perform an operation or not may depend on various things,
   * including the users authorizations to interact with this resource and
   * the internal configuration of the process engine.
   */
  availableTenantResourceOperations: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Get Tenant Count
   * @description Query for tenants using a list of parameters and retrieves the count.
   */
  getTenantCount: {
    parameters: {
      query?: {
        /** @description Filter by the id of the tenant. */
        id?: string
        /** @description Filter by the name of the tenant. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Select only tenants where the given user is a member of. */
        userMember?: string
        /** @description Select only tenants where the given group is a member of. */
        groupMember?: string
        /**
         * @description Select only tenants where the user or one of his groups is a member of.
         * Can only be used in combination with the `userMember` parameter. Value may only be `true`,
         * as `false` is the default behavior.
         */
        includingGroupsOfUser?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create Tenant
   * @description Create a new tenant.
   */
  createTenant: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['TenantDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The tenant could not be created due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Tenant
   * @description Retrieves a tenant.
   */
  getTenant: {
    parameters: {
      path: {
        /** @description The id of the tenant to be retrieved. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['TenantDto']
        }
      }
      /**
       * @description Tenant with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update Tenant
   * @description Updates a given tenant.
   */
  updateTenant: {
    parameters: {
      path: {
        /** @description The id of the tenant. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['TenantDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the tenant with the requested Id cannot be found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The tenant could not be updated due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete Tenant
   * @description Deletes a tenant by id.
   */
  deleteTenant: {
    parameters: {
      path: {
        /** @description The id of the tenant to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Tenant cannot be found. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Tenant Resource Options
   * @description The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for
   * individual tenant instances. The OPTIONS request allows checking for the set of available operations that
   * the currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an
   * operation or not may depend on various things, including the users authorizations to interact with this
   * resource and the internal configuration of the process engine.
   */
  availableTenantInstanceOperations: {
    parameters: {
      path: {
        /** @description The id of the tenant */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Tenant Group Membership Resource Options
   * @description The OPTIONS request allows checking for the set of available operations that the
   * currently authenticated user can perform on the resource. If the user
   * can perform an operation or not may depend on various things,
   * including the users authorizations to interact with this resource and
   * the internal configuration of the process engine.
   */
  availableTenantGroupMembersOperations: {
    parameters: {
      path: {
        /** @description The id of the tenant */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Create Tenant Group Membership
   * @description Creates a membership between a tenant and a group.
   */
  createGroupMembership: {
    parameters: {
      path: {
        /** @description The id of the tenant. */
        id: string
        /** @description The id of the group. */
        groupId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an internal error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create Tenant Group Membership
   * @description Creates a membership between a tenant and a group.
   */
  deleteGroupMembership: {
    parameters: {
      path: {
        /** @description The id of the tenant. */
        id: string
        /** @description The id of the group. */
        groupId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an internal error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Tenant User Membership Resource Options
   * @description The OPTIONS request allows checking for the set of available operations that the
   * currently authenticated user can perform on the resource. If the user
   * can perform an operation or not may depend on various things,
   * including the users authorizations to interact with this resource and
   * the internal configuration of the process engine.
   */
  availableTenantUserMembersOperations: {
    parameters: {
      path: {
        /** @description The id of the tenant */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Create Tenant User Membership
   * @description Creates a membership between a tenant and an user.
   */
  createUserMembership: {
    parameters: {
      path: {
        /** @description The id of the tenant. */
        id: string
        /** @description The id of the user. */
        userId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an internal error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Delete a Tenant User Membership
   * @description Deletes a membership between a tenant and an user.
   */
  deleteUserMembership: {
    parameters: {
      path: {
        /** @description The id of the tenant. */
        id: string
        /** @description The id of the user. */
        userId: string
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only. */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description In case an error occurs. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get List
   * @description Query for a list of users using a list of parameters.
   * The size of the result set can be retrieved by using the Get User Count method.
   * [Get User Count](https://docs.camunda.org/manual/7.20/reference/rest/user/get-query-count/) method.
   */
  getUsers: {
    parameters: {
      query?: {
        /** @description Filter by user id */
        id?: string
        /** @description Filter by a comma-separated list of user ids. */
        idIn?: string
        /** @description Filter by the first name of the user. Exact match. */
        firstName?: string
        /** @description Filter by the first name that the parameter is a substring of. */
        firstNameLike?: string
        /** @description Filter by the last name of the user. Exact match. */
        lastName?: string
        /** @description Filter by the last name that the parameter is a substring of. */
        lastNameLike?: string
        /** @description Filter by the email of the user. Exact match. */
        email?: string
        /** @description Filter by the email that the parameter is a substring of. */
        emailLike?: string
        /** @description Filter for users which are members of the given group. */
        memberOfGroup?: string
        /** @description Filter for users which are members of the given tenant. */
        memberOfTenant?: string
        /** @description Only select Users that are potential starter for the given process definition. */
        potentialStarter?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'userId' | 'firstName' | 'lastName' | 'email'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['UserProfileDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,
       * but no `sortBy`, or if an invalid operator for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Options
   * @description The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
   * and one for individual user instances. The `OPTIONS` request allows checking for the set of
   * available operations that the currently authenticated user can perform on the /user resource.
   * If the user can perform an operation or not may depend on various things, including the user's
   * authorizations to interact with this resource and the internal configuration of the process
   * engine. `OPTIONS /user` returns available interactions on the resource.
   */
  availableOperations: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Get List Count
   * @description Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the
   * [Get Users](https://docs.camunda.org/manual/7.20/reference/rest/user/get-query/) method.
   */
  getUserCount: {
    parameters: {
      query?: {
        /** @description Filter by user id */
        id?: string
        /** @description Filter by a comma-separated list of user ids. */
        idIn?: string
        /** @description Filter by the first name of the user. Exact match. */
        firstName?: string
        /** @description Filter by the first name that the parameter is a substring of. */
        firstNameLike?: string
        /** @description Filter by the last name of the user. Exact match. */
        lastName?: string
        /** @description Filter by the last name that the parameter is a substring of. */
        lastNameLike?: string
        /** @description Filter by the email of the user. Exact match. */
        email?: string
        /** @description Filter by the email that the parameter is a substring of. */
        emailLike?: string
        /** @description Filter for users which are members of the given group. */
        memberOfGroup?: string
        /** @description Filter for users which are members of the given tenant. */
        memberOfTenant?: string
        /** @description Only select Users that are potential starter for the given process definition. */
        potentialStarter?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example, if an invalid operator for variable
       * comparison is used. See the [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Create
   * @description Create a new user.
   */
  createUser: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserDto']
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
    }
  }
  /**
   * Delete
   * @description Deletes a user by id.
   */
  deleteUser: {
    parameters: {
      path: {
        /** @description The id of the user to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': unknown
        }
      }
      /**
       * @description A Deployment with the provided id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Options
   * @description The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such
   * and one for individual user instances. The `OPTIONS` request allows checking for the set of
   * available operations that the currently authenticated user can perform on the /user resource.
   * If the user can perform an operation or not may depend on various things, including the user's
   * authorizations to interact with this resource and the internal configuration of the process
   * engine. `OPTIONS /user/{id}` returns available interactions on a resource instance.
   */
  availableUserOperations: {
    parameters: {
      path: {
        /** @description The id of the user to be deleted. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['ResourceOptionsDto']
        }
      }
    }
  }
  /**
   * Update Credentials
   * @description Updates a user's credentials (password)
   */
  updateCredentials: {
    parameters: {
      path: {
        /** @description The id of the user to be updated. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCredentialsDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description The authenticated user password does not match */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the corresponding user cannot be found */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The user could not be updated due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Profile
   * @description Retrieves a user's profile.
   */
  getUserProfile: {
    parameters: {
      path: {
        /** @description The id of the user to retrieve. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['UserProfileDto']
        }
      }
      /**
       * @description Execution with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Update User Profile
   * @description Updates the profile information of an already existing user.
   */
  updateProfile: {
    parameters: {
      path: {
        /** @description The id of the user. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserProfileDto']
      }
    }
    responses: {
      /** @description Request successful. This method returns no content. */
      204: {
        content: never
      }
      /** @description Identity service is read-only (Cannot modify users / groups / memberships). */
      403: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /** @description If the user with the requested Id cannot be found. */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description The user could not be updated due to an internal server error. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      500: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Unlock User
   * @description Unlocks a user by id.
   */
  unlockUser: {
    parameters: {
      path: {
        /** @description The id of the user to be unlocked. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      204: {
        content: never
      }
      /** @description The user who performed the operation is not a Camunda admin user. */
      403: {
        content: {
          'application/json': unknown
        }
      }
      /**
       * @description User cannot be found. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instances
   * @description Query for variable instances that fulfill given parameters. Parameters may be the
   * properties of variable instances, such as the name or type. The size
   * of the result set can be retrieved by using the [Get Variable Instance
   * Count](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query-count/)
   * method.
   */
  getVariableInstances: {
    parameters: {
      query?: {
        /** @description Filter by variable instance name. */
        variableName?: string
        /**
         * @description Filter by the variable instance name. The parameter can include the wildcard `%` to
         * express like-strategy such as: starts with (`%`name), ends with (name`%`) or
         * contains (`%`name`%`).
         */
        variableNameLike?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * process instance ids.
         */
        processInstanceIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * execution ids.
         */
        executionIdIn?: string
        /** @description Only include variable instances which belong to one of the passed and comma-separated case instance ids. */
        caseInstanceIdIn?: string
        /** @description Only include variable instances which belong to one of the passed and comma-separated case execution ids. */
        caseExecutionIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated task
         * ids.
         */
        taskIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * batch ids.
         */
        batchIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * activity instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include variable instances that have the certain values.
         * Value filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         *
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -
         * greater than;
         * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or
         * equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variableValues?: string
        /**
         * @description Match all variable names provided in `variableValues` case-insensitively. If set to `true`
         * **variableName** and **variablename** are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values provided in `variableValues` case-insensitively. If set to
         * `true` **variableValue** and **variablevalue** are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Only include variable instances which belong to one of passed scope ids. */
        variableScopeIdIn?: string
        /**
         * @description Sort the results lexicographically by a given criterion.
         * Must be used in conjunction with the sortOrder parameter.
         */
        sortBy?: 'variableName' | 'variableType' | 'activityInstanceId' | 'tenantId'
        /**
         * @description Sort the results in a given order. Values may be asc for ascending order or desc for descending order.
         * Must be used in conjunction with the sortBy parameter.
         */
        sortOrder?: 'asc' | 'desc'
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instances (POST)
   * @description Query for variable instances that fulfill given parameters through a JSON object.
   * This method is slightly more powerful than the
   * [Get Variable Instances](https://docs.camunda.org/manual/7.20/reference/rest/variable-
   * instance/get-query/) method because it allows filtering by multiple
   * variable instances of types `String`, `Number` or `Boolean`.
   */
  queryVariableInstances: {
    parameters: {
      query?: {
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /**
         * @description Pagination of results. Specifies the maximum number of results to return.
         * Will return less results if there are no more results left.
         */
        maxResults?: number
        /**
         * @description Determines whether serializable variable values (typically variables that
         * store custom Java objects) should be deserialized on server side (default
         * `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side
         * and transformed to JSON using
         * [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property
         * introspection feature. Note that this requires the Java classes of the
         * variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized
         * format. For example, a variable that is serialized as XML will be returned as
         * a JSON string containing XML.
         *
         * **Note:** While `true` is the default value for reasons of backward
         * compatibility, we recommend setting this parameter to `false` when developing
         * web applications that are independent of the Java process applications
         * deployed to the engine.
         */
        deserializeValues?: boolean
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableInstanceDto'][]
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if a `sortOrder`
       * parameter is supplied, but no `sortBy`, or if an invalid operator
       * for variable comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance Count
   * @description Query for the number of variable instances that fulfill given parameters. Takes the
   * same parameters as the [Get Variable
   * Instances](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query/)
   * method.
   */
  getVariableInstancesCount: {
    parameters: {
      query?: {
        /** @description Filter by variable instance name. */
        variableName?: string
        /**
         * @description Filter by the variable instance name. The parameter can include the wildcard `%` to
         * express like-strategy such as: starts with (`%`name), ends with (name`%`) or
         * contains (`%`name`%`).
         */
        variableNameLike?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * process instance ids.
         */
        processInstanceIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * execution ids.
         */
        executionIdIn?: string
        /** @description Only include variable instances which belong to one of the passed and comma-separated case instance ids. */
        caseInstanceIdIn?: string
        /** @description Only include variable instances which belong to one of the passed and comma-separated case execution ids. */
        caseExecutionIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated task
         * ids.
         */
        taskIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * batch ids.
         */
        batchIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * activity instance ids.
         */
        activityInstanceIdIn?: string
        /**
         * @description Only include variable instances which belong to one of the passed and comma-separated
         * tenant ids.
         */
        tenantIdIn?: string
        /**
         * @description Only include variable instances that have the certain values.
         * Value filtering expressions are comma-separated and are structured as
         * follows:
         *
         * A valid parameter value has the form `key_operator_value`.
         * `key` is the variable name, `operator` is the comparison operator to be used
         * and `value` the variable value.
         *
         * **Note:** Values are always treated as `String` objects on server side.
         *
         * Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -
         * greater than;
         * `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or
         * equal to;
         * `like`.
         * `key` and `value` may not contain underscore or comma characters.
         */
        variableValues?: string
        /**
         * @description Match all variable names provided in `variableValues` case-insensitively. If set to `true`
         * **variableName** and **variablename** are treated as equal.
         */
        variableNamesIgnoreCase?: boolean
        /**
         * @description Match all variable values provided in `variableValues` case-insensitively. If set to
         * `true` **variableValue** and **variablevalue** are treated as equal.
         */
        variableValuesIgnoreCase?: boolean
        /** @description Only include variable instances which belong to one of passed scope ids. */
        variableScopeIdIn?: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if an invalid operator for variable
       * comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance Count (POST)
   * @description Query for the number of variable instances that fulfill given parameters. This
   * method takes the same message body as the
   * [Get Variable Instances POST](https://docs.camunda.org/manual/7.20/reference/rest/variable-
   * instance/post-query/) method and therefore it is slightly more
   * powerful than the [Get Variable Instance
   * Count](https://docs.camunda.org/manual/7.20/reference/rest/variable-instance/get-query-count/)
   * method.
   */
  queryVariableInstancesCount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['VariableInstanceQueryDto']
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['CountResultDto']
        }
      }
      /**
       * @description Returned if some of the query parameters are invalid, for example if an invalid operator for variable
       * comparison is used. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance
   * @description Retrieves a variable by id.
   */
  getVariableInstance: {
    parameters: {
      query?: {
        /**
         * @description Determines whether serializable variable values (typically variables that store custom Java objects)
         * should be deserialized on server side (default `true`).
         *
         * If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON
         * using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.
         * Note that this requires the Java classes of the variable value to be on the REST API's classpath.
         *
         * If set to `false`, a serializable variable will be returned in its serialized format.
         * For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
         *
         * **Note:**  While `true` is the default value for reasons of backward compatibility, we recommend setting this
         * parameter to `false` when developing web applications that are independent of the Java process
         * applications deployed to the engine.
         */
        deserializeValue?: boolean
      }
      path: {
        /** @description The id of the variable instance. */
        id: string
      }
    }
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VariableInstanceDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Variable Instance (Binary)
   * @description Retrieves the content of a variable by id. Applicable for byte array and file
   * variables.
   */
  getVariableInstanceBinary: {
    parameters: {
      path: {
        /** @description The id of the variable instance. */
        id: string
      }
    }
    responses: {
      /**
       * @description Request successful. For binary variables or files without any MIME type information, a byte stream is returned.
       *                       File variables with MIME type information are returned as the saved type. Additionally, for file
       *                       variables the Content-Disposition header will be set.
       */
      200: {
        content: {
          'application/octet-stream': string
          '*/*': string
        }
      }
      /**
       * @description Variable with given id exists but does not serialize as binary data. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      400: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
      /**
       * @description Variable with given id does not exist. See the
       * [Introduction](https://docs.camunda.org/manual/7.20/reference/rest/overview/#error-handling)
       * for the error response format.
       */
      404: {
        content: {
          'application/json': components['schemas']['ExceptionDto']
        }
      }
    }
  }
  /**
   * Get Rest API version
   * @description Retrieves the version of the Rest API.
   */
  getRestAPIVersion: {
    responses: {
      /** @description Request successful. */
      200: {
        content: {
          'application/json': components['schemas']['VersionDto']
        }
      }
    }
  }
}
