/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/health_check': {
    /** Health */
    get: operations['health_api_health_check_get']
  }
  '/api/users': {
    /** Create User */
    post: operations['create_user_api_users_post']
  }
  '/api/login/{webapp_user_id}': {
    /** Login */
    get: operations['login_api_login__webapp_user_id__get']
  }
  '/api/refresh': {
    /** Refresh Token */
    get: operations['refresh_token_api_refresh_get']
  }
  '/api/arts': {
    /** Get Arts Sys */
    get: operations['get_arts_sys_api_arts_get']
  }
  '/api/art': {
    /** Create Art */
    post: operations['create_art_api_art_post']
  }
  '/api/art/{art_id}': {
    /** Get Art Id */
    get: operations['get_art_id_api_art__art_id__get']
    /** Update Art */
    put: operations['update_art_api_art__art_id__put']
    /** Delete External Worker */
    delete: operations['delete_external_worker_api_art__art_id__delete']
  }
  '/api/art/{art_id}/like': {
    /** Like Art */
    post: operations['like_art_api_art__art_id__like_post']
  }
  '/api/arts/{art_id}': {
    /** Get Arts Id */
    get: operations['get_arts_id_api_arts__art_id__get']
  }
  '/api/art_collection': {
    /** Get Collections */
    get: operations['get_collections_api_art_collection_get']
    /** Create Collection */
    post: operations['create_collection_api_art_collection_post']
  }
  '/api/art_collection/{collection_id}': {
    /** Get Collection */
    get: operations['get_collection_api_art_collection__collection_id__get']
    /** Update Collection */
    put: operations['update_collection_api_art_collection__collection_id__put']
    /** Delete Collection */
    delete: operations['delete_collection_api_art_collection__collection_id__delete']
  }
  '/api/event': {
    /** Get Collections */
    get: operations['get_collections_api_event_get']
    /** Create Event */
    post: operations['create_event_api_event_post']
  }
  '/api/event/{event_id}': {
    /** Get Event */
    get: operations['get_event_api_event__event_id__get']
    /** Update Event */
    put: operations['update_event_api_event__event_id__put']
  }
  '/api/art/event/{event_id}': {
    /** Delete Event */
    delete: operations['delete_event_api_art_event__event_id__delete']
  }
  '/api/external_workers': {
    /** Get External Workers */
    get: operations['get_external_workers_api_external_workers_get']
    /** Create External Worker */
    post: operations['create_external_worker_api_external_workers_post']
  }
  '/api/external_workers/{external_worker_id}': {
    /** Get External Worker */
    get: operations['get_external_worker_api_external_workers__external_worker_id__get']
    /** Update External Worker */
    put: operations['update_external_worker_api_external_workers__external_worker_id__put']
    /** Delete External Worker */
    delete: operations['delete_external_worker_api_external_workers__external_worker_id__delete']
  }
  '/api/strategy': {
    /** Get Strategies */
    get: operations['get_strategies_api_strategy_get']
    /** Create Strategy */
    post: operations['create_strategy_api_strategy_post']
  }
  '/api/flows': {
    /** Get Flows */
    get: operations['get_flows_api_flows_get']
  }
  '/api/flow/{flow_id}': {
    /** Get Flow */
    get: operations['get_flow_api_flow__flow_id__get']
    /** Update Flow */
    put: operations['update_flow_api_flow__flow_id__put']
    /** Delete Flow */
    delete: operations['delete_flow_api_flow__flow_id__delete']
  }
  '/api/flow': {
    /** Create Flow */
    post: operations['create_flow_api_flow_post']
  }
  '/api/strategy/{strategy_id}': {
    /** Get Strategy */
    get: operations['get_strategy_api_strategy__strategy_id__get']
    /** Update Strategy */
    put: operations['update_strategy_api_strategy__strategy_id__put']
    /** Delete Strategy */
    delete: operations['delete_strategy_api_strategy__strategy_id__delete']
  }
  '/api/invites/chain/{chain_id}': {
    /** Get Invited Wallets */
    get: operations['get_invited_wallets_api_invites_chain__chain_id__get']
  }
  '/api/invites/chain/{chain_id}/token/{token_id}': {
    /** Get Invited Wallets By Token Id */
    get: operations['get_invited_wallets_by_token_id_api_invites_chain__chain_id__token__token_id__get']
  }
  '/engine/process-definition': {
    /** Get Process Definitions */
    get: operations['get_process_definitions_engine_process_definition_get']
  }
  '/engine/process-definition/key/{key}/start': {
    /** Start Process Instance By Key */
    post: operations['start_process_instance_by_key_engine_process_definition_key__key__start_post']
  }
  '/engine/task': {
    /**
     * Get Tasks
     * @description Get User's Tasks
     */
    get: operations['get_tasks_engine_task_get']
    /**
     * Filter Tasks
     * @description Filter User's Task
     */
    post: operations['filter_tasks_engine_task_post']
  }
  '/engine/task/{task_id}/form-variables': {
    /** Get Form Variables */
    get: operations['get_form_variables_engine_task__task_id__form_variables_get']
  }
  '/engine/task/{task_id}/complete': {
    /** Complete Task */
    post: operations['complete_task_engine_task__task_id__complete_post']
  }
  '/engine/task/{task_id}/variables': {
    /** Modify Task Variables */
    post: operations['modify_task_variables_engine_task__task_id__variables_post']
  }
  '/engine/process-instance': {
    /** Get Process Instances */
    get: operations['get_process_instances_engine_process_instance_get']
  }
  '/engine/process-instance/count': {
    /** Get Process Instance Count */
    get: operations['get_process_instance_count_engine_process_instance_count_get']
  }
  '/engine/process-instance/{instance_id}': {
    /** Get Process Instance */
    get: operations['get_process_instance_engine_process_instance__instance_id__get']
  }
  '/engine/process-instance/{instance_id}/variables': {
    /** Get Process Instance Variables */
    get: operations['get_process_instance_variables_engine_process_instance__instance_id__variables_get']
  }
  '/engine/process-instance/{process_id}': {
    /** Delete Process Instance */
    delete: operations['delete_process_instance_engine_process_instance__process_id__delete']
  }
  '/engine/process-instance/{instance_id}/suspended': {
    /** Update Suspension State By Id */
    put: operations['update_suspension_state_by_id_engine_process_instance__instance_id__suspended_put']
  }
  '/engine/process-definition/{instance_id}/form-variables': {
    /** Get Start Form Variables */
    get: operations['get_start_form_variables_engine_process_definition__instance_id__form_variables_get']
  }
  '/engine/deployment/create': {
    /** Create Deployment */
    post: operations['create_deployment_engine_deployment_create_post']
  }
  '/seasons/{season_id}/{token_id}': {
    /** Get Nft Metadata Mainnet */
    get: operations['get_nft_metadata_mainnet_seasons__season_id___token_id__get']
  }
  '/seasons/{season_id}/chain/{chain_id}/token/{token_id}/img.jpeg': {
    /** Get Nft Picture */
    get: operations['get_nft_picture_seasons__season_id__chain__chain_id__token__token_id__img_jpeg_get']
  }
  '/seasons/{season_id}/chain/{chain_id}/{token_id}': {
    /** Get Nft Metadata */
    get: operations['get_nft_metadata_seasons__season_id__chain__chain_id___token_id__get']
  }
  '/seasons/{season_id}/chain/{chain_id}/token/{token_id}/art/{art_id}': {
    /** Store Nft Metadata */
    post: operations['store_nft_metadata_seasons__season_id__chain__chain_id__token__token_id__art__art_id__post']
  }
  '/warehouse/{path}': {
    /** Warehouse */
    get: operations['warehouse_warehouse__path__get']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** ArtCollectionRest */
    ArtCollectionRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Symbol */
      symbol?: string | null
      /** Base Uri */
      base_uri?: string | null
      /**
       * Created At
       * Format: date-time
       */
      created_at: string
      /** Type */
      type: string
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /** Arts */
      arts: unknown[]
    }
    /** ArtRest */
    ArtRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Description Prompt */
      description_prompt?: string | null
      /**
       * Created At
       * @default 2024-07-10T14:32:40.841250Z
       */
      created_at?: string | null
      /** Img Picture */
      img_picture?: string | null
      /** Type */
      type: string
      /**
       * Parent Id
       * Format: uuid
       */
      parent_id: string
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Reference Id
       * Format: uuid
       */
      reference_id: string
      /** Token Id */
      token_id?: number | null
      /**
       * Likes
       * @default 0
       */
      likes?: number
      /**
       * Is Liked
       * @default false
       */
      is_liked?: boolean
    }
    /** AuthTokenRest */
    AuthTokenRest: {
      /** Access Token */
      access_token: string
      /** Refresh Token */
      refresh_token: string
    }
    /** Body_create_art_api_art_post */
    Body_create_art_api_art_post: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
      /** Img Picture */
      img_picture?: string | null
      /** Description Prompt */
      description_prompt?: string | null
      /** Type */
      type: string
      /** Parent Id */
      parent_id?: string
      /** Reference Id */
      reference_id?: string
      /** Camunda User Id */
      camunda_user_id?: string
      /** User Id */
      user_id?: string
      /** Webapp User Id */
      webapp_user_id?: string
    }
    /** Body_create_collection_api_art_collection_post */
    Body_create_collection_api_art_collection_post: {
      /** Name */
      name: string
      /** Symbol */
      symbol: string
      /** Base Uri */
      base_uri?: string | null
      /**
       * Arts
       * @default []
       */
      arts?: unknown[]
      /** Type */
      type: string
    }
    /** Body_create_deployment_engine_deployment_create_post */
    Body_create_deployment_engine_deployment_create_post: {
      /** Tenant Id */
      tenant_id?: string | null
      /** Deployment Source */
      deployment_source?: string | null
      /**
       * Deploy Changed Only
       * @default false
       */
      deploy_changed_only?: boolean | null
      /**
       * Enable Duplicate Filtering
       * @default false
       */
      enable_duplicate_filtering?: boolean | null
      /** Deployment Name */
      deployment_name?: string | null
      /** Deployment Activation Time */
      deployment_activation_time?: string | null
      /**
       * Data
       * Format: binary
       */
      data: string
    }
    /** Body_create_event_api_event_post */
    Body_create_event_api_event_post: {
      /** Name */
      name: string
      /** Description */
      description: string
      /** Address */
      address?: string | null
      /** Location */
      location?: string | null
      /** Img Event Cover */
      img_event_cover?: string | null
      /** Collections */
      collections?: Record<string, never> | null
      /** Type */
      type: string
      /** Reference Id */
      reference_id?: string | null
    }
    /** Body_create_external_worker_api_external_workers_post */
    Body_create_external_worker_api_external_workers_post: {
      /** Name */
      name: string
      /** Description */
      description: string
      /** Type */
      type: string
      /** Img Picture */
      img_picture?: string | null
      /** Schema */
      schema?: Record<string, never> | null
      /** Parent Id */
      parent_id?: number
      /** Reference Id */
      reference_id?: number
    }
    /** Body_create_flow_api_flow_post */
    Body_create_flow_api_flow_post: {
      /** Reference Id */
      reference_id?: string | null
      /** Parent Id */
      parent_id?: string | null
      /** User Id */
      user_id?: string | null
      /** Name */
      name: string
      /** Description */
      description: string
      /** Img Picture */
      img_picture?: string | null
      /** Type */
      type: string
    }
    /** Body_create_strategy_api_strategy_post */
    Body_create_strategy_api_strategy_post: {
      /** Reference Id */
      reference_id?: string | null
      /** Parent Id */
      parent_id?: string | null
      /** User Id */
      user_id?: string | null
      /** Name */
      name: string
      /** Description */
      description: string
      /** Img Picture */
      img_picture?: string | null
      /** Schema */
      schema?: Record<string, never> | null
      /** Type */
      type: string
    }
    /** Body_create_user_api_users_post */
    Body_create_user_api_users_post: {
      /**
       * Webapp User Id
       * Format: uuid
       */
      webapp_user_id: string
      /**
       * Username
       * @default
       */
      username?: string
      /**
       * First Name
       * @default
       */
      first_name?: string
      /**
       * Last Name
       * @default
       */
      last_name?: string
      /**
       * Email
       * @default
       */
      email?: string
      /**
       * Language Code
       * @default en
       */
      language_code?: string
      /**
       * Is Admin
       * @default false
       */
      is_admin?: boolean
      /**
       * Is Suspicious
       * @default false
       */
      is_suspicious?: boolean
      /** Telegram User Id */
      telegram_user_id?: string
      /**
       * Is Block
       * @default false
       */
      is_block?: boolean
      /**
       * Is Premium
       * @default false
       */
      is_premium?: boolean
    }
    /** Body_filter_tasks_engine_task_post */
    Body_filter_tasks_engine_task_post: {
      /** @description Filter user's tasks */
      schema?: components['schemas']['GetTasksFilterSchema'] | null
      /** @description Pagination parameters */
      pagination?: components['schemas']['PaginationParams'] | null
    }
    /** Body_start_process_instance_by_key_engine_process_definition_key__key__start_post */
    Body_start_process_instance_by_key_engine_process_definition_key__key__start_post: {
      /** Variables */
      variables?: {
        [key: string]: components['schemas']['VariableValueSchema']
      }
      /**
       * Business Key
       * @description Business key
       */
      business_key?: string | null
    }
    /** Body_update_art_api_art__art_id__put */
    Body_update_art_api_art__art_id__put: {
      /** Name */
      name?: string | null
      /** Description */
      description?: string | null
      /** Img Picture */
      img_picture?: string | null
      /** Description Prompt */
      description_prompt?: string | null
      /** Type */
      type: string
      /** Parent Id */
      parent_id?: number
      /** Reference Id */
      reference_id?: number
    }
    /** Body_update_collection_api_art_collection__collection_id__put */
    Body_update_collection_api_art_collection__collection_id__put: {
      /** Name */
      name?: string
      /** Description */
      description?: string
      /** Img Event Cover */
      img_event_cover?: string
      /** Type */
      type?: string
      /** Address */
      address?: string
      /** Location */
      location?: string
      /** Collections */
      collections?: Record<string, never>
      /** Reference Id */
      reference_id?: number
    }
    /** Body_update_event_api_event__event_id__put */
    Body_update_event_api_event__event_id__put: {
      /** Name */
      name: string
      /** Description */
      description: string
      /** Address */
      address?: string | null
      /** Location */
      location?: string | null
      /** Img Event Cover */
      img_event_cover?: string | null
      /** Collections */
      collections?: Record<string, never> | null
      /** Type */
      type: string
      /** Reference Id */
      reference_id?: string | null
    }
    /** Body_update_external_worker_api_external_workers__external_worker_id__put */
    Body_update_external_worker_api_external_workers__external_worker_id__put: {
      /** Name */
      name?: string
      /** Description */
      description?: string
      /** Schema */
      schema?: Record<string, never>
      /** Img Picture */
      img_picture?: string
      /** Type */
      type?: string
      /** Parent Id */
      parent_id?: number
      /** Reference Id */
      reference_id?: number
    }
    /** Body_update_flow_api_flow__flow_id__put */
    Body_update_flow_api_flow__flow_id__put: {
      /** Name */
      name?: string
      /** Description */
      description?: string
      /** Img Picture */
      img_picture?: string
      /** Type */
      type?: string
      /** Parent Id */
      parent_id?: number
      /** Reference Id */
      reference_id?: number
    }
    /** Body_update_strategy_api_strategy__strategy_id__put */
    Body_update_strategy_api_strategy__strategy_id__put: {
      /** Name */
      name?: string
      /** Description */
      description?: string
      /** Img Picture */
      img_picture?: string
      /** Type */
      type?: string
      /** Parent Id */
      parent_id?: number
      /** Reference Id */
      reference_id?: number
    }
    /** Body_update_suspension_state_by_id_engine_process_instance__instance_id__suspended_put */
    Body_update_suspension_state_by_id_engine_process_instance__instance_id__suspended_put: {
      /** Suspended state */
      suspended: boolean
    }
    /** CountSchema */
    CountSchema: {
      /** Count */
      count: number
    }
    /**
     * DelegationState
     * @enum {string}
     */
    DelegationState: 'PENDING' | 'RESOLVED'
    /** EventRest */
    EventRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Type */
      type: string
      /** Address */
      address?: string | null
      /** Location */
      location?: string | null
      /** Img Event Cover */
      img_event_cover?: string | null
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Reference Id
       * Format: uuid
       */
      reference_id: string
      /** Collections */
      collections: Record<string, never>
    }
    /** ExternalWorkerRest */
    ExternalWorkerRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Schema */
      schema?: Record<string, never> | null
      /** Img Picture */
      img_picture?: string | null
      /** Type */
      type: string
      /**
       * Parent Id
       * Format: uuid
       */
      parent_id: string
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /** Reference Id */
      reference_id: number
    }
    /** FlowRest */
    FlowRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Key */
      key: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Img Picture */
      img_picture?: string | null
      /** Type */
      type: string
      /**
       * Parent Id
       * Format: uuid
       */
      parent_id: string
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Reference Id
       * Format: uuid
       */
      reference_id: string
    }
    /** GetTasksFilterSchema */
    GetTasksFilterSchema: {
      /** Assignee */
      assignee?: string | null
      /** Candidategroup */
      candidateGroup?: string | null
      /** Candidateuser */
      candidateUser?: string | null
      sorting?: components['schemas']['SortSchema'] | null
      /** Processinstanceid */
      processInstanceId?: string | null
      /** Processinstancebusinesskey */
      processInstanceBusinessKey?: string | null
      /** Processinstancebusinesskeyin */
      processInstanceBusinessKeyIn?: string[] | null
      /** Processdefinitionkey */
      processDefinitionKey?: string | null
      /** Processdefinitionkeyin */
      processDefinitionKeyIn?: string | null
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][]
    }
    /** LinkSchema */
    LinkSchema: {
      /** Rel */
      rel?: string | null
      /** Href */
      href?: string | null
      /** Method */
      method?: string | null
    }
    /** PaginationParams */
    PaginationParams: {
      /** Maxresults */
      maxResults: number
      /** Firstresult */
      firstResult: number
    }
    /** ProcessDefinitionSchema */
    ProcessDefinitionSchema: {
      /** Id */
      id: string
      /** Key */
      key?: string | null
      /** Category */
      category?: string | null
      /** Description */
      description?: string | null
      /** Name */
      name?: string | null
      /** Version */
      version?: number | null
      /** Resource */
      resource?: string | null
      /** Deploymentid */
      deploymentId?: string | null
      /** Diagram */
      diagram?: string | null
      /** Suspended */
      suspended?: boolean | null
      /** Tenantid */
      tenantId?: string | null
      /** Versiontag */
      versionTag?: string | null
      /** Historytimetolive */
      historyTimeToLive?: number | null
      /** Startableintasklist */
      startableInTaskList?: boolean | null
      /** Variables */
      variables?: {
        [key: string]: components['schemas']['VariableValueSchema']
      } | null
    }
    /** ProcessInstanceSchema */
    ProcessInstanceSchema: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Definitionid */
      definitionId?: string | null
      /** Links */
      links: components['schemas']['LinkSchema'][]
      /** Businesskey */
      businessKey?: string | null
      /** Caseinstanceid */
      caseInstanceId?: string | null
      /** Suspended */
      suspended?: boolean | null
      /** Tenantid */
      tenantId?: string | null
    }
    /** ProcessVariablesSchema */
    ProcessVariablesSchema: {
      /** Name */
      name: string
      value: components['schemas']['Variable']
    }
    /**
     * SortOrder
     * @enum {string}
     */
    SortOrder: 'asc' | 'desc'
    /** SortSchema */
    SortSchema: {
      sortBy?: components['schemas']['TaskQuerySortEnum'] | null
      sortOrder?: components['schemas']['SortOrder'] | null
    }
    /** StrategyRest */
    StrategyRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Description */
      description?: string | null
      /** Schema */
      schema?: Record<string, never> | null
      /** Img Picture */
      img_picture?: string | null
      /** Type */
      type: string
      /**
       * Parent Id
       * Format: uuid
       */
      parent_id: string
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Reference Id
       * Format: uuid
       */
      reference_id: string
      /**
       * Total Pnl
       * @default 0
       */
      total_pnl?: number
      /**
       * Drawdown
       * @default 0
       */
      drawdown?: number
      /**
       * Win Rate
       * @default 0
       */
      win_rate?: number
      /**
       * Profit Factor
       * @default 0
       */
      profit_factor?: number
      /**
       * Expectancy
       * @default 0
       */
      expectancy?: number
    }
    /**
     * TaskQuerySortEnum
     * @enum {string}
     */
    TaskQuerySortEnum:
      | 'assignee'
      | 'caseExecutionId'
      | 'caseExecutionVariable'
      | 'caseInstanceId'
      | 'caseInstanceVariable'
      | 'created'
      | 'description'
      | 'dueDate'
      | 'executionId'
      | 'executionVariable'
      | 'followUpDate'
      | 'id'
      | 'instanceId'
      | 'lastUpdated'
      | 'name'
      | 'nameCaseInsensitive'
      | 'priority'
      | 'processVariable'
      | 'taskVariable'
    /** TaskSchema */
    TaskSchema: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Name */
      name: string
      /** Assignee */
      assignee?: string | null
      /** Owner */
      owner?: string | null
      /**
       * Created
       * Format: date-time
       */
      created: string
      /** Due */
      due?: string | null
      /** Lastupdated */
      lastUpdated?: string | null
      delegationState?: components['schemas']['DelegationState'] | null
      /** Description */
      description?: string | null
      /**
       * Executionid
       * Format: uuid
       */
      executionId: string
      /** Parenttaskid */
      parentTaskId?: string | null
      /** Priority */
      priority: number
      /** Processdefinitionid */
      processDefinitionId: string
      /**
       * Processinstanceid
       * Format: uuid
       */
      processInstanceId: string
      /** Caseexecutionid */
      caseExecutionId?: string | null
      /** Casedefinitionid */
      caseDefinitionId?: string | null
      /** Caseinstanceid */
      caseInstanceId?: string | null
      /** Taskdefinitionkey */
      taskDefinitionKey?: string | null
      /** Suspended */
      suspended: boolean
      /** Tenantid */
      tenantId: string | null
    }
    /** UserRest */
    UserRest: {
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Username */
      username: string
      /** First Name */
      first_name?: string | null
      /** Last Name */
      last_name?: string | null
      /** Language Code */
      language_code?: string | null
      /** Is Admin */
      is_admin: boolean
      /** Is Suspicious */
      is_suspicious: boolean
      /** Camunda User Id */
      camunda_user_id?: string | null
      /** Camunda Key */
      camunda_key?: string | null
      /** Telegram User Id */
      telegram_user_id?: number | null
      /** Webapp User Id */
      webapp_user_id?: string | null
      /** Is Block */
      is_block: boolean
      /** Is Premium */
      is_premium: boolean
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
    /** Variable */
    Variable: {
      /** Type */
      type: string
      /** Value */
      value: number | string | null
      valueInfo: components['schemas']['VariableValueInfo']
    }
    /** VariableValueInfo */
    VariableValueInfo: Record<string, never>
    /** VariableValueSchema */
    VariableValueSchema: {
      /** Value */
      value: unknown
      /** Type */
      type?:
        | (
            | 'Boolean'
            | 'Bytes'
            | 'Short'
            | 'Integer'
            | 'Long'
            | 'Double'
            | 'Date'
            | 'String'
            | 'Null'
            | 'Object'
            | 'Json'
          )
        | null
      /** Valueinfo */
      valueInfo?: Record<string, never> | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Health */
  health_api_health_check_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /** Create User */
  create_user_api_users_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_user_api_users_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UserRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Login */
  login_api_login__webapp_user_id__get: {
    parameters: {
      path: {
        webapp_user_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AuthTokenRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Refresh Token */
  refresh_token_api_refresh_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /** Get Arts Sys */
  get_arts_sys_api_arts_get: {
    parameters: {
      query: {
        limit?: number
        offset?: number
        /** @description Query parameters as JSON string */
        parameters: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Art */
  create_art_api_art_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_art_api_art_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Art Id */
  get_art_id_api_art__art_id__get: {
    parameters: {
      path: {
        art_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Art */
  update_art_api_art__art_id__put: {
    parameters: {
      path: {
        art_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_update_art_api_art__art_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete External Worker */
  delete_external_worker_api_art__art_id__delete: {
    parameters: {
      path: {
        art_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Like Art */
  like_art_api_art__art_id__like_post: {
    parameters: {
      path: {
        art_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Arts Id */
  get_arts_id_api_arts__art_id__get: {
    parameters: {
      path: {
        art_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Collections */
  get_collections_api_art_collection_get: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtCollectionRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Collection */
  create_collection_api_art_collection_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_collection_api_art_collection_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtCollectionRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Collection */
  get_collection_api_art_collection__collection_id__get: {
    parameters: {
      path: {
        collection_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtCollectionRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Collection */
  update_collection_api_art_collection__collection_id__put: {
    parameters: {
      path: {
        collection_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_update_collection_api_art_collection__collection_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ArtCollectionRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete Collection */
  delete_collection_api_art_collection__collection_id__delete: {
    parameters: {
      path: {
        collection_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Collections */
  get_collections_api_event_get: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Event */
  create_event_api_event_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_event_api_event_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Event */
  get_event_api_event__event_id__get: {
    parameters: {
      path: {
        event_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Event */
  update_event_api_event__event_id__put: {
    parameters: {
      path: {
        event_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_update_event_api_event__event_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete Event */
  delete_event_api_art_event__event_id__delete: {
    parameters: {
      path: {
        event_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get External Workers */
  get_external_workers_api_external_workers_get: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExternalWorkerRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create External Worker */
  create_external_worker_api_external_workers_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_external_worker_api_external_workers_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExternalWorkerRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get External Worker */
  get_external_worker_api_external_workers__external_worker_id__get: {
    parameters: {
      path: {
        external_worker_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExternalWorkerRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update External Worker */
  update_external_worker_api_external_workers__external_worker_id__put: {
    parameters: {
      path: {
        external_worker_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_update_external_worker_api_external_workers__external_worker_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExternalWorkerRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete External Worker */
  delete_external_worker_api_external_workers__external_worker_id__delete: {
    parameters: {
      path: {
        external_worker_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Strategies */
  get_strategies_api_strategy_get: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['StrategyRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Strategy */
  create_strategy_api_strategy_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_strategy_api_strategy_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['StrategyRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Flows */
  get_flows_api_flows_get: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FlowRest'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Flow */
  get_flow_api_flow__flow_id__get: {
    parameters: {
      path: {
        flow_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FlowRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Flow */
  update_flow_api_flow__flow_id__put: {
    parameters: {
      path: {
        flow_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_update_flow_api_flow__flow_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FlowRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete Flow */
  delete_flow_api_flow__flow_id__delete: {
    parameters: {
      path: {
        flow_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Flow */
  create_flow_api_flow_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_create_flow_api_flow_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FlowRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Strategy */
  get_strategy_api_strategy__strategy_id__get: {
    parameters: {
      path: {
        strategy_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['StrategyRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Strategy */
  update_strategy_api_strategy__strategy_id__put: {
    parameters: {
      path: {
        strategy_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_update_strategy_api_strategy__strategy_id__put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['StrategyRest']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete Strategy */
  delete_strategy_api_strategy__strategy_id__delete: {
    parameters: {
      path: {
        strategy_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Invited Wallets */
  get_invited_wallets_api_invites_chain__chain_id__get: {
    parameters: {
      query?: {
        only_updated?: boolean
      }
      path: {
        chain_id: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Invited Wallets By Token Id */
  get_invited_wallets_by_token_id_api_invites_chain__chain_id__token__token_id__get: {
    parameters: {
      path: {
        chain_id: number
        token_id: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Process Definitions */
  get_process_definitions_engine_process_definition_get: {
    parameters: {
      query?: {
        /** @description Filter by process definition id */
        processDefinitionId?: string
        /** @description Filter by a comma-separated list of process definition ids. */
        processDefinitionIdIn?: string
        /** @description Filter by the name of the process definition. */
        name?: string
        /** @description Filter by the name that the parameter is a substring of. */
        nameLike?: string
        /** @description Filter by the deployment the id belongs to. */
        deploymentId?: string
        /** @description Filter by the deployment date after a given date. Format yyyy-MM-dd'T'HH:mm:ss.SSSZ */
        deployedAfter?: string
        /** @description Filter by the deployment date before a given date. Format yyyy-MM-dd'T'HH:mm:ss.SSSZ */
        deployedAt?: string
        /** @description Filter by the key of the process definition. */
        key?: string
        /** @description Filter by a comma-separated list of keys. */
        keysIn?: string
        /** @description Filter by the key that the parameter is a substring of. */
        keyLike?: string
        /** @description Filter by the category of the process definition. */
        category?: string
        /** @description Filter by the category that the parameter is a substring of. */
        categoryLike?: string
        /** @description Filter by the version of the process definition. */
        version?: number
        /** @description Filter by the latest version of the process definition. */
        latestVersion?: boolean
        /** @description Filter by the name of the process definition resource. */
        resourceName?: string
        /** @description Filter by the name of the process definition resource that the parameter is a substring of. */
        resourceNameLike?: string
        /** @description Filter by a user name who is allowed to start the process. */
        startableBy?: string
        /** @description Filter by the activation state of the process definition. */
        active?: boolean
        /** @description Filter by the suspension state of the process definition. */
        suspended?: boolean
        /** @description Filter by the incident id. */
        incidentId?: string
        /** @description Filter by the incident type. */
        incidentType?: string
        /** @description Filter by the incident message. */
        incidentMessage?: string
        /** @description Filter by the incident message that the parameter is a substring of. */
        incidentMessageLike?: string
        /** @description Filter by a comma-separated list of tenant ids. */
        tenantIdIn?: string
        /** @description Only include process definitions which belong to no tenant. Value may only be true, as false is the default behavior. */
        withoutTenantId?: boolean
        /** @description Include process definitions which belong to no tenant. Can be used in combination with tenantIdIn. Value may only be true, as false is the default behavior. */
        includeProcessDefinitionsWithoutTenantId?: boolean
        /** @description Filter by the version tag of the process definition. */
        versionTag?: string
        /** @description Filter by the version tag that the parameter is a substring of. */
        versionTagLike?: string
        /** @description Only include process definitions without a version tag. Value may only be true, as false is the default behavior. */
        withoutVersionTag?: boolean
        /** @description Filter by the startable state of the process definition. */
        startableInTasklist?: boolean
        /** @description Filter by the not startable state of the process definition. */
        notStartableInTasklist?: boolean
        /** @description Filter by the startable permission check state of the process definition. */
        startablePermissionCheck?: boolean
        /** @description Enum: "category" "key" "id" "name" "version" "deploymentId" "deployTime" "tenantId " "versionTag". */
        sortBy?: string
        /** @description Enum: "asc" "desc". */
        sortOrder?: string
        /** @description Pagination of results. Specifies the index of the first result to return. */
        firstResult?: number
        /** @description Pagination of results. Specifies the maximum number of results to return. */
        maxResults?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessDefinitionSchema'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Start Process Instance By Key */
  start_process_instance_by_key_engine_process_definition_key__key__start_post: {
    parameters: {
      path: {
        key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_start_process_instance_by_key_engine_process_definition_key__key__start_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceSchema']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /**
   * Get Tasks
   * @description Get User's Tasks
   */
  get_tasks_engine_task_get: {
    parameters: {
      query?: {
        /** @description Limit pagination parameters */
        limit?: number | null
        /** @description Offset pagination parameters */
        offset?: number | null
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TaskSchema'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /**
   * Filter Tasks
   * @description Filter User's Task
   */
  filter_tasks_engine_task_post: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['Body_filter_tasks_engine_task_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TaskSchema'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Form Variables */
  get_form_variables_engine_task__task_id__form_variables_get: {
    parameters: {
      path: {
        task_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessVariablesSchema'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Complete Task */
  complete_task_engine_task__task_id__complete_post: {
    parameters: {
      path: {
        task_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          [key: string]: components['schemas']['VariableValueSchema']
        } | null
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Modify Task Variables */
  modify_task_variables_engine_task__task_id__variables_post: {
    parameters: {
      path: {
        task_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Variable'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Process Instances */
  get_process_instances_engine_process_instance_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceSchema'][]
        }
      }
    }
  }
  /** Get Process Instance Count */
  get_process_instance_count_engine_process_instance_count_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CountSchema']
        }
      }
    }
  }
  /** Get Process Instance */
  get_process_instance_engine_process_instance__instance_id__get: {
    parameters: {
      path: {
        instance_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessInstanceSchema']
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Process Instance Variables */
  get_process_instance_variables_engine_process_instance__instance_id__variables_get: {
    parameters: {
      path: {
        instance_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['VariableValueSchema']
          }
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Delete Process Instance */
  delete_process_instance_engine_process_instance__process_id__delete: {
    parameters: {
      path: {
        process_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Update Suspension State By Id */
  update_suspension_state_by_id_engine_process_instance__instance_id__suspended_put: {
    parameters: {
      path: {
        instance_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Body_update_suspension_state_by_id_engine_process_instance__instance_id__suspended_put']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Start Form Variables */
  get_start_form_variables_engine_process_definition__instance_id__form_variables_get: {
    parameters: {
      path: {
        instance_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Variable'][]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Create Deployment */
  create_deployment_engine_deployment_create_post: {
    parameters: {
      query?: {
        dependencies?: unknown
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_create_deployment_engine_deployment_create_post']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Nft Metadata Mainnet */
  get_nft_metadata_mainnet_seasons__season_id___token_id__get: {
    parameters: {
      path: {
        season_id: string
        token_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Nft Picture */
  get_nft_picture_seasons__season_id__chain__chain_id__token__token_id__img_jpeg_get: {
    parameters: {
      path: {
        season_id: string
        chain_id: string
        token_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Get Nft Metadata */
  get_nft_metadata_seasons__season_id__chain__chain_id___token_id__get: {
    parameters: {
      path: {
        season_id: string
        chain_id: string
        token_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Store Nft Metadata */
  store_nft_metadata_seasons__season_id__chain__chain_id__token__token_id__art__art_id__post: {
    parameters: {
      path: {
        season_id: string
        chain_id: string
        token_id: string
        art_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
  /** Warehouse */
  warehouse_warehouse__path__get: {
    parameters: {
      path: {
        path: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError']
        }
      }
    }
  }
}
